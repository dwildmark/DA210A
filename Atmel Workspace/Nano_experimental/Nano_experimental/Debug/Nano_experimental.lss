
Nano_experimental.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010d6  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e1  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001023  00000000  00000000  0000184b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001044b  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  00012d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00012e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003e0e  00000000  00000000  00012edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	1e d0       	rcall	.+60     	; 0xb2 <main>
  76:	72 c0       	rjmp	.+228    	; 0x15c <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <sysclk_init>:
#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	80 93 64 00 	sts	0x0064, r24
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
  80:	80 91 61 00 	lds	r24, 0x0061
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
  84:	83 30       	cpi	r24, 0x03	; 3
  86:	59 f0       	breq	.+22     	; 0x9e <sysclk_init+0x24>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
  88:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
  8a:	f8 94       	cli
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
  8c:	5f 93       	push	r21
  8e:	50 e8       	ldi	r21, 0x80	; 128
  90:	50 93 61 00 	sts	0x0061, r21
  94:	53 e0       	ldi	r21, 0x03	; 3
  96:	50 93 61 00 	sts	0x0061, r21
  9a:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  9c:	8f bf       	out	0x3f, r24	; 63
  9e:	08 95       	ret

000000a0 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  a0:	95 b1       	in	r25, 0x05	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	80 62       	ori	r24, 0x20	; 32
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  a6:	8f 77       	andi	r24, 0x7F	; 127
  a8:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  aa:	89 2f       	mov	r24, r25
  ac:	80 6a       	ori	r24, 0xA0	; 160
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <main>:
#define PIN_7	IOPORT_CREATE_PIN(PORTD, 7)//Knapp 2
#define PIN_6	IOPORT_CREATE_PIN(PORTD, 6)//Knapp 3
#define PIN_5	IOPORT_CREATE_PIN(PORTD, 5)//Knapp 4
int main( void )
{
	sysclk_init();
  b2:	e3 df       	rcall	.-58     	; 0x7a <sysclk_init>
	board_init();
  b4:	f5 df       	rcall	.-22     	; 0xa0 <board_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
  b6:	25 9a       	sbi	0x04, 5	; 4
  b8:	24 9a       	sbi	0x04, 4	; 4
  ba:	23 9a       	sbi	0x04, 3	; 4
  bc:	22 9a       	sbi	0x04, 2	; 4
  be:	21 9a       	sbi	0x04, 1	; 4
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
  c0:	20 98       	cbi	0x04, 0	; 4
  c2:	57 98       	cbi	0x0a, 7	; 10
  c4:	56 98       	cbi	0x0a, 6	; 10
  c6:	55 98       	cbi	0x0a, 5	; 10
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  c8:	2d 9a       	sbi	0x05, 5	; 5
  ca:	2c 9a       	sbi	0x05, 4	; 5
  cc:	2b 9a       	sbi	0x05, 3	; 5
  ce:	2a 9a       	sbi	0x05, 2	; 5
  d0:	29 9a       	sbi	0x05, 1	; 5
#define PIN_8	IOPORT_CREATE_PIN(PORTB, 0)//Knapp 1
#define PIN_7	IOPORT_CREATE_PIN(PORTD, 7)//Knapp 2
#define PIN_6	IOPORT_CREATE_PIN(PORTD, 6)//Knapp 3
#define PIN_5	IOPORT_CREATE_PIN(PORTD, 5)//Knapp 4
int main( void )
{
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
  d6:	53 b1       	in	r21, 0x03	; 3
  d8:	89 b1       	in	r24, 0x09	; 9
  da:	88 1f       	adc	r24, r24
  dc:	88 27       	eor	r24, r24
  de:	88 1f       	adc	r24, r24
  e0:	99 b1       	in	r25, 0x09	; 9
  e2:	96 fb       	bst	r25, 6
  e4:	99 27       	eor	r25, r25
  e6:	90 f9       	bld	r25, 0
  e8:	29 b1       	in	r18, 0x09	; 9
  ea:	25 fb       	bst	r18, 5
  ec:	22 27       	eor	r18, r18
  ee:	20 f9       	bld	r18, 0
	{
		btn_1 = ioport_get_pin_level(PIN_8);
		btn_2 = ioport_get_pin_level(PIN_7);
		btn_3 = ioport_get_pin_level(PIN_6);
		btn_4 = ioport_get_pin_level(PIN_5);
		if(btn_1 || btn_2 || btn_3 || btn_4)
  f0:	50 fd       	sbrc	r21, 0
  f2:	08 c0       	rjmp	.+16     	; 0x104 <main+0x52>
  f4:	81 11       	cpse	r24, r1
  f6:	04 c0       	rjmp	.+8      	; 0x100 <main+0x4e>
  f8:	91 11       	cpse	r25, r1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x4e>
  fc:	22 23       	and	r18, r18
  fe:	59 f3       	breq	.-42     	; 0xd6 <main+0x24>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 100:	2c 9a       	sbi	0x05, 4	; 5
 102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x54>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 104:	2c 98       	cbi	0x05, 4	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 106:	81 11       	cpse	r24, r1
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0x5c>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 10a:	2b 9a       	sbi	0x05, 3	; 5
 10c:	01 c0       	rjmp	.+2      	; 0x110 <main+0x5e>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 10e:	2b 98       	cbi	0x05, 3	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 110:	91 11       	cpse	r25, r1
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x66>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 114:	2a 9a       	sbi	0x05, 2	; 5
 116:	01 c0       	rjmp	.+2      	; 0x11a <main+0x68>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 118:	2a 98       	cbi	0x05, 2	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 11a:	21 11       	cpse	r18, r1
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0x70>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 11e:	29 9a       	sbi	0x05, 1	; 5
 120:	01 c0       	rjmp	.+2      	; 0x124 <main+0x72>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 122:	29 98       	cbi	0x05, 1	; 5
#define PIN_8	IOPORT_CREATE_PIN(PORTB, 0)//Knapp 1
#define PIN_7	IOPORT_CREATE_PIN(PORTD, 7)//Knapp 2
#define PIN_6	IOPORT_CREATE_PIN(PORTD, 6)//Knapp 3
#define PIN_5	IOPORT_CREATE_PIN(PORTD, 5)//Knapp 4
int main( void )
{
 124:	84 2f       	mov	r24, r20
 126:	93 2f       	mov	r25, r19
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	8d 34       	cpi	r24, 0x4D	; 77
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	92 07       	cpc	r25, r18
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x76>
 132:	2d 98       	cbi	0x05, 5	; 5
 134:	84 2f       	mov	r24, r20
 136:	93 2f       	mov	r25, r19
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	82 38       	cpi	r24, 0x82	; 130
 13c:	26 e0       	ldi	r18, 0x06	; 6
 13e:	92 07       	cpc	r25, r18
 140:	d9 f7       	brne	.-10     	; 0x138 <main+0x86>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 142:	2d 9a       	sbi	0x05, 5	; 5
 144:	84 2f       	mov	r24, r20
 146:	93 2f       	mov	r25, r19
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	80 35       	cpi	r24, 0x50	; 80
 14c:	23 ec       	ldi	r18, 0xC3	; 195
 14e:	92 07       	cpc	r25, r18
 150:	d9 f7       	brne	.-10     	; 0x148 <main+0x96>
 152:	2c 9a       	sbi	0x05, 4	; 5
 154:	2b 9a       	sbi	0x05, 3	; 5
 156:	2a 9a       	sbi	0x05, 2	; 5
 158:	29 9a       	sbi	0x05, 1	; 5
 15a:	bd cf       	rjmp	.-134    	; 0xd6 <main+0x24>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
