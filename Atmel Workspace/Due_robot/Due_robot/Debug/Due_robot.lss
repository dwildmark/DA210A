
Due_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005638  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085638  00085638  0000d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  00085640  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a2bc  200709b0  00085ff0  000109ac  2**3
                  ALLOC
  4 .stack        00002004  2007ac6c  000902ac  000109ac  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010b20  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003328  00000000  00000000  00021550  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000078b9  00000000  00000000  00024878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d40  00000000  00000000  0002c131  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c58  00000000  00000000  0002ce71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a8d5  00000000  00000000  0002dac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001343b  00000000  00000000  0004839e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068fc4  00000000  00000000  0005b7d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c48  00000000  00000000  000c47a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cc70 	.word	0x2007cc70
   80004:	0008210d 	.word	0x0008210d
   80008:	00082109 	.word	0x00082109
   8000c:	00082109 	.word	0x00082109
   80010:	00082109 	.word	0x00082109
   80014:	00082109 	.word	0x00082109
   80018:	00082109 	.word	0x00082109
	...
   8002c:	00080289 	.word	0x00080289
   80030:	00082109 	.word	0x00082109
   80034:	00000000 	.word	0x00000000
   80038:	00080305 	.word	0x00080305
   8003c:	00080341 	.word	0x00080341
   80040:	00082109 	.word	0x00082109
   80044:	00082109 	.word	0x00082109
   80048:	00082109 	.word	0x00082109
   8004c:	00082109 	.word	0x00082109
   80050:	00082109 	.word	0x00082109
   80054:	00082109 	.word	0x00082109
   80058:	00082109 	.word	0x00082109
   8005c:	00082109 	.word	0x00082109
   80060:	00082109 	.word	0x00082109
   80064:	00082109 	.word	0x00082109
   80068:	00000000 	.word	0x00000000
   8006c:	00081f79 	.word	0x00081f79
   80070:	00081f8d 	.word	0x00081f8d
   80074:	00081fa1 	.word	0x00081fa1
   80078:	00081fb5 	.word	0x00081fb5
	...
   80084:	00081775 	.word	0x00081775
   80088:	00082109 	.word	0x00082109
   8008c:	00082109 	.word	0x00082109
   80090:	00082109 	.word	0x00082109
   80094:	00082109 	.word	0x00082109
   80098:	00082109 	.word	0x00082109
   8009c:	00082109 	.word	0x00082109
   800a0:	00082109 	.word	0x00082109
   800a4:	00000000 	.word	0x00000000
   800a8:	00082109 	.word	0x00082109
   800ac:	00082109 	.word	0x00082109
   800b0:	00082109 	.word	0x00082109
   800b4:	00082109 	.word	0x00082109
   800b8:	00082109 	.word	0x00082109
   800bc:	00082109 	.word	0x00082109
   800c0:	00082109 	.word	0x00082109
   800c4:	00082109 	.word	0x00082109
   800c8:	00082109 	.word	0x00082109
   800cc:	00082109 	.word	0x00082109
   800d0:	00082109 	.word	0x00082109
   800d4:	00082109 	.word	0x00082109
   800d8:	00082109 	.word	0x00082109
   800dc:	00082109 	.word	0x00082109
   800e0:	00082109 	.word	0x00082109
   800e4:	00082109 	.word	0x00082109
   800e8:	00082109 	.word	0x00082109
   800ec:	00082109 	.word	0x00082109
   800f0:	00082109 	.word	0x00082109

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709b0 	.word	0x200709b0
   80110:	00000000 	.word	0x00000000
   80114:	00085640 	.word	0x00085640

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00085640 	.word	0x00085640
   80144:	200709b4 	.word	0x200709b4
   80148:	00085640 	.word	0x00085640
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b9a8      	cbnz	r0, 8017e <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0a      	ble.n	80174 <_read+0x24>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42bc      	cmp	r4, r7
   80170:	d1f8      	bne.n	80164 <_read+0x14>
   80172:	e001      	b.n	80178 <_read+0x28>
   80174:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   80178:	4640      	mov	r0, r8
   8017a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8017e:	f04f 30ff 	mov.w	r0, #4294967295
   80182:	4770      	bx	lr
   80184:	2007ac64 	.word	0x2007ac64
   80188:	2007ac5c 	.word	0x2007ac5c

0008018c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8018c:	6943      	ldr	r3, [r0, #20]
   8018e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80192:	bf1d      	ittte	ne
   80194:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80198:	61c1      	strne	r1, [r0, #28]
	return 0;
   8019a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8019c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019e:	4770      	bx	lr

000801a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801a0:	6943      	ldr	r3, [r0, #20]
   801a2:	f013 0f01 	tst.w	r3, #1
   801a6:	d005      	beq.n	801b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a8:	6983      	ldr	r3, [r0, #24]
   801aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801ae:	600b      	str	r3, [r1, #0]

	return 0;
   801b0:	2000      	movs	r0, #0
   801b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b6:	4770      	bx	lr

000801b8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   801b8:	f100 0308 	add.w	r3, r0, #8
   801bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   801be:	f04f 32ff 	mov.w	r2, #4294967295
   801c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   801c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   801c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   801c8:	2300      	movs	r3, #0
   801ca:	6003      	str	r3, [r0, #0]
   801cc:	4770      	bx	lr
   801ce:	bf00      	nop

000801d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   801d0:	2300      	movs	r3, #0
   801d2:	6103      	str	r3, [r0, #16]
   801d4:	4770      	bx	lr
   801d6:	bf00      	nop

000801d8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   801d8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   801de:	6842      	ldr	r2, [r0, #4]
   801e0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   801e2:	685a      	ldr	r2, [r3, #4]
   801e4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   801e6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   801e8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801ec:	6803      	ldr	r3, [r0, #0]
   801ee:	3301      	adds	r3, #1
   801f0:	6003      	str	r3, [r0, #0]
   801f2:	4770      	bx	lr

000801f4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   801f4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   801f6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   801f8:	f1b4 3fff 	cmp.w	r4, #4294967295
   801fc:	d101      	bne.n	80202 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   801fe:	6903      	ldr	r3, [r0, #16]
   80200:	e00a      	b.n	80218 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80202:	f100 0308 	add.w	r3, r0, #8
   80206:	68c2      	ldr	r2, [r0, #12]
   80208:	6812      	ldr	r2, [r2, #0]
   8020a:	4294      	cmp	r4, r2
   8020c:	d304      	bcc.n	80218 <vListInsert+0x24>
   8020e:	685b      	ldr	r3, [r3, #4]
   80210:	685a      	ldr	r2, [r3, #4]
   80212:	6812      	ldr	r2, [r2, #0]
   80214:	4294      	cmp	r4, r2
   80216:	d2fa      	bcs.n	8020e <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80218:	685a      	ldr	r2, [r3, #4]
   8021a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8021c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8021e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80220:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80222:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80224:	6803      	ldr	r3, [r0, #0]
   80226:	3301      	adds	r3, #1
   80228:	6003      	str	r3, [r0, #0]
}
   8022a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8022e:	4770      	bx	lr

00080230 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80230:	6843      	ldr	r3, [r0, #4]
   80232:	6882      	ldr	r2, [r0, #8]
   80234:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80236:	6883      	ldr	r3, [r0, #8]
   80238:	6842      	ldr	r2, [r0, #4]
   8023a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8023c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8023e:	685a      	ldr	r2, [r3, #4]
   80240:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80242:	bf04      	itt	eq
   80244:	6882      	ldreq	r2, [r0, #8]
   80246:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80248:	2200      	movs	r2, #0
   8024a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8024c:	681a      	ldr	r2, [r3, #0]
   8024e:	3a01      	subs	r2, #1
   80250:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80252:	6818      	ldr	r0, [r3, #0]
}
   80254:	4770      	bx	lr
   80256:	bf00      	nop

00080258 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80258:	4803      	ldr	r0, [pc, #12]	; (80268 <prvPortStartFirstTask+0x10>)
   8025a:	6800      	ldr	r0, [r0, #0]
   8025c:	6800      	ldr	r0, [r0, #0]
   8025e:	f380 8808 	msr	MSP, r0
   80262:	b662      	cpsie	i
   80264:	df00      	svc	0
   80266:	bf00      	nop
   80268:	e000ed08 	.word	0xe000ed08

0008026c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8026c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80270:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80274:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80278:	2300      	movs	r3, #0
   8027a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8027e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80282:	3840      	subs	r0, #64	; 0x40
   80284:	4770      	bx	lr
   80286:	bf00      	nop

00080288 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80288:	4b06      	ldr	r3, [pc, #24]	; (802a4 <pxCurrentTCBConst2>)
   8028a:	6819      	ldr	r1, [r3, #0]
   8028c:	6808      	ldr	r0, [r1, #0]
   8028e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80292:	f380 8809 	msr	PSP, r0
   80296:	f04f 0000 	mov.w	r0, #0
   8029a:	f380 8811 	msr	BASEPRI, r0
   8029e:	f04e 0e0d 	orr.w	lr, lr, #13
   802a2:	4770      	bx	lr

000802a4 <pxCurrentTCBConst2>:
   802a4:	2007aaa8 	.word	0x2007aaa8

000802a8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   802a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   802ac:	4b01      	ldr	r3, [pc, #4]	; (802b4 <vPortYieldFromISR+0xc>)
   802ae:	601a      	str	r2, [r3, #0]
   802b0:	4770      	bx	lr
   802b2:	bf00      	nop
   802b4:	e000ed04 	.word	0xe000ed04

000802b8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   802b8:	f3ef 8011 	mrs	r0, BASEPRI
   802bc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   802c0:	f381 8811 	msr	BASEPRI, r1
   802c4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   802c6:	2000      	movs	r0, #0

000802c8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   802c8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   802ca:	4b03      	ldr	r3, [pc, #12]	; (802d8 <vPortEnterCritical+0x10>)
   802cc:	4798      	blx	r3
	uxCriticalNesting++;
   802ce:	4a03      	ldr	r2, [pc, #12]	; (802dc <vPortEnterCritical+0x14>)
   802d0:	6813      	ldr	r3, [r2, #0]
   802d2:	3301      	adds	r3, #1
   802d4:	6013      	str	r3, [r2, #0]
   802d6:	bd08      	pop	{r3, pc}
   802d8:	000802b9 	.word	0x000802b9
   802dc:	2007012c 	.word	0x2007012c

000802e0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   802e0:	f380 8811 	msr	BASEPRI, r0
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop

000802e8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   802e8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   802ea:	4a04      	ldr	r2, [pc, #16]	; (802fc <vPortExitCritical+0x14>)
   802ec:	6813      	ldr	r3, [r2, #0]
   802ee:	3b01      	subs	r3, #1
   802f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   802f2:	b913      	cbnz	r3, 802fa <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   802f4:	2000      	movs	r0, #0
   802f6:	4b02      	ldr	r3, [pc, #8]	; (80300 <vPortExitCritical+0x18>)
   802f8:	4798      	blx	r3
   802fa:	bd08      	pop	{r3, pc}
   802fc:	2007012c 	.word	0x2007012c
   80300:	000802e1 	.word	0x000802e1

00080304 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80304:	f3ef 8009 	mrs	r0, PSP
   80308:	4b0c      	ldr	r3, [pc, #48]	; (8033c <pxCurrentTCBConst>)
   8030a:	681a      	ldr	r2, [r3, #0]
   8030c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80310:	6010      	str	r0, [r2, #0]
   80312:	e92d 4008 	stmdb	sp!, {r3, lr}
   80316:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8031a:	f380 8811 	msr	BASEPRI, r0
   8031e:	f000 feb3 	bl	81088 <vTaskSwitchContext>
   80322:	f04f 0000 	mov.w	r0, #0
   80326:	f380 8811 	msr	BASEPRI, r0
   8032a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8032e:	6819      	ldr	r1, [r3, #0]
   80330:	6808      	ldr	r0, [r1, #0]
   80332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80336:	f380 8809 	msr	PSP, r0
   8033a:	4770      	bx	lr

0008033c <pxCurrentTCBConst>:
   8033c:	2007aaa8 	.word	0x2007aaa8

00080340 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80340:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80346:	4b05      	ldr	r3, [pc, #20]	; (8035c <SysTick_Handler+0x1c>)
   80348:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8034a:	4b05      	ldr	r3, [pc, #20]	; (80360 <SysTick_Handler+0x20>)
   8034c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8034e:	4b05      	ldr	r3, [pc, #20]	; (80364 <SysTick_Handler+0x24>)
   80350:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80352:	2000      	movs	r0, #0
   80354:	4b04      	ldr	r3, [pc, #16]	; (80368 <SysTick_Handler+0x28>)
   80356:	4798      	blx	r3
   80358:	bd08      	pop	{r3, pc}
   8035a:	bf00      	nop
   8035c:	e000ed04 	.word	0xe000ed04
   80360:	000802b9 	.word	0x000802b9
   80364:	00080d51 	.word	0x00080d51
   80368:	000802e1 	.word	0x000802e1

0008036c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   8036c:	4a03      	ldr	r2, [pc, #12]	; (8037c <vPortSetupTimerInterrupt+0x10>)
   8036e:	4b04      	ldr	r3, [pc, #16]	; (80380 <vPortSetupTimerInterrupt+0x14>)
   80370:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80372:	2207      	movs	r2, #7
   80374:	3b04      	subs	r3, #4
   80376:	601a      	str	r2, [r3, #0]
   80378:	4770      	bx	lr
   8037a:	bf00      	nop
   8037c:	0001481f 	.word	0x0001481f
   80380:	e000e014 	.word	0xe000e014

00080384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80384:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80386:	4b09      	ldr	r3, [pc, #36]	; (803ac <xPortStartScheduler+0x28>)
   80388:	681a      	ldr	r2, [r3, #0]
   8038a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8038e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80390:	681a      	ldr	r2, [r3, #0]
   80392:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80396:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80398:	4b05      	ldr	r3, [pc, #20]	; (803b0 <xPortStartScheduler+0x2c>)
   8039a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8039c:	2400      	movs	r4, #0
   8039e:	4b05      	ldr	r3, [pc, #20]	; (803b4 <xPortStartScheduler+0x30>)
   803a0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <xPortStartScheduler+0x34>)
   803a4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   803a6:	4620      	mov	r0, r4
   803a8:	bd10      	pop	{r4, pc}
   803aa:	bf00      	nop
   803ac:	e000ed20 	.word	0xe000ed20
   803b0:	0008036d 	.word	0x0008036d
   803b4:	2007012c 	.word	0x2007012c
   803b8:	00080259 	.word	0x00080259

000803bc <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   803bc:	4a13      	ldr	r2, [pc, #76]	; (8040c <prvInsertBlockIntoFreeList+0x50>)
   803be:	e000      	b.n	803c2 <prvInsertBlockIntoFreeList+0x6>
   803c0:	461a      	mov	r2, r3
   803c2:	6813      	ldr	r3, [r2, #0]
   803c4:	4283      	cmp	r3, r0
   803c6:	d3fb      	bcc.n	803c0 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   803c8:	b430      	push	{r4, r5}
   803ca:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   803cc:	6854      	ldr	r4, [r2, #4]
   803ce:	1915      	adds	r5, r2, r4
   803d0:	4285      	cmp	r5, r0
   803d2:	d103      	bne.n	803dc <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   803d4:	6868      	ldr	r0, [r5, #4]
   803d6:	4404      	add	r4, r0
   803d8:	6054      	str	r4, [r2, #4]
   803da:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   803dc:	6842      	ldr	r2, [r0, #4]
   803de:	1884      	adds	r4, r0, r2
   803e0:	429c      	cmp	r4, r3
   803e2:	d10c      	bne.n	803fe <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   803e4:	4b0a      	ldr	r3, [pc, #40]	; (80410 <prvInsertBlockIntoFreeList+0x54>)
   803e6:	681b      	ldr	r3, [r3, #0]
   803e8:	429c      	cmp	r4, r3
   803ea:	d006      	beq.n	803fa <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   803ec:	6863      	ldr	r3, [r4, #4]
   803ee:	441a      	add	r2, r3
   803f0:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   803f2:	680b      	ldr	r3, [r1, #0]
   803f4:	681b      	ldr	r3, [r3, #0]
   803f6:	6003      	str	r3, [r0, #0]
   803f8:	e002      	b.n	80400 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   803fa:	6004      	str	r4, [r0, #0]
   803fc:	e000      	b.n	80400 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   803fe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80400:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80402:	bf18      	it	ne
   80404:	6008      	strne	r0, [r1, #0]
	}
}
   80406:	bc30      	pop	{r4, r5}
   80408:	4770      	bx	lr
   8040a:	bf00      	nop
   8040c:	2007a9d4 	.word	0x2007a9d4
   80410:	2007a9d0 	.word	0x2007a9d0

00080414 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80414:	b538      	push	{r3, r4, r5, lr}
   80416:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80418:	4b29      	ldr	r3, [pc, #164]	; (804c0 <pvPortMalloc+0xac>)
   8041a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   8041c:	4b29      	ldr	r3, [pc, #164]	; (804c4 <pvPortMalloc+0xb0>)
   8041e:	681b      	ldr	r3, [r3, #0]
   80420:	b99b      	cbnz	r3, 8044a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80422:	4a29      	ldr	r2, [pc, #164]	; (804c8 <pvPortMalloc+0xb4>)
   80424:	4b29      	ldr	r3, [pc, #164]	; (804cc <pvPortMalloc+0xb8>)
   80426:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80428:	2100      	movs	r1, #0
   8042a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   8042c:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80430:	1898      	adds	r0, r3, r2
   80432:	4d24      	ldr	r5, [pc, #144]	; (804c4 <pvPortMalloc+0xb0>)
   80434:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80436:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   8043a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   8043c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8043e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80440:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80442:	4a23      	ldr	r2, [pc, #140]	; (804d0 <pvPortMalloc+0xbc>)
   80444:	6813      	ldr	r3, [r2, #0]
   80446:	3b10      	subs	r3, #16
   80448:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   8044a:	2c00      	cmp	r4, #0
   8044c:	d02e      	beq.n	804ac <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   8044e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80452:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80456:	bf1c      	itt	ne
   80458:	f022 0207 	bicne.w	r2, r2, #7
   8045c:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8045e:	1e51      	subs	r1, r2, #1
   80460:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80464:	4299      	cmp	r1, r3
   80466:	d823      	bhi.n	804b0 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80468:	4917      	ldr	r1, [pc, #92]	; (804c8 <pvPortMalloc+0xb4>)
   8046a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8046c:	e001      	b.n	80472 <pvPortMalloc+0x5e>
   8046e:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80470:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80472:	6863      	ldr	r3, [r4, #4]
   80474:	429a      	cmp	r2, r3
   80476:	d902      	bls.n	8047e <pvPortMalloc+0x6a>
   80478:	6823      	ldr	r3, [r4, #0]
   8047a:	2b00      	cmp	r3, #0
   8047c:	d1f7      	bne.n	8046e <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   8047e:	4b11      	ldr	r3, [pc, #68]	; (804c4 <pvPortMalloc+0xb0>)
   80480:	681b      	ldr	r3, [r3, #0]
   80482:	429c      	cmp	r4, r3
   80484:	d016      	beq.n	804b4 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80486:	680d      	ldr	r5, [r1, #0]
   80488:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8048a:	6823      	ldr	r3, [r4, #0]
   8048c:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8048e:	6863      	ldr	r3, [r4, #4]
   80490:	1a9b      	subs	r3, r3, r2
   80492:	2b20      	cmp	r3, #32
   80494:	d904      	bls.n	804a0 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80496:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80498:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   8049a:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   8049c:	4b0d      	ldr	r3, [pc, #52]	; (804d4 <pvPortMalloc+0xc0>)
   8049e:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   804a0:	4a0b      	ldr	r2, [pc, #44]	; (804d0 <pvPortMalloc+0xbc>)
   804a2:	6813      	ldr	r3, [r2, #0]
   804a4:	6861      	ldr	r1, [r4, #4]
   804a6:	1a5b      	subs	r3, r3, r1
   804a8:	6013      	str	r3, [r2, #0]
   804aa:	e004      	b.n	804b6 <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   804ac:	2500      	movs	r5, #0
   804ae:	e002      	b.n	804b6 <pvPortMalloc+0xa2>
   804b0:	2500      	movs	r5, #0
   804b2:	e000      	b.n	804b6 <pvPortMalloc+0xa2>
   804b4:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   804b6:	4b08      	ldr	r3, [pc, #32]	; (804d8 <pvPortMalloc+0xc4>)
   804b8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   804ba:	4628      	mov	r0, r5
   804bc:	bd38      	pop	{r3, r4, r5, pc}
   804be:	bf00      	nop
   804c0:	00080d21 	.word	0x00080d21
   804c4:	2007a9d0 	.word	0x2007a9d0
   804c8:	2007a9d4 	.word	0x2007a9d4
   804cc:	200709d0 	.word	0x200709d0
   804d0:	20070130 	.word	0x20070130
   804d4:	000803bd 	.word	0x000803bd
   804d8:	00080e71 	.word	0x00080e71

000804dc <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   804dc:	b180      	cbz	r0, 80500 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   804de:	b510      	push	{r4, lr}
   804e0:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   804e2:	4b08      	ldr	r3, [pc, #32]	; (80504 <vPortFree+0x28>)
   804e4:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   804e6:	4a08      	ldr	r2, [pc, #32]	; (80508 <vPortFree+0x2c>)
   804e8:	6811      	ldr	r1, [r2, #0]
   804ea:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   804ee:	440b      	add	r3, r1
   804f0:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   804f2:	f1a4 0010 	sub.w	r0, r4, #16
   804f6:	4b05      	ldr	r3, [pc, #20]	; (8050c <vPortFree+0x30>)
   804f8:	4798      	blx	r3
		}
		xTaskResumeAll();
   804fa:	4b05      	ldr	r3, [pc, #20]	; (80510 <vPortFree+0x34>)
   804fc:	4798      	blx	r3
   804fe:	bd10      	pop	{r4, pc}
   80500:	4770      	bx	lr
   80502:	bf00      	nop
   80504:	00080d21 	.word	0x00080d21
   80508:	20070130 	.word	0x20070130
   8050c:	000803bd 	.word	0x000803bd
   80510:	00080e71 	.word	0x00080e71

00080514 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80514:	b510      	push	{r4, lr}
   80516:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80518:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8051a:	b93b      	cbnz	r3, 8052c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8051c:	6803      	ldr	r3, [r0, #0]
   8051e:	bb1b      	cbnz	r3, 80568 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80520:	6840      	ldr	r0, [r0, #4]
   80522:	4b13      	ldr	r3, [pc, #76]	; (80570 <prvCopyDataToQueue+0x5c>)
   80524:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80526:	2300      	movs	r3, #0
   80528:	6063      	str	r3, [r4, #4]
   8052a:	e01d      	b.n	80568 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   8052c:	b96a      	cbnz	r2, 8054a <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8052e:	6880      	ldr	r0, [r0, #8]
   80530:	461a      	mov	r2, r3
   80532:	4b10      	ldr	r3, [pc, #64]	; (80574 <prvCopyDataToQueue+0x60>)
   80534:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80536:	68a2      	ldr	r2, [r4, #8]
   80538:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8053a:	4413      	add	r3, r2
   8053c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   8053e:	6862      	ldr	r2, [r4, #4]
   80540:	4293      	cmp	r3, r2
   80542:	d311      	bcc.n	80568 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80544:	6823      	ldr	r3, [r4, #0]
   80546:	60a3      	str	r3, [r4, #8]
   80548:	e00e      	b.n	80568 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8054a:	68c0      	ldr	r0, [r0, #12]
   8054c:	461a      	mov	r2, r3
   8054e:	4b09      	ldr	r3, [pc, #36]	; (80574 <prvCopyDataToQueue+0x60>)
   80550:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80552:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80554:	425b      	negs	r3, r3
   80556:	68e2      	ldr	r2, [r4, #12]
   80558:	441a      	add	r2, r3
   8055a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   8055c:	6821      	ldr	r1, [r4, #0]
   8055e:	428a      	cmp	r2, r1
   80560:	d202      	bcs.n	80568 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80562:	6862      	ldr	r2, [r4, #4]
   80564:	4413      	add	r3, r2
   80566:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8056a:	3301      	adds	r3, #1
   8056c:	63a3      	str	r3, [r4, #56]	; 0x38
   8056e:	bd10      	pop	{r4, pc}
   80570:	000813b9 	.word	0x000813b9
   80574:	000823fd 	.word	0x000823fd

00080578 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80578:	b538      	push	{r3, r4, r5, lr}
   8057a:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   8057c:	6800      	ldr	r0, [r0, #0]
   8057e:	b158      	cbz	r0, 80598 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80582:	68dc      	ldr	r4, [r3, #12]
   80584:	4414      	add	r4, r2
   80586:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80588:	685d      	ldr	r5, [r3, #4]
   8058a:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   8058c:	bf28      	it	cs
   8058e:	60d8      	strcs	r0, [r3, #12]
   80590:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80592:	68d9      	ldr	r1, [r3, #12]
   80594:	4b01      	ldr	r3, [pc, #4]	; (8059c <prvCopyDataFromQueue+0x24>)
   80596:	4798      	blx	r3
   80598:	bd38      	pop	{r3, r4, r5, pc}
   8059a:	bf00      	nop
   8059c:	000823fd 	.word	0x000823fd

000805a0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   805a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805a2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   805a4:	4b1e      	ldr	r3, [pc, #120]	; (80620 <prvUnlockQueue+0x80>)
   805a6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805aa:	2b00      	cmp	r3, #0
   805ac:	dd13      	ble.n	805d6 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   805ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805b0:	b91b      	cbnz	r3, 805ba <prvUnlockQueue+0x1a>
   805b2:	e010      	b.n	805d6 <prvUnlockQueue+0x36>
   805b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805b6:	b923      	cbnz	r3, 805c2 <prvUnlockQueue+0x22>
   805b8:	e00d      	b.n	805d6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805ba:	f104 0624 	add.w	r6, r4, #36	; 0x24
   805be:	4d19      	ldr	r5, [pc, #100]	; (80624 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805c0:	4f19      	ldr	r7, [pc, #100]	; (80628 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805c2:	4630      	mov	r0, r6
   805c4:	47a8      	blx	r5
   805c6:	b100      	cbz	r0, 805ca <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805c8:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   805ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805cc:	3b01      	subs	r3, #1
   805ce:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805d2:	2b00      	cmp	r3, #0
   805d4:	dcee      	bgt.n	805b4 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   805d6:	f04f 33ff 	mov.w	r3, #4294967295
   805da:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   805dc:	4b13      	ldr	r3, [pc, #76]	; (8062c <prvUnlockQueue+0x8c>)
   805de:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   805e0:	4b0f      	ldr	r3, [pc, #60]	; (80620 <prvUnlockQueue+0x80>)
   805e2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   805e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   805e6:	2b00      	cmp	r3, #0
   805e8:	dd13      	ble.n	80612 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   805ea:	6923      	ldr	r3, [r4, #16]
   805ec:	b91b      	cbnz	r3, 805f6 <prvUnlockQueue+0x56>
   805ee:	e010      	b.n	80612 <prvUnlockQueue+0x72>
   805f0:	6923      	ldr	r3, [r4, #16]
   805f2:	b923      	cbnz	r3, 805fe <prvUnlockQueue+0x5e>
   805f4:	e00d      	b.n	80612 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   805f6:	f104 0610 	add.w	r6, r4, #16
   805fa:	4d0a      	ldr	r5, [pc, #40]	; (80624 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   805fc:	4f0a      	ldr	r7, [pc, #40]	; (80628 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   805fe:	4630      	mov	r0, r6
   80600:	47a8      	blx	r5
   80602:	b100      	cbz	r0, 80606 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   80604:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80606:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80608:	3b01      	subs	r3, #1
   8060a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8060c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8060e:	2b00      	cmp	r3, #0
   80610:	dcee      	bgt.n	805f0 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80612:	f04f 33ff 	mov.w	r3, #4294967295
   80616:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80618:	4b04      	ldr	r3, [pc, #16]	; (8062c <prvUnlockQueue+0x8c>)
   8061a:	4798      	blx	r3
   8061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8061e:	bf00      	nop
   80620:	000802c9 	.word	0x000802c9
   80624:	000811d1 	.word	0x000811d1
   80628:	00081301 	.word	0x00081301
   8062c:	000802e9 	.word	0x000802e9

00080630 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80630:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80632:	b918      	cbnz	r0, 8063c <xQueueGenericReset+0xc>
   80634:	4b17      	ldr	r3, [pc, #92]	; (80694 <xQueueGenericReset+0x64>)
   80636:	4798      	blx	r3
   80638:	bf00      	nop
   8063a:	e7fd      	b.n	80638 <xQueueGenericReset+0x8>
   8063c:	460d      	mov	r5, r1
   8063e:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80640:	4b15      	ldr	r3, [pc, #84]	; (80698 <xQueueGenericReset+0x68>)
   80642:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80644:	6822      	ldr	r2, [r4, #0]
   80646:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8064a:	fb03 f301 	mul.w	r3, r3, r1
   8064e:	18d0      	adds	r0, r2, r3
   80650:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80652:	2000      	movs	r0, #0
   80654:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80656:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80658:	1a5b      	subs	r3, r3, r1
   8065a:	4413      	add	r3, r2
   8065c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8065e:	f04f 33ff 	mov.w	r3, #4294967295
   80662:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80664:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80666:	b955      	cbnz	r5, 8067e <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80668:	6923      	ldr	r3, [r4, #16]
   8066a:	b17b      	cbz	r3, 8068c <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8066c:	f104 0010 	add.w	r0, r4, #16
   80670:	4b0a      	ldr	r3, [pc, #40]	; (8069c <xQueueGenericReset+0x6c>)
   80672:	4798      	blx	r3
   80674:	2801      	cmp	r0, #1
   80676:	d109      	bne.n	8068c <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80678:	4b09      	ldr	r3, [pc, #36]	; (806a0 <xQueueGenericReset+0x70>)
   8067a:	4798      	blx	r3
   8067c:	e006      	b.n	8068c <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8067e:	f104 0010 	add.w	r0, r4, #16
   80682:	4d08      	ldr	r5, [pc, #32]	; (806a4 <xQueueGenericReset+0x74>)
   80684:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80686:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8068a:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   8068c:	4b06      	ldr	r3, [pc, #24]	; (806a8 <xQueueGenericReset+0x78>)
   8068e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80690:	2001      	movs	r0, #1
   80692:	bd38      	pop	{r3, r4, r5, pc}
   80694:	000802b9 	.word	0x000802b9
   80698:	000802c9 	.word	0x000802c9
   8069c:	000811d1 	.word	0x000811d1
   806a0:	000802a9 	.word	0x000802a9
   806a4:	000801b9 	.word	0x000801b9
   806a8:	000802e9 	.word	0x000802e9

000806ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   806ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   806ae:	b1a0      	cbz	r0, 806da <xQueueGenericCreate+0x2e>
   806b0:	460d      	mov	r5, r1
   806b2:	4617      	mov	r7, r2
   806b4:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   806b6:	2050      	movs	r0, #80	; 0x50
   806b8:	4b0e      	ldr	r3, [pc, #56]	; (806f4 <xQueueGenericCreate+0x48>)
   806ba:	4798      	blx	r3
		if( pxNewQueue != NULL )
   806bc:	4604      	mov	r4, r0
   806be:	b160      	cbz	r0, 806da <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   806c0:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   806c4:	3001      	adds	r0, #1
   806c6:	4b0b      	ldr	r3, [pc, #44]	; (806f4 <xQueueGenericCreate+0x48>)
   806c8:	4798      	blx	r3
   806ca:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   806cc:	b940      	cbnz	r0, 806e0 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   806ce:	4620      	mov	r0, r4
   806d0:	4b09      	ldr	r3, [pc, #36]	; (806f8 <xQueueGenericCreate+0x4c>)
   806d2:	4798      	blx	r3
   806d4:	e001      	b.n	806da <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   806d6:	bf00      	nop
   806d8:	e7fd      	b.n	806d6 <xQueueGenericCreate+0x2a>
   806da:	4b08      	ldr	r3, [pc, #32]	; (806fc <xQueueGenericCreate+0x50>)
   806dc:	4798      	blx	r3
   806de:	e7fa      	b.n	806d6 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   806e0:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   806e2:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   806e4:	4620      	mov	r0, r4
   806e6:	2101      	movs	r1, #1
   806e8:	4b05      	ldr	r3, [pc, #20]	; (80700 <xQueueGenericCreate+0x54>)
   806ea:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   806ec:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   806f0:	4620      	mov	r0, r4
   806f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806f4:	00080415 	.word	0x00080415
   806f8:	000804dd 	.word	0x000804dd
   806fc:	000802b9 	.word	0x000802b9
   80700:	00080631 	.word	0x00080631

00080704 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80708:	b085      	sub	sp, #20
   8070a:	9201      	str	r2, [sp, #4]
   8070c:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8070e:	b918      	cbnz	r0, 80718 <xQueueGenericSend+0x14>
   80710:	4b38      	ldr	r3, [pc, #224]	; (807f4 <xQueueGenericSend+0xf0>)
   80712:	4798      	blx	r3
   80714:	bf00      	nop
   80716:	e7fd      	b.n	80714 <xQueueGenericSend+0x10>
   80718:	468a      	mov	sl, r1
   8071a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8071c:	b929      	cbnz	r1, 8072a <xQueueGenericSend+0x26>
   8071e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80720:	b12b      	cbz	r3, 8072e <xQueueGenericSend+0x2a>
   80722:	4b34      	ldr	r3, [pc, #208]	; (807f4 <xQueueGenericSend+0xf0>)
   80724:	4798      	blx	r3
   80726:	bf00      	nop
   80728:	e7fd      	b.n	80726 <xQueueGenericSend+0x22>
   8072a:	2700      	movs	r7, #0
   8072c:	e000      	b.n	80730 <xQueueGenericSend+0x2c>
   8072e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80730:	4e31      	ldr	r6, [pc, #196]	; (807f8 <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80732:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80820 <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80736:	4d31      	ldr	r5, [pc, #196]	; (807fc <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80738:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8073a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8073c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8073e:	429a      	cmp	r2, r3
   80740:	d212      	bcs.n	80768 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80742:	4620      	mov	r0, r4
   80744:	4651      	mov	r1, sl
   80746:	9a00      	ldr	r2, [sp, #0]
   80748:	4b2d      	ldr	r3, [pc, #180]	; (80800 <xQueueGenericSend+0xfc>)
   8074a:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8074c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8074e:	b13b      	cbz	r3, 80760 <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80750:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80754:	4b2b      	ldr	r3, [pc, #172]	; (80804 <xQueueGenericSend+0x100>)
   80756:	4798      	blx	r3
   80758:	2801      	cmp	r0, #1
   8075a:	d101      	bne.n	80760 <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   8075c:	4b2a      	ldr	r3, [pc, #168]	; (80808 <xQueueGenericSend+0x104>)
   8075e:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80760:	4b26      	ldr	r3, [pc, #152]	; (807fc <xQueueGenericSend+0xf8>)
   80762:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80764:	2001      	movs	r0, #1
   80766:	e042      	b.n	807ee <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80768:	9b01      	ldr	r3, [sp, #4]
   8076a:	b91b      	cbnz	r3, 80774 <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8076c:	4b23      	ldr	r3, [pc, #140]	; (807fc <xQueueGenericSend+0xf8>)
   8076e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80770:	2000      	movs	r0, #0
   80772:	e03c      	b.n	807ee <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
   80774:	b917      	cbnz	r7, 8077c <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80776:	a802      	add	r0, sp, #8
   80778:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   8077a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8077c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8077e:	4b23      	ldr	r3, [pc, #140]	; (8080c <xQueueGenericSend+0x108>)
   80780:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80782:	47b0      	blx	r6
   80784:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80786:	f1b3 3fff 	cmp.w	r3, #4294967295
   8078a:	bf04      	itt	eq
   8078c:	2300      	moveq	r3, #0
   8078e:	6463      	streq	r3, [r4, #68]	; 0x44
   80790:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80792:	f1b3 3fff 	cmp.w	r3, #4294967295
   80796:	bf04      	itt	eq
   80798:	2300      	moveq	r3, #0
   8079a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8079c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8079e:	a802      	add	r0, sp, #8
   807a0:	a901      	add	r1, sp, #4
   807a2:	4b1b      	ldr	r3, [pc, #108]	; (80810 <xQueueGenericSend+0x10c>)
   807a4:	4798      	blx	r3
   807a6:	b9e0      	cbnz	r0, 807e2 <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   807a8:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   807aa:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   807ae:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   807b2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   807b4:	45c1      	cmp	r9, r8
   807b6:	d10e      	bne.n	807d6 <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   807b8:	f104 0010 	add.w	r0, r4, #16
   807bc:	9901      	ldr	r1, [sp, #4]
   807be:	4b15      	ldr	r3, [pc, #84]	; (80814 <xQueueGenericSend+0x110>)
   807c0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   807c2:	4620      	mov	r0, r4
   807c4:	4b14      	ldr	r3, [pc, #80]	; (80818 <xQueueGenericSend+0x114>)
   807c6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   807c8:	4b14      	ldr	r3, [pc, #80]	; (8081c <xQueueGenericSend+0x118>)
   807ca:	4798      	blx	r3
   807cc:	2800      	cmp	r0, #0
   807ce:	d1b3      	bne.n	80738 <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
   807d0:	4b0d      	ldr	r3, [pc, #52]	; (80808 <xQueueGenericSend+0x104>)
   807d2:	4798      	blx	r3
   807d4:	e7b0      	b.n	80738 <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   807d6:	4620      	mov	r0, r4
   807d8:	4b0f      	ldr	r3, [pc, #60]	; (80818 <xQueueGenericSend+0x114>)
   807da:	4798      	blx	r3
				( void ) xTaskResumeAll();
   807dc:	4b0f      	ldr	r3, [pc, #60]	; (8081c <xQueueGenericSend+0x118>)
   807de:	4798      	blx	r3
   807e0:	e7aa      	b.n	80738 <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   807e2:	4620      	mov	r0, r4
   807e4:	4b0c      	ldr	r3, [pc, #48]	; (80818 <xQueueGenericSend+0x114>)
   807e6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   807e8:	4b0c      	ldr	r3, [pc, #48]	; (8081c <xQueueGenericSend+0x118>)
   807ea:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   807ec:	2000      	movs	r0, #0
		}
	}
}
   807ee:	b005      	add	sp, #20
   807f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807f4:	000802b9 	.word	0x000802b9
   807f8:	000802c9 	.word	0x000802c9
   807fc:	000802e9 	.word	0x000802e9
   80800:	00080515 	.word	0x00080515
   80804:	000811d1 	.word	0x000811d1
   80808:	000802a9 	.word	0x000802a9
   8080c:	00080d21 	.word	0x00080d21
   80810:	0008127d 	.word	0x0008127d
   80814:	0008112d 	.word	0x0008112d
   80818:	000805a1 	.word	0x000805a1
   8081c:	00080e71 	.word	0x00080e71
   80820:	00081255 	.word	0x00081255

00080824 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80828:	b918      	cbnz	r0, 80832 <xQueueGenericSendFromISR+0xe>
   8082a:	4b1e      	ldr	r3, [pc, #120]	; (808a4 <xQueueGenericSendFromISR+0x80>)
   8082c:	4798      	blx	r3
   8082e:	bf00      	nop
   80830:	e7fd      	b.n	8082e <xQueueGenericSendFromISR+0xa>
   80832:	460e      	mov	r6, r1
   80834:	4615      	mov	r5, r2
   80836:	4698      	mov	r8, r3
   80838:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8083a:	b929      	cbnz	r1, 80848 <xQueueGenericSendFromISR+0x24>
   8083c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8083e:	b11b      	cbz	r3, 80848 <xQueueGenericSendFromISR+0x24>
   80840:	4b18      	ldr	r3, [pc, #96]	; (808a4 <xQueueGenericSendFromISR+0x80>)
   80842:	4798      	blx	r3
   80844:	bf00      	nop
   80846:	e7fd      	b.n	80844 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80848:	4b16      	ldr	r3, [pc, #88]	; (808a4 <xQueueGenericSendFromISR+0x80>)
   8084a:	4798      	blx	r3
   8084c:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8084e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80850:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80852:	429a      	cmp	r2, r3
   80854:	d218      	bcs.n	80888 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80856:	4620      	mov	r0, r4
   80858:	4631      	mov	r1, r6
   8085a:	4642      	mov	r2, r8
   8085c:	4b12      	ldr	r3, [pc, #72]	; (808a8 <xQueueGenericSendFromISR+0x84>)
   8085e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80860:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80862:	f1b3 3fff 	cmp.w	r3, #4294967295
   80866:	d10a      	bne.n	8087e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80868:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8086a:	b17b      	cbz	r3, 8088c <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8086c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80870:	4b0e      	ldr	r3, [pc, #56]	; (808ac <xQueueGenericSendFromISR+0x88>)
   80872:	4798      	blx	r3
   80874:	b160      	cbz	r0, 80890 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80876:	b16d      	cbz	r5, 80894 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80878:	2401      	movs	r4, #1
   8087a:	602c      	str	r4, [r5, #0]
   8087c:	e00b      	b.n	80896 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8087e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80880:	3301      	adds	r3, #1
   80882:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80884:	2401      	movs	r4, #1
   80886:	e006      	b.n	80896 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80888:	2400      	movs	r4, #0
   8088a:	e004      	b.n	80896 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   8088c:	2401      	movs	r4, #1
   8088e:	e002      	b.n	80896 <xQueueGenericSendFromISR+0x72>
   80890:	2401      	movs	r4, #1
   80892:	e000      	b.n	80896 <xQueueGenericSendFromISR+0x72>
   80894:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80896:	4638      	mov	r0, r7
   80898:	4b05      	ldr	r3, [pc, #20]	; (808b0 <xQueueGenericSendFromISR+0x8c>)
   8089a:	4798      	blx	r3

	return xReturn;
}
   8089c:	4620      	mov	r0, r4
   8089e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   808a2:	bf00      	nop
   808a4:	000802b9 	.word	0x000802b9
   808a8:	00080515 	.word	0x00080515
   808ac:	000811d1 	.word	0x000811d1
   808b0:	000802e1 	.word	0x000802e1

000808b4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   808b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   808b8:	b085      	sub	sp, #20
   808ba:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   808bc:	b918      	cbnz	r0, 808c6 <xQueueGenericReceive+0x12>
   808be:	4b46      	ldr	r3, [pc, #280]	; (809d8 <xQueueGenericReceive+0x124>)
   808c0:	4798      	blx	r3
   808c2:	bf00      	nop
   808c4:	e7fd      	b.n	808c2 <xQueueGenericReceive+0xe>
   808c6:	4689      	mov	r9, r1
   808c8:	469a      	mov	sl, r3
   808ca:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   808cc:	b929      	cbnz	r1, 808da <xQueueGenericReceive+0x26>
   808ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
   808d0:	b12b      	cbz	r3, 808de <xQueueGenericReceive+0x2a>
   808d2:	4b41      	ldr	r3, [pc, #260]	; (809d8 <xQueueGenericReceive+0x124>)
   808d4:	4798      	blx	r3
   808d6:	bf00      	nop
   808d8:	e7fd      	b.n	808d6 <xQueueGenericReceive+0x22>
   808da:	2700      	movs	r7, #0
   808dc:	e000      	b.n	808e0 <xQueueGenericReceive+0x2c>
   808de:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   808e0:	4e3e      	ldr	r6, [pc, #248]	; (809dc <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   808e2:	f8df b128 	ldr.w	fp, [pc, #296]	; 80a0c <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   808e6:	4d3e      	ldr	r5, [pc, #248]	; (809e0 <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   808e8:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   808ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   808ec:	b343      	cbz	r3, 80940 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   808ee:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   808f0:	4620      	mov	r0, r4
   808f2:	4649      	mov	r1, r9
   808f4:	4b3b      	ldr	r3, [pc, #236]	; (809e4 <xQueueGenericReceive+0x130>)
   808f6:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   808f8:	f1ba 0f00 	cmp.w	sl, #0
   808fc:	d112      	bne.n	80924 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   808fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80900:	3b01      	subs	r3, #1
   80902:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80904:	6823      	ldr	r3, [r4, #0]
   80906:	b913      	cbnz	r3, 8090e <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80908:	4b37      	ldr	r3, [pc, #220]	; (809e8 <xQueueGenericReceive+0x134>)
   8090a:	4798      	blx	r3
   8090c:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8090e:	6923      	ldr	r3, [r4, #16]
   80910:	b193      	cbz	r3, 80938 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80912:	f104 0010 	add.w	r0, r4, #16
   80916:	4b35      	ldr	r3, [pc, #212]	; (809ec <xQueueGenericReceive+0x138>)
   80918:	4798      	blx	r3
   8091a:	2801      	cmp	r0, #1
   8091c:	d10c      	bne.n	80938 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   8091e:	4b34      	ldr	r3, [pc, #208]	; (809f0 <xQueueGenericReceive+0x13c>)
   80920:	4798      	blx	r3
   80922:	e009      	b.n	80938 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80924:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80926:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80928:	b133      	cbz	r3, 80938 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8092a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8092e:	4b2f      	ldr	r3, [pc, #188]	; (809ec <xQueueGenericReceive+0x138>)
   80930:	4798      	blx	r3
   80932:	b108      	cbz	r0, 80938 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80934:	4b2e      	ldr	r3, [pc, #184]	; (809f0 <xQueueGenericReceive+0x13c>)
   80936:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80938:	4b29      	ldr	r3, [pc, #164]	; (809e0 <xQueueGenericReceive+0x12c>)
   8093a:	4798      	blx	r3
				return pdPASS;
   8093c:	2001      	movs	r0, #1
   8093e:	e048      	b.n	809d2 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80940:	9b01      	ldr	r3, [sp, #4]
   80942:	b91b      	cbnz	r3, 8094c <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80944:	4b26      	ldr	r3, [pc, #152]	; (809e0 <xQueueGenericReceive+0x12c>)
   80946:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80948:	2000      	movs	r0, #0
   8094a:	e042      	b.n	809d2 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   8094c:	b917      	cbnz	r7, 80954 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8094e:	a802      	add	r0, sp, #8
   80950:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80952:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80954:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80956:	4b27      	ldr	r3, [pc, #156]	; (809f4 <xQueueGenericReceive+0x140>)
   80958:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8095a:	47b0      	blx	r6
   8095c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8095e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80962:	bf04      	itt	eq
   80964:	2300      	moveq	r3, #0
   80966:	6463      	streq	r3, [r4, #68]	; 0x44
   80968:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8096a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8096e:	bf04      	itt	eq
   80970:	2300      	moveq	r3, #0
   80972:	64a3      	streq	r3, [r4, #72]	; 0x48
   80974:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80976:	a802      	add	r0, sp, #8
   80978:	a901      	add	r1, sp, #4
   8097a:	4b1f      	ldr	r3, [pc, #124]	; (809f8 <xQueueGenericReceive+0x144>)
   8097c:	4798      	blx	r3
   8097e:	bb10      	cbnz	r0, 809c6 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80980:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80982:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80986:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80988:	f1b8 0f00 	cmp.w	r8, #0
   8098c:	d115      	bne.n	809ba <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8098e:	6823      	ldr	r3, [r4, #0]
   80990:	b923      	cbnz	r3, 8099c <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   80992:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80994:	6860      	ldr	r0, [r4, #4]
   80996:	4b19      	ldr	r3, [pc, #100]	; (809fc <xQueueGenericReceive+0x148>)
   80998:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   8099a:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8099c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   809a0:	9901      	ldr	r1, [sp, #4]
   809a2:	4b17      	ldr	r3, [pc, #92]	; (80a00 <xQueueGenericReceive+0x14c>)
   809a4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   809a6:	4620      	mov	r0, r4
   809a8:	4b16      	ldr	r3, [pc, #88]	; (80a04 <xQueueGenericReceive+0x150>)
   809aa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   809ac:	4b16      	ldr	r3, [pc, #88]	; (80a08 <xQueueGenericReceive+0x154>)
   809ae:	4798      	blx	r3
   809b0:	2800      	cmp	r0, #0
   809b2:	d199      	bne.n	808e8 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   809b4:	4b0e      	ldr	r3, [pc, #56]	; (809f0 <xQueueGenericReceive+0x13c>)
   809b6:	4798      	blx	r3
   809b8:	e796      	b.n	808e8 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   809ba:	4620      	mov	r0, r4
   809bc:	4b11      	ldr	r3, [pc, #68]	; (80a04 <xQueueGenericReceive+0x150>)
   809be:	4798      	blx	r3
				( void ) xTaskResumeAll();
   809c0:	4b11      	ldr	r3, [pc, #68]	; (80a08 <xQueueGenericReceive+0x154>)
   809c2:	4798      	blx	r3
   809c4:	e790      	b.n	808e8 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   809c6:	4620      	mov	r0, r4
   809c8:	4b0e      	ldr	r3, [pc, #56]	; (80a04 <xQueueGenericReceive+0x150>)
   809ca:	4798      	blx	r3
			( void ) xTaskResumeAll();
   809cc:	4b0e      	ldr	r3, [pc, #56]	; (80a08 <xQueueGenericReceive+0x154>)
   809ce:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   809d0:	2000      	movs	r0, #0
		}
	}
}
   809d2:	b005      	add	sp, #20
   809d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   809d8:	000802b9 	.word	0x000802b9
   809dc:	000802c9 	.word	0x000802c9
   809e0:	000802e9 	.word	0x000802e9
   809e4:	00080579 	.word	0x00080579
   809e8:	0008130d 	.word	0x0008130d
   809ec:	000811d1 	.word	0x000811d1
   809f0:	000802a9 	.word	0x000802a9
   809f4:	00080d21 	.word	0x00080d21
   809f8:	0008127d 	.word	0x0008127d
   809fc:	00081339 	.word	0x00081339
   80a00:	0008112d 	.word	0x0008112d
   80a04:	000805a1 	.word	0x000805a1
   80a08:	00080e71 	.word	0x00080e71
   80a0c:	00081255 	.word	0x00081255

00080a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80a10:	b538      	push	{r3, r4, r5, lr}
   80a12:	4604      	mov	r4, r0
   80a14:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80a16:	4b0d      	ldr	r3, [pc, #52]	; (80a4c <vQueueWaitForMessageRestricted+0x3c>)
   80a18:	4798      	blx	r3
   80a1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a20:	bf04      	itt	eq
   80a22:	2300      	moveq	r3, #0
   80a24:	6463      	streq	r3, [r4, #68]	; 0x44
   80a26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a28:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a2c:	bf04      	itt	eq
   80a2e:	2300      	moveq	r3, #0
   80a30:	64a3      	streq	r3, [r4, #72]	; 0x48
   80a32:	4b07      	ldr	r3, [pc, #28]	; (80a50 <vQueueWaitForMessageRestricted+0x40>)
   80a34:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80a38:	b923      	cbnz	r3, 80a44 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80a3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a3e:	4629      	mov	r1, r5
   80a40:	4b04      	ldr	r3, [pc, #16]	; (80a54 <vQueueWaitForMessageRestricted+0x44>)
   80a42:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80a44:	4620      	mov	r0, r4
   80a46:	4b04      	ldr	r3, [pc, #16]	; (80a58 <vQueueWaitForMessageRestricted+0x48>)
   80a48:	4798      	blx	r3
   80a4a:	bd38      	pop	{r3, r4, r5, pc}
   80a4c:	000802c9 	.word	0x000802c9
   80a50:	000802e9 	.word	0x000802e9
   80a54:	0008118d 	.word	0x0008118d
   80a58:	000805a1 	.word	0x000805a1

00080a5c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80a5c:	b510      	push	{r4, lr}
   80a5e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80a60:	4b0e      	ldr	r3, [pc, #56]	; (80a9c <prvAddCurrentTaskToDelayedList+0x40>)
   80a62:	681b      	ldr	r3, [r3, #0]
   80a64:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80a66:	4b0e      	ldr	r3, [pc, #56]	; (80aa0 <prvAddCurrentTaskToDelayedList+0x44>)
   80a68:	681b      	ldr	r3, [r3, #0]
   80a6a:	4298      	cmp	r0, r3
   80a6c:	d207      	bcs.n	80a7e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80a6e:	4b0d      	ldr	r3, [pc, #52]	; (80aa4 <prvAddCurrentTaskToDelayedList+0x48>)
   80a70:	6818      	ldr	r0, [r3, #0]
   80a72:	4b0a      	ldr	r3, [pc, #40]	; (80a9c <prvAddCurrentTaskToDelayedList+0x40>)
   80a74:	6819      	ldr	r1, [r3, #0]
   80a76:	3104      	adds	r1, #4
   80a78:	4b0b      	ldr	r3, [pc, #44]	; (80aa8 <prvAddCurrentTaskToDelayedList+0x4c>)
   80a7a:	4798      	blx	r3
   80a7c:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80a7e:	4b0b      	ldr	r3, [pc, #44]	; (80aac <prvAddCurrentTaskToDelayedList+0x50>)
   80a80:	6818      	ldr	r0, [r3, #0]
   80a82:	4b06      	ldr	r3, [pc, #24]	; (80a9c <prvAddCurrentTaskToDelayedList+0x40>)
   80a84:	6819      	ldr	r1, [r3, #0]
   80a86:	3104      	adds	r1, #4
   80a88:	4b07      	ldr	r3, [pc, #28]	; (80aa8 <prvAddCurrentTaskToDelayedList+0x4c>)
   80a8a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80a8c:	4b08      	ldr	r3, [pc, #32]	; (80ab0 <prvAddCurrentTaskToDelayedList+0x54>)
   80a8e:	681b      	ldr	r3, [r3, #0]
   80a90:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80a92:	bf3c      	itt	cc
   80a94:	4b06      	ldrcc	r3, [pc, #24]	; (80ab0 <prvAddCurrentTaskToDelayedList+0x54>)
   80a96:	601c      	strcc	r4, [r3, #0]
   80a98:	bd10      	pop	{r4, pc}
   80a9a:	bf00      	nop
   80a9c:	2007aaa8 	.word	0x2007aaa8
   80aa0:	2007aac4 	.word	0x2007aac4
   80aa4:	2007aac8 	.word	0x2007aac8
   80aa8:	000801f5 	.word	0x000801f5
   80aac:	2007a9f4 	.word	0x2007a9f4
   80ab0:	20070134 	.word	0x20070134

00080ab4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ab8:	b083      	sub	sp, #12
   80aba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   80abc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   80ac0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80ac2:	9001      	str	r0, [sp, #4]
   80ac4:	b918      	cbnz	r0, 80ace <xTaskGenericCreate+0x1a>
   80ac6:	4b62      	ldr	r3, [pc, #392]	; (80c50 <xTaskGenericCreate+0x19c>)
   80ac8:	4798      	blx	r3
   80aca:	bf00      	nop
   80acc:	e7fd      	b.n	80aca <xTaskGenericCreate+0x16>
   80ace:	4689      	mov	r9, r1
   80ad0:	4615      	mov	r5, r2
   80ad2:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80ad4:	2f04      	cmp	r7, #4
   80ad6:	d903      	bls.n	80ae0 <xTaskGenericCreate+0x2c>
   80ad8:	4b5d      	ldr	r3, [pc, #372]	; (80c50 <xTaskGenericCreate+0x19c>)
   80ada:	4798      	blx	r3
   80adc:	bf00      	nop
   80ade:	e7fd      	b.n	80adc <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80ae0:	204c      	movs	r0, #76	; 0x4c
   80ae2:	4b5c      	ldr	r3, [pc, #368]	; (80c54 <xTaskGenericCreate+0x1a0>)
   80ae4:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80ae6:	4604      	mov	r4, r0
   80ae8:	2800      	cmp	r0, #0
   80aea:	f000 80ab 	beq.w	80c44 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80aee:	2e00      	cmp	r6, #0
   80af0:	f040 80a5 	bne.w	80c3e <xTaskGenericCreate+0x18a>
   80af4:	00a8      	lsls	r0, r5, #2
   80af6:	4b57      	ldr	r3, [pc, #348]	; (80c54 <xTaskGenericCreate+0x1a0>)
   80af8:	4798      	blx	r3
   80afa:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80afc:	b918      	cbnz	r0, 80b06 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80afe:	4620      	mov	r0, r4
   80b00:	4b55      	ldr	r3, [pc, #340]	; (80c58 <xTaskGenericCreate+0x1a4>)
   80b02:	4798      	blx	r3
   80b04:	e09e      	b.n	80c44 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80b06:	21a5      	movs	r1, #165	; 0xa5
   80b08:	00aa      	lsls	r2, r5, #2
   80b0a:	4b54      	ldr	r3, [pc, #336]	; (80c5c <xTaskGenericCreate+0x1a8>)
   80b0c:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80b0e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80b12:	3d01      	subs	r5, #1
   80b14:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80b16:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80b1a:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80b1e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80b22:	4649      	mov	r1, r9
   80b24:	220a      	movs	r2, #10
   80b26:	4b4e      	ldr	r3, [pc, #312]	; (80c60 <xTaskGenericCreate+0x1ac>)
   80b28:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80b2a:	2300      	movs	r3, #0
   80b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   80b30:	463e      	mov	r6, r7
   80b32:	2f04      	cmp	r7, #4
   80b34:	bf28      	it	cs
   80b36:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80b38:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80b3a:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80b3c:	f104 0904 	add.w	r9, r4, #4
   80b40:	4648      	mov	r0, r9
   80b42:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80cb0 <xTaskGenericCreate+0x1fc>
   80b46:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80b48:	f104 0018 	add.w	r0, r4, #24
   80b4c:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80b4e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80b50:	f1c6 0605 	rsb	r6, r6, #5
   80b54:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80b56:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80b58:	4628      	mov	r0, r5
   80b5a:	9901      	ldr	r1, [sp, #4]
   80b5c:	465a      	mov	r2, fp
   80b5e:	4b41      	ldr	r3, [pc, #260]	; (80c64 <xTaskGenericCreate+0x1b0>)
   80b60:	4798      	blx	r3
   80b62:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80b64:	f010 0f07 	tst.w	r0, #7
   80b68:	d003      	beq.n	80b72 <xTaskGenericCreate+0xbe>
   80b6a:	4b39      	ldr	r3, [pc, #228]	; (80c50 <xTaskGenericCreate+0x19c>)
   80b6c:	4798      	blx	r3
   80b6e:	bf00      	nop
   80b70:	e7fd      	b.n	80b6e <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   80b72:	f1b8 0f00 	cmp.w	r8, #0
   80b76:	d001      	beq.n	80b7c <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80b78:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80b7c:	4b3a      	ldr	r3, [pc, #232]	; (80c68 <xTaskGenericCreate+0x1b4>)
   80b7e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80b80:	4a3a      	ldr	r2, [pc, #232]	; (80c6c <xTaskGenericCreate+0x1b8>)
   80b82:	6813      	ldr	r3, [r2, #0]
   80b84:	3301      	adds	r3, #1
   80b86:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80b88:	4b39      	ldr	r3, [pc, #228]	; (80c70 <xTaskGenericCreate+0x1bc>)
   80b8a:	681b      	ldr	r3, [r3, #0]
   80b8c:	bb0b      	cbnz	r3, 80bd2 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80b8e:	4b38      	ldr	r3, [pc, #224]	; (80c70 <xTaskGenericCreate+0x1bc>)
   80b90:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80b92:	6813      	ldr	r3, [r2, #0]
   80b94:	2b01      	cmp	r3, #1
   80b96:	d126      	bne.n	80be6 <xTaskGenericCreate+0x132>
   80b98:	4d36      	ldr	r5, [pc, #216]	; (80c74 <xTaskGenericCreate+0x1c0>)
   80b9a:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80b9e:	4e36      	ldr	r6, [pc, #216]	; (80c78 <xTaskGenericCreate+0x1c4>)
   80ba0:	4628      	mov	r0, r5
   80ba2:	47b0      	blx	r6
   80ba4:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80ba6:	4545      	cmp	r5, r8
   80ba8:	d1fa      	bne.n	80ba0 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80baa:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80cb4 <xTaskGenericCreate+0x200>
   80bae:	4640      	mov	r0, r8
   80bb0:	4d31      	ldr	r5, [pc, #196]	; (80c78 <xTaskGenericCreate+0x1c4>)
   80bb2:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80bb4:	4e31      	ldr	r6, [pc, #196]	; (80c7c <xTaskGenericCreate+0x1c8>)
   80bb6:	4630      	mov	r0, r6
   80bb8:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80bba:	4831      	ldr	r0, [pc, #196]	; (80c80 <xTaskGenericCreate+0x1cc>)
   80bbc:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80bbe:	4831      	ldr	r0, [pc, #196]	; (80c84 <xTaskGenericCreate+0x1d0>)
   80bc0:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80bc2:	4831      	ldr	r0, [pc, #196]	; (80c88 <xTaskGenericCreate+0x1d4>)
   80bc4:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   80bc6:	4b31      	ldr	r3, [pc, #196]	; (80c8c <xTaskGenericCreate+0x1d8>)
   80bc8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80bcc:	4b30      	ldr	r3, [pc, #192]	; (80c90 <xTaskGenericCreate+0x1dc>)
   80bce:	601e      	str	r6, [r3, #0]
   80bd0:	e009      	b.n	80be6 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   80bd2:	4b30      	ldr	r3, [pc, #192]	; (80c94 <xTaskGenericCreate+0x1e0>)
   80bd4:	681b      	ldr	r3, [r3, #0]
   80bd6:	b933      	cbnz	r3, 80be6 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80bd8:	4b25      	ldr	r3, [pc, #148]	; (80c70 <xTaskGenericCreate+0x1bc>)
   80bda:	681b      	ldr	r3, [r3, #0]
   80bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80bde:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   80be0:	bf24      	itt	cs
   80be2:	4b23      	ldrcs	r3, [pc, #140]	; (80c70 <xTaskGenericCreate+0x1bc>)
   80be4:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80be6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80be8:	4b2b      	ldr	r3, [pc, #172]	; (80c98 <xTaskGenericCreate+0x1e4>)
   80bea:	681b      	ldr	r3, [r3, #0]
   80bec:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80bee:	bf84      	itt	hi
   80bf0:	4b29      	ldrhi	r3, [pc, #164]	; (80c98 <xTaskGenericCreate+0x1e4>)
   80bf2:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80bf4:	4a29      	ldr	r2, [pc, #164]	; (80c9c <xTaskGenericCreate+0x1e8>)
   80bf6:	6813      	ldr	r3, [r2, #0]
   80bf8:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   80bfa:	3301      	adds	r3, #1
   80bfc:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   80bfe:	4b28      	ldr	r3, [pc, #160]	; (80ca0 <xTaskGenericCreate+0x1ec>)
   80c00:	681b      	ldr	r3, [r3, #0]
   80c02:	4298      	cmp	r0, r3
   80c04:	bf84      	itt	hi
   80c06:	4b26      	ldrhi	r3, [pc, #152]	; (80ca0 <xTaskGenericCreate+0x1ec>)
   80c08:	6018      	strhi	r0, [r3, #0]
   80c0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80c0e:	4b19      	ldr	r3, [pc, #100]	; (80c74 <xTaskGenericCreate+0x1c0>)
   80c10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80c14:	4649      	mov	r1, r9
   80c16:	4b23      	ldr	r3, [pc, #140]	; (80ca4 <xTaskGenericCreate+0x1f0>)
   80c18:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   80c1a:	4b23      	ldr	r3, [pc, #140]	; (80ca8 <xTaskGenericCreate+0x1f4>)
   80c1c:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   80c1e:	4b1d      	ldr	r3, [pc, #116]	; (80c94 <xTaskGenericCreate+0x1e0>)
   80c20:	681b      	ldr	r3, [r3, #0]
   80c22:	b143      	cbz	r3, 80c36 <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   80c24:	4b12      	ldr	r3, [pc, #72]	; (80c70 <xTaskGenericCreate+0x1bc>)
   80c26:	681b      	ldr	r3, [r3, #0]
   80c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80c2a:	429f      	cmp	r7, r3
   80c2c:	d905      	bls.n	80c3a <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   80c2e:	4b1f      	ldr	r3, [pc, #124]	; (80cac <xTaskGenericCreate+0x1f8>)
   80c30:	4798      	blx	r3
   80c32:	2001      	movs	r0, #1
   80c34:	e008      	b.n	80c48 <xTaskGenericCreate+0x194>
   80c36:	2001      	movs	r0, #1
   80c38:	e006      	b.n	80c48 <xTaskGenericCreate+0x194>
   80c3a:	2001      	movs	r0, #1
   80c3c:	e004      	b.n	80c48 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80c3e:	6306      	str	r6, [r0, #48]	; 0x30
   80c40:	4630      	mov	r0, r6
   80c42:	e760      	b.n	80b06 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80c44:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   80c48:	b003      	add	sp, #12
   80c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c4e:	bf00      	nop
   80c50:	000802b9 	.word	0x000802b9
   80c54:	00080415 	.word	0x00080415
   80c58:	000804dd 	.word	0x000804dd
   80c5c:	000824e9 	.word	0x000824e9
   80c60:	0008271d 	.word	0x0008271d
   80c64:	0008026d 	.word	0x0008026d
   80c68:	000802c9 	.word	0x000802c9
   80c6c:	2007aad0 	.word	0x2007aad0
   80c70:	2007aaa8 	.word	0x2007aaa8
   80c74:	2007aa2c 	.word	0x2007aa2c
   80c78:	000801b9 	.word	0x000801b9
   80c7c:	2007aa14 	.word	0x2007aa14
   80c80:	2007aaac 	.word	0x2007aaac
   80c84:	2007aa90 	.word	0x2007aa90
   80c88:	2007a9e0 	.word	0x2007a9e0
   80c8c:	2007a9f4 	.word	0x2007a9f4
   80c90:	2007aac8 	.word	0x2007aac8
   80c94:	2007a9f8 	.word	0x2007a9f8
   80c98:	2007aad8 	.word	0x2007aad8
   80c9c:	2007aacc 	.word	0x2007aacc
   80ca0:	2007aa28 	.word	0x2007aa28
   80ca4:	000801d9 	.word	0x000801d9
   80ca8:	000802e9 	.word	0x000802e9
   80cac:	000802a9 	.word	0x000802a9
   80cb0:	000801d1 	.word	0x000801d1
   80cb4:	2007aa00 	.word	0x2007aa00

00080cb8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   80cb8:	b510      	push	{r4, lr}
   80cba:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80cbc:	2300      	movs	r3, #0
   80cbe:	9300      	str	r3, [sp, #0]
   80cc0:	9301      	str	r3, [sp, #4]
   80cc2:	9302      	str	r3, [sp, #8]
   80cc4:	9303      	str	r3, [sp, #12]
   80cc6:	480e      	ldr	r0, [pc, #56]	; (80d00 <vTaskStartScheduler+0x48>)
   80cc8:	490e      	ldr	r1, [pc, #56]	; (80d04 <vTaskStartScheduler+0x4c>)
   80cca:	2282      	movs	r2, #130	; 0x82
   80ccc:	4c0e      	ldr	r4, [pc, #56]	; (80d08 <vTaskStartScheduler+0x50>)
   80cce:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   80cd0:	2801      	cmp	r0, #1
   80cd2:	d10e      	bne.n	80cf2 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   80cd4:	4b0d      	ldr	r3, [pc, #52]	; (80d0c <vTaskStartScheduler+0x54>)
   80cd6:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   80cd8:	2801      	cmp	r0, #1
   80cda:	d10a      	bne.n	80cf2 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   80cdc:	4b0c      	ldr	r3, [pc, #48]	; (80d10 <vTaskStartScheduler+0x58>)
   80cde:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   80ce0:	2201      	movs	r2, #1
   80ce2:	4b0c      	ldr	r3, [pc, #48]	; (80d14 <vTaskStartScheduler+0x5c>)
   80ce4:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80ce6:	2200      	movs	r2, #0
   80ce8:	4b0b      	ldr	r3, [pc, #44]	; (80d18 <vTaskStartScheduler+0x60>)
   80cea:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   80cec:	4b0b      	ldr	r3, [pc, #44]	; (80d1c <vTaskStartScheduler+0x64>)
   80cee:	4798      	blx	r3
   80cf0:	e004      	b.n	80cfc <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   80cf2:	b918      	cbnz	r0, 80cfc <vTaskStartScheduler+0x44>
   80cf4:	4b06      	ldr	r3, [pc, #24]	; (80d10 <vTaskStartScheduler+0x58>)
   80cf6:	4798      	blx	r3
   80cf8:	bf00      	nop
   80cfa:	e7fd      	b.n	80cf8 <vTaskStartScheduler+0x40>
}
   80cfc:	b004      	add	sp, #16
   80cfe:	bd10      	pop	{r4, pc}
   80d00:	00081005 	.word	0x00081005
   80d04:	00085594 	.word	0x00085594
   80d08:	00080ab5 	.word	0x00080ab5
   80d0c:	000814b1 	.word	0x000814b1
   80d10:	000802b9 	.word	0x000802b9
   80d14:	2007a9f8 	.word	0x2007a9f8
   80d18:	2007aac4 	.word	0x2007aac4
   80d1c:	00080385 	.word	0x00080385

00080d20 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   80d20:	4a02      	ldr	r2, [pc, #8]	; (80d2c <vTaskSuspendAll+0xc>)
   80d22:	6813      	ldr	r3, [r2, #0]
   80d24:	3301      	adds	r3, #1
   80d26:	6013      	str	r3, [r2, #0]
   80d28:	4770      	bx	lr
   80d2a:	bf00      	nop
   80d2c:	2007aac0 	.word	0x2007aac0

00080d30 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   80d30:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   80d32:	4b04      	ldr	r3, [pc, #16]	; (80d44 <xTaskGetTickCount+0x14>)
   80d34:	4798      	blx	r3
	{
		xTicks = xTickCount;
   80d36:	4b04      	ldr	r3, [pc, #16]	; (80d48 <xTaskGetTickCount+0x18>)
   80d38:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   80d3a:	4b04      	ldr	r3, [pc, #16]	; (80d4c <xTaskGetTickCount+0x1c>)
   80d3c:	4798      	blx	r3

	return xTicks;
}
   80d3e:	4620      	mov	r0, r4
   80d40:	bd10      	pop	{r4, pc}
   80d42:	bf00      	nop
   80d44:	000802c9 	.word	0x000802c9
   80d48:	2007aac4 	.word	0x2007aac4
   80d4c:	000802e9 	.word	0x000802e9

00080d50 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80d54:	4b3a      	ldr	r3, [pc, #232]	; (80e40 <vTaskIncrementTick+0xf0>)
   80d56:	681b      	ldr	r3, [r3, #0]
   80d58:	2b00      	cmp	r3, #0
   80d5a:	d16b      	bne.n	80e34 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   80d5c:	4b39      	ldr	r3, [pc, #228]	; (80e44 <vTaskIncrementTick+0xf4>)
   80d5e:	681a      	ldr	r2, [r3, #0]
   80d60:	3201      	adds	r2, #1
   80d62:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80d64:	681b      	ldr	r3, [r3, #0]
   80d66:	bb03      	cbnz	r3, 80daa <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80d68:	4b37      	ldr	r3, [pc, #220]	; (80e48 <vTaskIncrementTick+0xf8>)
   80d6a:	681b      	ldr	r3, [r3, #0]
   80d6c:	681b      	ldr	r3, [r3, #0]
   80d6e:	b11b      	cbz	r3, 80d78 <vTaskIncrementTick+0x28>
   80d70:	4b36      	ldr	r3, [pc, #216]	; (80e4c <vTaskIncrementTick+0xfc>)
   80d72:	4798      	blx	r3
   80d74:	bf00      	nop
   80d76:	e7fd      	b.n	80d74 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   80d78:	4b33      	ldr	r3, [pc, #204]	; (80e48 <vTaskIncrementTick+0xf8>)
   80d7a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80d7c:	4a34      	ldr	r2, [pc, #208]	; (80e50 <vTaskIncrementTick+0x100>)
   80d7e:	6810      	ldr	r0, [r2, #0]
   80d80:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80d82:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80d84:	4933      	ldr	r1, [pc, #204]	; (80e54 <vTaskIncrementTick+0x104>)
   80d86:	680a      	ldr	r2, [r1, #0]
   80d88:	3201      	adds	r2, #1
   80d8a:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80d8c:	681b      	ldr	r3, [r3, #0]
   80d8e:	681b      	ldr	r3, [r3, #0]
   80d90:	b923      	cbnz	r3, 80d9c <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80d92:	f04f 32ff 	mov.w	r2, #4294967295
   80d96:	4b30      	ldr	r3, [pc, #192]	; (80e58 <vTaskIncrementTick+0x108>)
   80d98:	601a      	str	r2, [r3, #0]
   80d9a:	e006      	b.n	80daa <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80d9c:	4b2a      	ldr	r3, [pc, #168]	; (80e48 <vTaskIncrementTick+0xf8>)
   80d9e:	681b      	ldr	r3, [r3, #0]
   80da0:	68db      	ldr	r3, [r3, #12]
   80da2:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80da4:	685a      	ldr	r2, [r3, #4]
   80da6:	4b2c      	ldr	r3, [pc, #176]	; (80e58 <vTaskIncrementTick+0x108>)
   80da8:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80daa:	4b26      	ldr	r3, [pc, #152]	; (80e44 <vTaskIncrementTick+0xf4>)
   80dac:	681a      	ldr	r2, [r3, #0]
   80dae:	4b2a      	ldr	r3, [pc, #168]	; (80e58 <vTaskIncrementTick+0x108>)
   80db0:	681b      	ldr	r3, [r3, #0]
   80db2:	429a      	cmp	r2, r3
   80db4:	d342      	bcc.n	80e3c <vTaskIncrementTick+0xec>
   80db6:	4b24      	ldr	r3, [pc, #144]	; (80e48 <vTaskIncrementTick+0xf8>)
   80db8:	681b      	ldr	r3, [r3, #0]
   80dba:	681b      	ldr	r3, [r3, #0]
   80dbc:	b16b      	cbz	r3, 80dda <vTaskIncrementTick+0x8a>
   80dbe:	4b22      	ldr	r3, [pc, #136]	; (80e48 <vTaskIncrementTick+0xf8>)
   80dc0:	681b      	ldr	r3, [r3, #0]
   80dc2:	68db      	ldr	r3, [r3, #12]
   80dc4:	68dc      	ldr	r4, [r3, #12]
   80dc6:	6863      	ldr	r3, [r4, #4]
   80dc8:	4a1e      	ldr	r2, [pc, #120]	; (80e44 <vTaskIncrementTick+0xf4>)
   80dca:	6812      	ldr	r2, [r2, #0]
   80dcc:	4293      	cmp	r3, r2
   80dce:	d813      	bhi.n	80df8 <vTaskIncrementTick+0xa8>
   80dd0:	4e22      	ldr	r6, [pc, #136]	; (80e5c <vTaskIncrementTick+0x10c>)
   80dd2:	4f23      	ldr	r7, [pc, #140]	; (80e60 <vTaskIncrementTick+0x110>)
   80dd4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80e6c <vTaskIncrementTick+0x11c>
   80dd8:	e012      	b.n	80e00 <vTaskIncrementTick+0xb0>
   80dda:	f04f 32ff 	mov.w	r2, #4294967295
   80dde:	4b1e      	ldr	r3, [pc, #120]	; (80e58 <vTaskIncrementTick+0x108>)
   80de0:	601a      	str	r2, [r3, #0]
   80de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80de6:	4b18      	ldr	r3, [pc, #96]	; (80e48 <vTaskIncrementTick+0xf8>)
   80de8:	681b      	ldr	r3, [r3, #0]
   80dea:	68db      	ldr	r3, [r3, #12]
   80dec:	68dc      	ldr	r4, [r3, #12]
   80dee:	6863      	ldr	r3, [r4, #4]
   80df0:	4a14      	ldr	r2, [pc, #80]	; (80e44 <vTaskIncrementTick+0xf4>)
   80df2:	6812      	ldr	r2, [r2, #0]
   80df4:	4293      	cmp	r3, r2
   80df6:	d903      	bls.n	80e00 <vTaskIncrementTick+0xb0>
   80df8:	4a17      	ldr	r2, [pc, #92]	; (80e58 <vTaskIncrementTick+0x108>)
   80dfa:	6013      	str	r3, [r2, #0]
   80dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e00:	1d25      	adds	r5, r4, #4
   80e02:	4628      	mov	r0, r5
   80e04:	47b0      	blx	r6
   80e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80e08:	b113      	cbz	r3, 80e10 <vTaskIncrementTick+0xc0>
   80e0a:	f104 0018 	add.w	r0, r4, #24
   80e0e:	47b0      	blx	r6
   80e10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80e12:	683b      	ldr	r3, [r7, #0]
   80e14:	4298      	cmp	r0, r3
   80e16:	bf88      	it	hi
   80e18:	6038      	strhi	r0, [r7, #0]
   80e1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80e1e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80e22:	4629      	mov	r1, r5
   80e24:	4b0f      	ldr	r3, [pc, #60]	; (80e64 <vTaskIncrementTick+0x114>)
   80e26:	4798      	blx	r3
   80e28:	4b07      	ldr	r3, [pc, #28]	; (80e48 <vTaskIncrementTick+0xf8>)
   80e2a:	681b      	ldr	r3, [r3, #0]
   80e2c:	681b      	ldr	r3, [r3, #0]
   80e2e:	2b00      	cmp	r3, #0
   80e30:	d1d9      	bne.n	80de6 <vTaskIncrementTick+0x96>
   80e32:	e7d2      	b.n	80dda <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
   80e34:	4a0c      	ldr	r2, [pc, #48]	; (80e68 <vTaskIncrementTick+0x118>)
   80e36:	6813      	ldr	r3, [r2, #0]
   80e38:	3301      	adds	r3, #1
   80e3a:	6013      	str	r3, [r2, #0]
   80e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e40:	2007aac0 	.word	0x2007aac0
   80e44:	2007aac4 	.word	0x2007aac4
   80e48:	2007a9f4 	.word	0x2007a9f4
   80e4c:	000802b9 	.word	0x000802b9
   80e50:	2007aac8 	.word	0x2007aac8
   80e54:	2007aaa4 	.word	0x2007aaa4
   80e58:	20070134 	.word	0x20070134
   80e5c:	00080231 	.word	0x00080231
   80e60:	2007aa28 	.word	0x2007aa28
   80e64:	000801d9 	.word	0x000801d9
   80e68:	2007a9dc 	.word	0x2007a9dc
   80e6c:	2007aa2c 	.word	0x2007aa2c

00080e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   80e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   80e74:	4b30      	ldr	r3, [pc, #192]	; (80f38 <xTaskResumeAll+0xc8>)
   80e76:	681b      	ldr	r3, [r3, #0]
   80e78:	b91b      	cbnz	r3, 80e82 <xTaskResumeAll+0x12>
   80e7a:	4b30      	ldr	r3, [pc, #192]	; (80f3c <xTaskResumeAll+0xcc>)
   80e7c:	4798      	blx	r3
   80e7e:	bf00      	nop
   80e80:	e7fd      	b.n	80e7e <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   80e82:	4b2f      	ldr	r3, [pc, #188]	; (80f40 <xTaskResumeAll+0xd0>)
   80e84:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   80e86:	4b2c      	ldr	r3, [pc, #176]	; (80f38 <xTaskResumeAll+0xc8>)
   80e88:	681a      	ldr	r2, [r3, #0]
   80e8a:	3a01      	subs	r2, #1
   80e8c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80e8e:	681b      	ldr	r3, [r3, #0]
   80e90:	2b00      	cmp	r3, #0
   80e92:	d149      	bne.n	80f28 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   80e94:	4b2b      	ldr	r3, [pc, #172]	; (80f44 <xTaskResumeAll+0xd4>)
   80e96:	681b      	ldr	r3, [r3, #0]
   80e98:	bb03      	cbnz	r3, 80edc <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80e9a:	2400      	movs	r4, #0
   80e9c:	e047      	b.n	80f2e <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   80e9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   80ea2:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   80ea4:	f104 0018 	add.w	r0, r4, #24
   80ea8:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   80eaa:	f104 0904 	add.w	r9, r4, #4
   80eae:	4648      	mov	r0, r9
   80eb0:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   80eb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80eb4:	6833      	ldr	r3, [r6, #0]
   80eb6:	4298      	cmp	r0, r3
   80eb8:	bf88      	it	hi
   80eba:	6030      	strhi	r0, [r6, #0]
   80ebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80ec0:	4b21      	ldr	r3, [pc, #132]	; (80f48 <xTaskResumeAll+0xd8>)
   80ec2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80ec6:	4649      	mov	r1, r9
   80ec8:	4b20      	ldr	r3, [pc, #128]	; (80f4c <xTaskResumeAll+0xdc>)
   80eca:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   80ecc:	4b20      	ldr	r3, [pc, #128]	; (80f50 <xTaskResumeAll+0xe0>)
   80ece:	681b      	ldr	r3, [r3, #0]
   80ed0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   80ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   80ed4:	429a      	cmp	r2, r3
   80ed6:	bf28      	it	cs
   80ed8:	2501      	movcs	r5, #1
   80eda:	e004      	b.n	80ee6 <xTaskResumeAll+0x76>
   80edc:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80ede:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80f70 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   80ee2:	4f1c      	ldr	r7, [pc, #112]	; (80f54 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   80ee4:	4e1c      	ldr	r6, [pc, #112]	; (80f58 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80ee6:	f8d8 3000 	ldr.w	r3, [r8]
   80eea:	2b00      	cmp	r3, #0
   80eec:	d1d7      	bne.n	80e9e <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80eee:	4b1b      	ldr	r3, [pc, #108]	; (80f5c <xTaskResumeAll+0xec>)
   80ef0:	681b      	ldr	r3, [r3, #0]
   80ef2:	b163      	cbz	r3, 80f0e <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80ef4:	4b19      	ldr	r3, [pc, #100]	; (80f5c <xTaskResumeAll+0xec>)
   80ef6:	681b      	ldr	r3, [r3, #0]
   80ef8:	b17b      	cbz	r3, 80f1a <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   80efa:	4d19      	ldr	r5, [pc, #100]	; (80f60 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   80efc:	4c17      	ldr	r4, [pc, #92]	; (80f5c <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   80efe:	47a8      	blx	r5
						--uxMissedTicks;
   80f00:	6823      	ldr	r3, [r4, #0]
   80f02:	3b01      	subs	r3, #1
   80f04:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f06:	6823      	ldr	r3, [r4, #0]
   80f08:	2b00      	cmp	r3, #0
   80f0a:	d1f8      	bne.n	80efe <xTaskResumeAll+0x8e>
   80f0c:	e005      	b.n	80f1a <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   80f0e:	2d01      	cmp	r5, #1
   80f10:	d003      	beq.n	80f1a <xTaskResumeAll+0xaa>
   80f12:	4b14      	ldr	r3, [pc, #80]	; (80f64 <xTaskResumeAll+0xf4>)
   80f14:	681b      	ldr	r3, [r3, #0]
   80f16:	2b01      	cmp	r3, #1
   80f18:	d108      	bne.n	80f2c <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   80f1a:	2200      	movs	r2, #0
   80f1c:	4b11      	ldr	r3, [pc, #68]	; (80f64 <xTaskResumeAll+0xf4>)
   80f1e:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   80f20:	4b11      	ldr	r3, [pc, #68]	; (80f68 <xTaskResumeAll+0xf8>)
   80f22:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   80f24:	2401      	movs	r4, #1
   80f26:	e002      	b.n	80f2e <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80f28:	2400      	movs	r4, #0
   80f2a:	e000      	b.n	80f2e <xTaskResumeAll+0xbe>
   80f2c:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   80f2e:	4b0f      	ldr	r3, [pc, #60]	; (80f6c <xTaskResumeAll+0xfc>)
   80f30:	4798      	blx	r3

	return xAlreadyYielded;
}
   80f32:	4620      	mov	r0, r4
   80f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80f38:	2007aac0 	.word	0x2007aac0
   80f3c:	000802b9 	.word	0x000802b9
   80f40:	000802c9 	.word	0x000802c9
   80f44:	2007aad0 	.word	0x2007aad0
   80f48:	2007aa2c 	.word	0x2007aa2c
   80f4c:	000801d9 	.word	0x000801d9
   80f50:	2007aaa8 	.word	0x2007aaa8
   80f54:	00080231 	.word	0x00080231
   80f58:	2007aa28 	.word	0x2007aa28
   80f5c:	2007a9dc 	.word	0x2007a9dc
   80f60:	00080d51 	.word	0x00080d51
   80f64:	2007aad4 	.word	0x2007aad4
   80f68:	000802a9 	.word	0x000802a9
   80f6c:	000802e9 	.word	0x000802e9
   80f70:	2007aaac 	.word	0x2007aaac

00080f74 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   80f74:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   80f76:	b918      	cbnz	r0, 80f80 <vTaskDelayUntil+0xc>
   80f78:	4b1a      	ldr	r3, [pc, #104]	; (80fe4 <vTaskDelayUntil+0x70>)
   80f7a:	4798      	blx	r3
   80f7c:	bf00      	nop
   80f7e:	e7fd      	b.n	80f7c <vTaskDelayUntil+0x8>
   80f80:	460c      	mov	r4, r1
   80f82:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   80f84:	b919      	cbnz	r1, 80f8e <vTaskDelayUntil+0x1a>
   80f86:	4b17      	ldr	r3, [pc, #92]	; (80fe4 <vTaskDelayUntil+0x70>)
   80f88:	4798      	blx	r3
   80f8a:	bf00      	nop
   80f8c:	e7fd      	b.n	80f8a <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   80f8e:	4b16      	ldr	r3, [pc, #88]	; (80fe8 <vTaskDelayUntil+0x74>)
   80f90:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   80f92:	682b      	ldr	r3, [r5, #0]
   80f94:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   80f96:	4a15      	ldr	r2, [pc, #84]	; (80fec <vTaskDelayUntil+0x78>)
   80f98:	6812      	ldr	r2, [r2, #0]
   80f9a:	4293      	cmp	r3, r2
   80f9c:	d907      	bls.n	80fae <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   80f9e:	42a3      	cmp	r3, r4
   80fa0:	d91c      	bls.n	80fdc <vTaskDelayUntil+0x68>
   80fa2:	4b12      	ldr	r3, [pc, #72]	; (80fec <vTaskDelayUntil+0x78>)
   80fa4:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   80fa6:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   80fa8:	429c      	cmp	r4, r3
   80faa:	d90f      	bls.n	80fcc <vTaskDelayUntil+0x58>
   80fac:	e006      	b.n	80fbc <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   80fae:	42a3      	cmp	r3, r4
   80fb0:	d812      	bhi.n	80fd8 <vTaskDelayUntil+0x64>
   80fb2:	4b0e      	ldr	r3, [pc, #56]	; (80fec <vTaskDelayUntil+0x78>)
   80fb4:	681b      	ldr	r3, [r3, #0]
   80fb6:	429c      	cmp	r4, r3
   80fb8:	d80e      	bhi.n	80fd8 <vTaskDelayUntil+0x64>
   80fba:	e00f      	b.n	80fdc <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   80fbc:	4b0c      	ldr	r3, [pc, #48]	; (80ff0 <vTaskDelayUntil+0x7c>)
   80fbe:	6818      	ldr	r0, [r3, #0]
   80fc0:	3004      	adds	r0, #4
   80fc2:	4b0c      	ldr	r3, [pc, #48]	; (80ff4 <vTaskDelayUntil+0x80>)
   80fc4:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   80fc6:	4620      	mov	r0, r4
   80fc8:	4b0b      	ldr	r3, [pc, #44]	; (80ff8 <vTaskDelayUntil+0x84>)
   80fca:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   80fcc:	4b0b      	ldr	r3, [pc, #44]	; (80ffc <vTaskDelayUntil+0x88>)
   80fce:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   80fd0:	b930      	cbnz	r0, 80fe0 <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   80fd2:	4b0b      	ldr	r3, [pc, #44]	; (81000 <vTaskDelayUntil+0x8c>)
   80fd4:	4798      	blx	r3
   80fd6:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   80fd8:	602c      	str	r4, [r5, #0]
   80fda:	e7ef      	b.n	80fbc <vTaskDelayUntil+0x48>
   80fdc:	602c      	str	r4, [r5, #0]
   80fde:	e7f5      	b.n	80fcc <vTaskDelayUntil+0x58>
   80fe0:	bd38      	pop	{r3, r4, r5, pc}
   80fe2:	bf00      	nop
   80fe4:	000802b9 	.word	0x000802b9
   80fe8:	00080d21 	.word	0x00080d21
   80fec:	2007aac4 	.word	0x2007aac4
   80ff0:	2007aaa8 	.word	0x2007aaa8
   80ff4:	00080231 	.word	0x00080231
   80ff8:	00080a5d 	.word	0x00080a5d
   80ffc:	00080e71 	.word	0x00080e71
   81000:	000802a9 	.word	0x000802a9

00081004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81004:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81006:	4d15      	ldr	r5, [pc, #84]	; (8105c <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81008:	4e15      	ldr	r6, [pc, #84]	; (81060 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8100a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81080 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   8100e:	4f15      	ldr	r7, [pc, #84]	; (81064 <prvIdleTask+0x60>)
   81010:	e019      	b.n	81046 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81012:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81014:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81016:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   81018:	b1ac      	cbz	r4, 81046 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8101a:	4b13      	ldr	r3, [pc, #76]	; (81068 <prvIdleTask+0x64>)
   8101c:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8101e:	68f3      	ldr	r3, [r6, #12]
   81020:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81022:	1d20      	adds	r0, r4, #4
   81024:	4b11      	ldr	r3, [pc, #68]	; (8106c <prvIdleTask+0x68>)
   81026:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81028:	4a11      	ldr	r2, [pc, #68]	; (81070 <prvIdleTask+0x6c>)
   8102a:	6813      	ldr	r3, [r2, #0]
   8102c:	3b01      	subs	r3, #1
   8102e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81030:	682b      	ldr	r3, [r5, #0]
   81032:	3b01      	subs	r3, #1
   81034:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81036:	4b0f      	ldr	r3, [pc, #60]	; (81074 <prvIdleTask+0x70>)
   81038:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   8103a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8103c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81084 <prvIdleTask+0x80>
   81040:	47c8      	blx	r9
		vPortFree( pxTCB );
   81042:	4620      	mov	r0, r4
   81044:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81046:	682b      	ldr	r3, [r5, #0]
   81048:	2b00      	cmp	r3, #0
   8104a:	d1e2      	bne.n	81012 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   8104c:	4b0a      	ldr	r3, [pc, #40]	; (81078 <prvIdleTask+0x74>)
   8104e:	681b      	ldr	r3, [r3, #0]
   81050:	2b01      	cmp	r3, #1
   81052:	d9f8      	bls.n	81046 <prvIdleTask+0x42>
			{
				taskYIELD();
   81054:	4b09      	ldr	r3, [pc, #36]	; (8107c <prvIdleTask+0x78>)
   81056:	4798      	blx	r3
   81058:	e7d7      	b.n	8100a <prvIdleTask+0x6>
   8105a:	bf00      	nop
   8105c:	2007a9fc 	.word	0x2007a9fc
   81060:	2007aa90 	.word	0x2007aa90
   81064:	00080e71 	.word	0x00080e71
   81068:	000802c9 	.word	0x000802c9
   8106c:	00080231 	.word	0x00080231
   81070:	2007aad0 	.word	0x2007aad0
   81074:	000802e9 	.word	0x000802e9
   81078:	2007aa2c 	.word	0x2007aa2c
   8107c:	000802a9 	.word	0x000802a9
   81080:	00080d21 	.word	0x00080d21
   81084:	000804dd 	.word	0x000804dd

00081088 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81088:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8108a:	4b22      	ldr	r3, [pc, #136]	; (81114 <vTaskSwitchContext+0x8c>)
   8108c:	681b      	ldr	r3, [r3, #0]
   8108e:	b96b      	cbnz	r3, 810ac <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81090:	4b21      	ldr	r3, [pc, #132]	; (81118 <vTaskSwitchContext+0x90>)
   81092:	681b      	ldr	r3, [r3, #0]
   81094:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81098:	009b      	lsls	r3, r3, #2
   8109a:	4a20      	ldr	r2, [pc, #128]	; (8111c <vTaskSwitchContext+0x94>)
   8109c:	58d3      	ldr	r3, [r2, r3]
   8109e:	b9cb      	cbnz	r3, 810d4 <vTaskSwitchContext+0x4c>
   810a0:	4b1d      	ldr	r3, [pc, #116]	; (81118 <vTaskSwitchContext+0x90>)
   810a2:	681b      	ldr	r3, [r3, #0]
   810a4:	b143      	cbz	r3, 810b8 <vTaskSwitchContext+0x30>
   810a6:	4a1c      	ldr	r2, [pc, #112]	; (81118 <vTaskSwitchContext+0x90>)
   810a8:	491c      	ldr	r1, [pc, #112]	; (8111c <vTaskSwitchContext+0x94>)
   810aa:	e009      	b.n	810c0 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   810ac:	2201      	movs	r2, #1
   810ae:	4b1c      	ldr	r3, [pc, #112]	; (81120 <vTaskSwitchContext+0x98>)
   810b0:	601a      	str	r2, [r3, #0]
   810b2:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   810b4:	6813      	ldr	r3, [r2, #0]
   810b6:	b91b      	cbnz	r3, 810c0 <vTaskSwitchContext+0x38>
   810b8:	4b1a      	ldr	r3, [pc, #104]	; (81124 <vTaskSwitchContext+0x9c>)
   810ba:	4798      	blx	r3
   810bc:	bf00      	nop
   810be:	e7fd      	b.n	810bc <vTaskSwitchContext+0x34>
   810c0:	6813      	ldr	r3, [r2, #0]
   810c2:	3b01      	subs	r3, #1
   810c4:	6013      	str	r3, [r2, #0]
   810c6:	6813      	ldr	r3, [r2, #0]
   810c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   810cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   810d0:	2b00      	cmp	r3, #0
   810d2:	d0ef      	beq.n	810b4 <vTaskSwitchContext+0x2c>
   810d4:	4b10      	ldr	r3, [pc, #64]	; (81118 <vTaskSwitchContext+0x90>)
   810d6:	681b      	ldr	r3, [r3, #0]
   810d8:	4a10      	ldr	r2, [pc, #64]	; (8111c <vTaskSwitchContext+0x94>)
   810da:	0099      	lsls	r1, r3, #2
   810dc:	18c8      	adds	r0, r1, r3
   810de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   810e2:	6844      	ldr	r4, [r0, #4]
   810e4:	6864      	ldr	r4, [r4, #4]
   810e6:	6044      	str	r4, [r0, #4]
   810e8:	4602      	mov	r2, r0
   810ea:	3208      	adds	r2, #8
   810ec:	4294      	cmp	r4, r2
   810ee:	d106      	bne.n	810fe <vTaskSwitchContext+0x76>
   810f0:	6860      	ldr	r0, [r4, #4]
   810f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   810f6:	4a09      	ldr	r2, [pc, #36]	; (8111c <vTaskSwitchContext+0x94>)
   810f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   810fc:	6050      	str	r0, [r2, #4]
   810fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81102:	4a06      	ldr	r2, [pc, #24]	; (8111c <vTaskSwitchContext+0x94>)
   81104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81108:	685b      	ldr	r3, [r3, #4]
   8110a:	68da      	ldr	r2, [r3, #12]
   8110c:	4b06      	ldr	r3, [pc, #24]	; (81128 <vTaskSwitchContext+0xa0>)
   8110e:	601a      	str	r2, [r3, #0]
   81110:	bd10      	pop	{r4, pc}
   81112:	bf00      	nop
   81114:	2007aac0 	.word	0x2007aac0
   81118:	2007aa28 	.word	0x2007aa28
   8111c:	2007aa2c 	.word	0x2007aa2c
   81120:	2007aad4 	.word	0x2007aad4
   81124:	000802b9 	.word	0x000802b9
   81128:	2007aaa8 	.word	0x2007aaa8

0008112c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   8112c:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8112e:	b918      	cbnz	r0, 81138 <vTaskPlaceOnEventList+0xc>
   81130:	4b0e      	ldr	r3, [pc, #56]	; (8116c <vTaskPlaceOnEventList+0x40>)
   81132:	4798      	blx	r3
   81134:	bf00      	nop
   81136:	e7fd      	b.n	81134 <vTaskPlaceOnEventList+0x8>
   81138:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8113a:	4d0d      	ldr	r5, [pc, #52]	; (81170 <vTaskPlaceOnEventList+0x44>)
   8113c:	6829      	ldr	r1, [r5, #0]
   8113e:	3118      	adds	r1, #24
   81140:	4b0c      	ldr	r3, [pc, #48]	; (81174 <vTaskPlaceOnEventList+0x48>)
   81142:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81144:	6828      	ldr	r0, [r5, #0]
   81146:	3004      	adds	r0, #4
   81148:	4b0b      	ldr	r3, [pc, #44]	; (81178 <vTaskPlaceOnEventList+0x4c>)
   8114a:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8114c:	f1b4 3fff 	cmp.w	r4, #4294967295
   81150:	d105      	bne.n	8115e <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81152:	6829      	ldr	r1, [r5, #0]
   81154:	4809      	ldr	r0, [pc, #36]	; (8117c <vTaskPlaceOnEventList+0x50>)
   81156:	3104      	adds	r1, #4
   81158:	4b09      	ldr	r3, [pc, #36]	; (81180 <vTaskPlaceOnEventList+0x54>)
   8115a:	4798      	blx	r3
   8115c:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8115e:	4b09      	ldr	r3, [pc, #36]	; (81184 <vTaskPlaceOnEventList+0x58>)
   81160:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81162:	4420      	add	r0, r4
   81164:	4b08      	ldr	r3, [pc, #32]	; (81188 <vTaskPlaceOnEventList+0x5c>)
   81166:	4798      	blx	r3
   81168:	bd38      	pop	{r3, r4, r5, pc}
   8116a:	bf00      	nop
   8116c:	000802b9 	.word	0x000802b9
   81170:	2007aaa8 	.word	0x2007aaa8
   81174:	000801f5 	.word	0x000801f5
   81178:	00080231 	.word	0x00080231
   8117c:	2007a9e0 	.word	0x2007a9e0
   81180:	000801d9 	.word	0x000801d9
   81184:	2007aac4 	.word	0x2007aac4
   81188:	00080a5d 	.word	0x00080a5d

0008118c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8118c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   8118e:	b918      	cbnz	r0, 81198 <vTaskPlaceOnEventListRestricted+0xc>
   81190:	4b09      	ldr	r3, [pc, #36]	; (811b8 <vTaskPlaceOnEventListRestricted+0x2c>)
   81192:	4798      	blx	r3
   81194:	bf00      	nop
   81196:	e7fd      	b.n	81194 <vTaskPlaceOnEventListRestricted+0x8>
   81198:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8119a:	4c08      	ldr	r4, [pc, #32]	; (811bc <vTaskPlaceOnEventListRestricted+0x30>)
   8119c:	6821      	ldr	r1, [r4, #0]
   8119e:	3118      	adds	r1, #24
   811a0:	4b07      	ldr	r3, [pc, #28]	; (811c0 <vTaskPlaceOnEventListRestricted+0x34>)
   811a2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   811a4:	6820      	ldr	r0, [r4, #0]
   811a6:	3004      	adds	r0, #4
   811a8:	4b06      	ldr	r3, [pc, #24]	; (811c4 <vTaskPlaceOnEventListRestricted+0x38>)
   811aa:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   811ac:	4b06      	ldr	r3, [pc, #24]	; (811c8 <vTaskPlaceOnEventListRestricted+0x3c>)
   811ae:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   811b0:	4428      	add	r0, r5
   811b2:	4b06      	ldr	r3, [pc, #24]	; (811cc <vTaskPlaceOnEventListRestricted+0x40>)
   811b4:	4798      	blx	r3
   811b6:	bd38      	pop	{r3, r4, r5, pc}
   811b8:	000802b9 	.word	0x000802b9
   811bc:	2007aaa8 	.word	0x2007aaa8
   811c0:	000801d9 	.word	0x000801d9
   811c4:	00080231 	.word	0x00080231
   811c8:	2007aac4 	.word	0x2007aac4
   811cc:	00080a5d 	.word	0x00080a5d

000811d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   811d0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   811d2:	68c3      	ldr	r3, [r0, #12]
   811d4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   811d6:	b91c      	cbnz	r4, 811e0 <xTaskRemoveFromEventList+0x10>
   811d8:	4b16      	ldr	r3, [pc, #88]	; (81234 <xTaskRemoveFromEventList+0x64>)
   811da:	4798      	blx	r3
   811dc:	bf00      	nop
   811de:	e7fd      	b.n	811dc <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   811e0:	f104 0518 	add.w	r5, r4, #24
   811e4:	4628      	mov	r0, r5
   811e6:	4b14      	ldr	r3, [pc, #80]	; (81238 <xTaskRemoveFromEventList+0x68>)
   811e8:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   811ea:	4b14      	ldr	r3, [pc, #80]	; (8123c <xTaskRemoveFromEventList+0x6c>)
   811ec:	681b      	ldr	r3, [r3, #0]
   811ee:	b99b      	cbnz	r3, 81218 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   811f0:	1d25      	adds	r5, r4, #4
   811f2:	4628      	mov	r0, r5
   811f4:	4b10      	ldr	r3, [pc, #64]	; (81238 <xTaskRemoveFromEventList+0x68>)
   811f6:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   811f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   811fa:	4b11      	ldr	r3, [pc, #68]	; (81240 <xTaskRemoveFromEventList+0x70>)
   811fc:	681b      	ldr	r3, [r3, #0]
   811fe:	4298      	cmp	r0, r3
   81200:	bf84      	itt	hi
   81202:	4b0f      	ldrhi	r3, [pc, #60]	; (81240 <xTaskRemoveFromEventList+0x70>)
   81204:	6018      	strhi	r0, [r3, #0]
   81206:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8120a:	4b0e      	ldr	r3, [pc, #56]	; (81244 <xTaskRemoveFromEventList+0x74>)
   8120c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81210:	4629      	mov	r1, r5
   81212:	4b0d      	ldr	r3, [pc, #52]	; (81248 <xTaskRemoveFromEventList+0x78>)
   81214:	4798      	blx	r3
   81216:	e003      	b.n	81220 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81218:	480c      	ldr	r0, [pc, #48]	; (8124c <xTaskRemoveFromEventList+0x7c>)
   8121a:	4629      	mov	r1, r5
   8121c:	4b0a      	ldr	r3, [pc, #40]	; (81248 <xTaskRemoveFromEventList+0x78>)
   8121e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81220:	4b0b      	ldr	r3, [pc, #44]	; (81250 <xTaskRemoveFromEventList+0x80>)
   81222:	681b      	ldr	r3, [r3, #0]
   81224:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81228:	4298      	cmp	r0, r3
   8122a:	bf34      	ite	cc
   8122c:	2000      	movcc	r0, #0
   8122e:	2001      	movcs	r0, #1
   81230:	bd38      	pop	{r3, r4, r5, pc}
   81232:	bf00      	nop
   81234:	000802b9 	.word	0x000802b9
   81238:	00080231 	.word	0x00080231
   8123c:	2007aac0 	.word	0x2007aac0
   81240:	2007aa28 	.word	0x2007aa28
   81244:	2007aa2c 	.word	0x2007aa2c
   81248:	000801d9 	.word	0x000801d9
   8124c:	2007aaac 	.word	0x2007aaac
   81250:	2007aaa8 	.word	0x2007aaa8

00081254 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81254:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81256:	b918      	cbnz	r0, 81260 <vTaskSetTimeOutState+0xc>
   81258:	4b05      	ldr	r3, [pc, #20]	; (81270 <vTaskSetTimeOutState+0x1c>)
   8125a:	4798      	blx	r3
   8125c:	bf00      	nop
   8125e:	e7fd      	b.n	8125c <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81260:	4a04      	ldr	r2, [pc, #16]	; (81274 <vTaskSetTimeOutState+0x20>)
   81262:	6812      	ldr	r2, [r2, #0]
   81264:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81266:	4a04      	ldr	r2, [pc, #16]	; (81278 <vTaskSetTimeOutState+0x24>)
   81268:	6812      	ldr	r2, [r2, #0]
   8126a:	6042      	str	r2, [r0, #4]
   8126c:	bd08      	pop	{r3, pc}
   8126e:	bf00      	nop
   81270:	000802b9 	.word	0x000802b9
   81274:	2007aaa4 	.word	0x2007aaa4
   81278:	2007aac4 	.word	0x2007aac4

0008127c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   8127c:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   8127e:	b918      	cbnz	r0, 81288 <xTaskCheckForTimeOut+0xc>
   81280:	4b19      	ldr	r3, [pc, #100]	; (812e8 <xTaskCheckForTimeOut+0x6c>)
   81282:	4798      	blx	r3
   81284:	bf00      	nop
   81286:	e7fd      	b.n	81284 <xTaskCheckForTimeOut+0x8>
   81288:	460d      	mov	r5, r1
   8128a:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   8128c:	b919      	cbnz	r1, 81296 <xTaskCheckForTimeOut+0x1a>
   8128e:	4b16      	ldr	r3, [pc, #88]	; (812e8 <xTaskCheckForTimeOut+0x6c>)
   81290:	4798      	blx	r3
   81292:	bf00      	nop
   81294:	e7fd      	b.n	81292 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81296:	4b15      	ldr	r3, [pc, #84]	; (812ec <xTaskCheckForTimeOut+0x70>)
   81298:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   8129a:	682b      	ldr	r3, [r5, #0]
   8129c:	f1b3 3fff 	cmp.w	r3, #4294967295
   812a0:	d018      	beq.n	812d4 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   812a2:	4a13      	ldr	r2, [pc, #76]	; (812f0 <xTaskCheckForTimeOut+0x74>)
   812a4:	6812      	ldr	r2, [r2, #0]
   812a6:	6821      	ldr	r1, [r4, #0]
   812a8:	4291      	cmp	r1, r2
   812aa:	d004      	beq.n	812b6 <xTaskCheckForTimeOut+0x3a>
   812ac:	4a11      	ldr	r2, [pc, #68]	; (812f4 <xTaskCheckForTimeOut+0x78>)
   812ae:	6812      	ldr	r2, [r2, #0]
   812b0:	6861      	ldr	r1, [r4, #4]
   812b2:	4291      	cmp	r1, r2
   812b4:	d910      	bls.n	812d8 <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   812b6:	4a0f      	ldr	r2, [pc, #60]	; (812f4 <xTaskCheckForTimeOut+0x78>)
   812b8:	6811      	ldr	r1, [r2, #0]
   812ba:	6860      	ldr	r0, [r4, #4]
   812bc:	1a09      	subs	r1, r1, r0
   812be:	428b      	cmp	r3, r1
   812c0:	d90c      	bls.n	812dc <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   812c2:	6812      	ldr	r2, [r2, #0]
   812c4:	1a12      	subs	r2, r2, r0
   812c6:	1a9b      	subs	r3, r3, r2
   812c8:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   812ca:	4620      	mov	r0, r4
   812cc:	4b0a      	ldr	r3, [pc, #40]	; (812f8 <xTaskCheckForTimeOut+0x7c>)
   812ce:	4798      	blx	r3
			xReturn = pdFALSE;
   812d0:	2400      	movs	r4, #0
   812d2:	e004      	b.n	812de <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   812d4:	2400      	movs	r4, #0
   812d6:	e002      	b.n	812de <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   812d8:	2401      	movs	r4, #1
   812da:	e000      	b.n	812de <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   812dc:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   812de:	4b07      	ldr	r3, [pc, #28]	; (812fc <xTaskCheckForTimeOut+0x80>)
   812e0:	4798      	blx	r3

	return xReturn;
}
   812e2:	4620      	mov	r0, r4
   812e4:	bd38      	pop	{r3, r4, r5, pc}
   812e6:	bf00      	nop
   812e8:	000802b9 	.word	0x000802b9
   812ec:	000802c9 	.word	0x000802c9
   812f0:	2007aaa4 	.word	0x2007aaa4
   812f4:	2007aac4 	.word	0x2007aac4
   812f8:	00081255 	.word	0x00081255
   812fc:	000802e9 	.word	0x000802e9

00081300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81300:	2201      	movs	r2, #1
   81302:	4b01      	ldr	r3, [pc, #4]	; (81308 <vTaskMissedYield+0x8>)
   81304:	601a      	str	r2, [r3, #0]
   81306:	4770      	bx	lr
   81308:	2007aad4 	.word	0x2007aad4

0008130c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   8130c:	4b01      	ldr	r3, [pc, #4]	; (81314 <xTaskGetCurrentTaskHandle+0x8>)
   8130e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81310:	4770      	bx	lr
   81312:	bf00      	nop
   81314:	2007aaa8 	.word	0x2007aaa8

00081318 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81318:	4b05      	ldr	r3, [pc, #20]	; (81330 <xTaskGetSchedulerState+0x18>)
   8131a:	681b      	ldr	r3, [r3, #0]
   8131c:	b133      	cbz	r3, 8132c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8131e:	4b05      	ldr	r3, [pc, #20]	; (81334 <xTaskGetSchedulerState+0x1c>)
   81320:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81322:	2b00      	cmp	r3, #0
   81324:	bf0c      	ite	eq
   81326:	2001      	moveq	r0, #1
   81328:	2002      	movne	r0, #2
   8132a:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   8132c:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8132e:	4770      	bx	lr
   81330:	2007a9f8 	.word	0x2007a9f8
   81334:	2007aac0 	.word	0x2007aac0

00081338 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81338:	2800      	cmp	r0, #0
   8133a:	d031      	beq.n	813a0 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   8133c:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8133e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81340:	4918      	ldr	r1, [pc, #96]	; (813a4 <vTaskPriorityInherit+0x6c>)
   81342:	6809      	ldr	r1, [r1, #0]
   81344:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81346:	428b      	cmp	r3, r1
   81348:	d229      	bcs.n	8139e <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   8134a:	4916      	ldr	r1, [pc, #88]	; (813a4 <vTaskPriorityInherit+0x6c>)
   8134c:	6809      	ldr	r1, [r1, #0]
   8134e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81350:	f1c1 0105 	rsb	r1, r1, #5
   81354:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81356:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8135a:	4913      	ldr	r1, [pc, #76]	; (813a8 <vTaskPriorityInherit+0x70>)
   8135c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81360:	6941      	ldr	r1, [r0, #20]
   81362:	4299      	cmp	r1, r3
   81364:	d117      	bne.n	81396 <vTaskPriorityInherit+0x5e>
   81366:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81368:	1d04      	adds	r4, r0, #4
   8136a:	4620      	mov	r0, r4
   8136c:	4b0f      	ldr	r3, [pc, #60]	; (813ac <vTaskPriorityInherit+0x74>)
   8136e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81370:	4b0c      	ldr	r3, [pc, #48]	; (813a4 <vTaskPriorityInherit+0x6c>)
   81372:	681b      	ldr	r3, [r3, #0]
   81374:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81376:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81378:	4b0d      	ldr	r3, [pc, #52]	; (813b0 <vTaskPriorityInherit+0x78>)
   8137a:	681b      	ldr	r3, [r3, #0]
   8137c:	4298      	cmp	r0, r3
   8137e:	bf84      	itt	hi
   81380:	4b0b      	ldrhi	r3, [pc, #44]	; (813b0 <vTaskPriorityInherit+0x78>)
   81382:	6018      	strhi	r0, [r3, #0]
   81384:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81388:	4b07      	ldr	r3, [pc, #28]	; (813a8 <vTaskPriorityInherit+0x70>)
   8138a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8138e:	4621      	mov	r1, r4
   81390:	4b08      	ldr	r3, [pc, #32]	; (813b4 <vTaskPriorityInherit+0x7c>)
   81392:	4798      	blx	r3
   81394:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81396:	4b03      	ldr	r3, [pc, #12]	; (813a4 <vTaskPriorityInherit+0x6c>)
   81398:	681b      	ldr	r3, [r3, #0]
   8139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8139c:	62c3      	str	r3, [r0, #44]	; 0x2c
   8139e:	bd38      	pop	{r3, r4, r5, pc}
   813a0:	4770      	bx	lr
   813a2:	bf00      	nop
   813a4:	2007aaa8 	.word	0x2007aaa8
   813a8:	2007aa2c 	.word	0x2007aa2c
   813ac:	00080231 	.word	0x00080231
   813b0:	2007aa28 	.word	0x2007aa28
   813b4:	000801d9 	.word	0x000801d9

000813b8 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   813b8:	b1e8      	cbz	r0, 813f6 <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   813ba:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   813bc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   813be:	6c82      	ldr	r2, [r0, #72]	; 0x48
   813c0:	4291      	cmp	r1, r2
   813c2:	d017      	beq.n	813f4 <vTaskPriorityDisinherit+0x3c>
   813c4:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   813c6:	1d05      	adds	r5, r0, #4
   813c8:	4628      	mov	r0, r5
   813ca:	4b0b      	ldr	r3, [pc, #44]	; (813f8 <vTaskPriorityDisinherit+0x40>)
   813cc:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   813ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   813d0:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   813d2:	f1c0 0305 	rsb	r3, r0, #5
   813d6:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   813d8:	4b08      	ldr	r3, [pc, #32]	; (813fc <vTaskPriorityDisinherit+0x44>)
   813da:	681b      	ldr	r3, [r3, #0]
   813dc:	4298      	cmp	r0, r3
   813de:	bf84      	itt	hi
   813e0:	4b06      	ldrhi	r3, [pc, #24]	; (813fc <vTaskPriorityDisinherit+0x44>)
   813e2:	6018      	strhi	r0, [r3, #0]
   813e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   813e8:	4b05      	ldr	r3, [pc, #20]	; (81400 <vTaskPriorityDisinherit+0x48>)
   813ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   813ee:	4629      	mov	r1, r5
   813f0:	4b04      	ldr	r3, [pc, #16]	; (81404 <vTaskPriorityDisinherit+0x4c>)
   813f2:	4798      	blx	r3
   813f4:	bd38      	pop	{r3, r4, r5, pc}
   813f6:	4770      	bx	lr
   813f8:	00080231 	.word	0x00080231
   813fc:	2007aa28 	.word	0x2007aa28
   81400:	2007aa2c 	.word	0x2007aa2c
   81404:	000801d9 	.word	0x000801d9

00081408 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81408:	b510      	push	{r4, lr}
   8140a:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8140c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8140e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81410:	4291      	cmp	r1, r2
   81412:	d80a      	bhi.n	8142a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81414:	1ad2      	subs	r2, r2, r3
   81416:	6983      	ldr	r3, [r0, #24]
   81418:	429a      	cmp	r2, r3
   8141a:	d211      	bcs.n	81440 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8141c:	4b0a      	ldr	r3, [pc, #40]	; (81448 <prvInsertTimerInActiveList+0x40>)
   8141e:	6818      	ldr	r0, [r3, #0]
   81420:	1d21      	adds	r1, r4, #4
   81422:	4b0a      	ldr	r3, [pc, #40]	; (8144c <prvInsertTimerInActiveList+0x44>)
   81424:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81426:	2000      	movs	r0, #0
   81428:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   8142a:	429a      	cmp	r2, r3
   8142c:	d201      	bcs.n	81432 <prvInsertTimerInActiveList+0x2a>
   8142e:	4299      	cmp	r1, r3
   81430:	d208      	bcs.n	81444 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81432:	4b07      	ldr	r3, [pc, #28]	; (81450 <prvInsertTimerInActiveList+0x48>)
   81434:	6818      	ldr	r0, [r3, #0]
   81436:	1d21      	adds	r1, r4, #4
   81438:	4b04      	ldr	r3, [pc, #16]	; (8144c <prvInsertTimerInActiveList+0x44>)
   8143a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8143c:	2000      	movs	r0, #0
   8143e:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81440:	2001      	movs	r0, #1
   81442:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81444:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81446:	bd10      	pop	{r4, pc}
   81448:	2007ab10 	.word	0x2007ab10
   8144c:	000801f5 	.word	0x000801f5
   81450:	2007aadc 	.word	0x2007aadc

00081454 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81454:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81456:	4b0d      	ldr	r3, [pc, #52]	; (8148c <prvCheckForValidListAndQueue+0x38>)
   81458:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8145a:	4b0d      	ldr	r3, [pc, #52]	; (81490 <prvCheckForValidListAndQueue+0x3c>)
   8145c:	681b      	ldr	r3, [r3, #0]
   8145e:	b98b      	cbnz	r3, 81484 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81460:	4d0c      	ldr	r5, [pc, #48]	; (81494 <prvCheckForValidListAndQueue+0x40>)
   81462:	4628      	mov	r0, r5
   81464:	4e0c      	ldr	r6, [pc, #48]	; (81498 <prvCheckForValidListAndQueue+0x44>)
   81466:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81468:	4c0c      	ldr	r4, [pc, #48]	; (8149c <prvCheckForValidListAndQueue+0x48>)
   8146a:	4620      	mov	r0, r4
   8146c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8146e:	4b0c      	ldr	r3, [pc, #48]	; (814a0 <prvCheckForValidListAndQueue+0x4c>)
   81470:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81472:	4b0c      	ldr	r3, [pc, #48]	; (814a4 <prvCheckForValidListAndQueue+0x50>)
   81474:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81476:	2005      	movs	r0, #5
   81478:	210c      	movs	r1, #12
   8147a:	2200      	movs	r2, #0
   8147c:	4b0a      	ldr	r3, [pc, #40]	; (814a8 <prvCheckForValidListAndQueue+0x54>)
   8147e:	4798      	blx	r3
   81480:	4b03      	ldr	r3, [pc, #12]	; (81490 <prvCheckForValidListAndQueue+0x3c>)
   81482:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81484:	4b09      	ldr	r3, [pc, #36]	; (814ac <prvCheckForValidListAndQueue+0x58>)
   81486:	4798      	blx	r3
   81488:	bd70      	pop	{r4, r5, r6, pc}
   8148a:	bf00      	nop
   8148c:	000802c9 	.word	0x000802c9
   81490:	2007ab0c 	.word	0x2007ab0c
   81494:	2007aae0 	.word	0x2007aae0
   81498:	000801b9 	.word	0x000801b9
   8149c:	2007aaf4 	.word	0x2007aaf4
   814a0:	2007aadc 	.word	0x2007aadc
   814a4:	2007ab10 	.word	0x2007ab10
   814a8:	000806ad 	.word	0x000806ad
   814ac:	000802e9 	.word	0x000802e9

000814b0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   814b0:	b510      	push	{r4, lr}
   814b2:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   814b4:	4b0b      	ldr	r3, [pc, #44]	; (814e4 <xTimerCreateTimerTask+0x34>)
   814b6:	4798      	blx	r3

	if( xTimerQueue != NULL )
   814b8:	4b0b      	ldr	r3, [pc, #44]	; (814e8 <xTimerCreateTimerTask+0x38>)
   814ba:	681b      	ldr	r3, [r3, #0]
   814bc:	b163      	cbz	r3, 814d8 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   814be:	2304      	movs	r3, #4
   814c0:	9300      	str	r3, [sp, #0]
   814c2:	2300      	movs	r3, #0
   814c4:	9301      	str	r3, [sp, #4]
   814c6:	9302      	str	r3, [sp, #8]
   814c8:	9303      	str	r3, [sp, #12]
   814ca:	4808      	ldr	r0, [pc, #32]	; (814ec <xTimerCreateTimerTask+0x3c>)
   814cc:	4908      	ldr	r1, [pc, #32]	; (814f0 <xTimerCreateTimerTask+0x40>)
   814ce:	f44f 7282 	mov.w	r2, #260	; 0x104
   814d2:	4c08      	ldr	r4, [pc, #32]	; (814f4 <xTimerCreateTimerTask+0x44>)
   814d4:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   814d6:	b918      	cbnz	r0, 814e0 <xTimerCreateTimerTask+0x30>
   814d8:	4b07      	ldr	r3, [pc, #28]	; (814f8 <xTimerCreateTimerTask+0x48>)
   814da:	4798      	blx	r3
   814dc:	bf00      	nop
   814de:	e7fd      	b.n	814dc <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   814e0:	b004      	add	sp, #16
   814e2:	bd10      	pop	{r4, pc}
   814e4:	00081455 	.word	0x00081455
   814e8:	2007ab0c 	.word	0x2007ab0c
   814ec:	00081605 	.word	0x00081605
   814f0:	000855a0 	.word	0x000855a0
   814f4:	00080ab5 	.word	0x00080ab5
   814f8:	000802b9 	.word	0x000802b9

000814fc <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   814fc:	b530      	push	{r4, r5, lr}
   814fe:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81500:	4c0f      	ldr	r4, [pc, #60]	; (81540 <xTimerGenericCommand+0x44>)
   81502:	6825      	ldr	r5, [r4, #0]
   81504:	b1c5      	cbz	r5, 81538 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81506:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81508:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   8150a:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   8150c:	b96b      	cbnz	r3, 8152a <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8150e:	4b0d      	ldr	r3, [pc, #52]	; (81544 <xTimerGenericCommand+0x48>)
   81510:	4798      	blx	r3
   81512:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81514:	4b0a      	ldr	r3, [pc, #40]	; (81540 <xTimerGenericCommand+0x44>)
   81516:	6818      	ldr	r0, [r3, #0]
   81518:	a901      	add	r1, sp, #4
   8151a:	bf07      	ittee	eq
   8151c:	9a08      	ldreq	r2, [sp, #32]
   8151e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81520:	2200      	movne	r2, #0
   81522:	4613      	movne	r3, r2
   81524:	4c08      	ldr	r4, [pc, #32]	; (81548 <xTimerGenericCommand+0x4c>)
   81526:	47a0      	blx	r4
   81528:	e007      	b.n	8153a <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8152a:	4628      	mov	r0, r5
   8152c:	a901      	add	r1, sp, #4
   8152e:	461a      	mov	r2, r3
   81530:	2300      	movs	r3, #0
   81532:	4c06      	ldr	r4, [pc, #24]	; (8154c <xTimerGenericCommand+0x50>)
   81534:	47a0      	blx	r4
   81536:	e000      	b.n	8153a <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81538:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   8153a:	b005      	add	sp, #20
   8153c:	bd30      	pop	{r4, r5, pc}
   8153e:	bf00      	nop
   81540:	2007ab0c 	.word	0x2007ab0c
   81544:	00081319 	.word	0x00081319
   81548:	00080705 	.word	0x00080705
   8154c:	00080825 	.word	0x00080825

00081550 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81554:	b082      	sub	sp, #8
   81556:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81558:	4b22      	ldr	r3, [pc, #136]	; (815e4 <prvSampleTimeNow+0x94>)
   8155a:	4798      	blx	r3
   8155c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   8155e:	4b22      	ldr	r3, [pc, #136]	; (815e8 <prvSampleTimeNow+0x98>)
   81560:	681b      	ldr	r3, [r3, #0]
   81562:	4298      	cmp	r0, r3
   81564:	d234      	bcs.n	815d0 <prvSampleTimeNow+0x80>
   81566:	e024      	b.n	815b2 <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81568:	68da      	ldr	r2, [r3, #12]
   8156a:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8156e:	68db      	ldr	r3, [r3, #12]
   81570:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81572:	1d25      	adds	r5, r4, #4
   81574:	4628      	mov	r0, r5
   81576:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81578:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8157a:	4620      	mov	r0, r4
   8157c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8157e:	69e3      	ldr	r3, [r4, #28]
   81580:	2b01      	cmp	r3, #1
   81582:	d118      	bne.n	815b6 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81584:	69a3      	ldr	r3, [r4, #24]
   81586:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81588:	4553      	cmp	r3, sl
   8158a:	d906      	bls.n	8159a <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8158c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8158e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81590:	6830      	ldr	r0, [r6, #0]
   81592:	4629      	mov	r1, r5
   81594:	4b15      	ldr	r3, [pc, #84]	; (815ec <prvSampleTimeNow+0x9c>)
   81596:	4798      	blx	r3
   81598:	e00d      	b.n	815b6 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8159a:	2300      	movs	r3, #0
   8159c:	9300      	str	r3, [sp, #0]
   8159e:	4620      	mov	r0, r4
   815a0:	4619      	mov	r1, r3
   815a2:	4652      	mov	r2, sl
   815a4:	4c12      	ldr	r4, [pc, #72]	; (815f0 <prvSampleTimeNow+0xa0>)
   815a6:	47a0      	blx	r4
				configASSERT( xResult );
   815a8:	b928      	cbnz	r0, 815b6 <prvSampleTimeNow+0x66>
   815aa:	4b12      	ldr	r3, [pc, #72]	; (815f4 <prvSampleTimeNow+0xa4>)
   815ac:	4798      	blx	r3
   815ae:	bf00      	nop
   815b0:	e7fd      	b.n	815ae <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   815b2:	4e11      	ldr	r6, [pc, #68]	; (815f8 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   815b4:	4f11      	ldr	r7, [pc, #68]	; (815fc <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   815b6:	6833      	ldr	r3, [r6, #0]
   815b8:	681a      	ldr	r2, [r3, #0]
   815ba:	2a00      	cmp	r2, #0
   815bc:	d1d4      	bne.n	81568 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   815be:	4a10      	ldr	r2, [pc, #64]	; (81600 <prvSampleTimeNow+0xb0>)
   815c0:	6810      	ldr	r0, [r2, #0]
   815c2:	490d      	ldr	r1, [pc, #52]	; (815f8 <prvSampleTimeNow+0xa8>)
   815c4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   815c6:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   815c8:	2301      	movs	r3, #1
   815ca:	f8c9 3000 	str.w	r3, [r9]
   815ce:	e002      	b.n	815d6 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   815d0:	2300      	movs	r3, #0
   815d2:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   815d6:	4b04      	ldr	r3, [pc, #16]	; (815e8 <prvSampleTimeNow+0x98>)
   815d8:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   815dc:	4640      	mov	r0, r8
   815de:	b002      	add	sp, #8
   815e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   815e4:	00080d31 	.word	0x00080d31
   815e8:	2007ab08 	.word	0x2007ab08
   815ec:	000801f5 	.word	0x000801f5
   815f0:	000814fd 	.word	0x000814fd
   815f4:	000802b9 	.word	0x000802b9
   815f8:	2007aadc 	.word	0x2007aadc
   815fc:	00080231 	.word	0x00080231
   81600:	2007ab10 	.word	0x2007ab10

00081604 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81608:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8160a:	4d4d      	ldr	r5, [pc, #308]	; (81740 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8160c:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81770 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81610:	4b4c      	ldr	r3, [pc, #304]	; (81744 <prvTimerTask+0x140>)
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81616:	2a00      	cmp	r2, #0
   81618:	f000 8087 	beq.w	8172a <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8161c:	68db      	ldr	r3, [r3, #12]
   8161e:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81620:	4b49      	ldr	r3, [pc, #292]	; (81748 <prvTimerTask+0x144>)
   81622:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81624:	a803      	add	r0, sp, #12
   81626:	4b49      	ldr	r3, [pc, #292]	; (8174c <prvTimerTask+0x148>)
   81628:	4798      	blx	r3
   8162a:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8162c:	9b03      	ldr	r3, [sp, #12]
   8162e:	2b00      	cmp	r3, #0
   81630:	d130      	bne.n	81694 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81632:	4286      	cmp	r6, r0
   81634:	d824      	bhi.n	81680 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   81636:	4b46      	ldr	r3, [pc, #280]	; (81750 <prvTimerTask+0x14c>)
   81638:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8163a:	4b42      	ldr	r3, [pc, #264]	; (81744 <prvTimerTask+0x140>)
   8163c:	681b      	ldr	r3, [r3, #0]
   8163e:	68db      	ldr	r3, [r3, #12]
   81640:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81642:	1d20      	adds	r0, r4, #4
   81644:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81646:	69e3      	ldr	r3, [r4, #28]
   81648:	2b01      	cmp	r3, #1
   8164a:	d114      	bne.n	81676 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8164c:	69a1      	ldr	r1, [r4, #24]
   8164e:	4620      	mov	r0, r4
   81650:	4431      	add	r1, r6
   81652:	463a      	mov	r2, r7
   81654:	4633      	mov	r3, r6
   81656:	4f3f      	ldr	r7, [pc, #252]	; (81754 <prvTimerTask+0x150>)
   81658:	47b8      	blx	r7
   8165a:	2801      	cmp	r0, #1
   8165c:	d10b      	bne.n	81676 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8165e:	2300      	movs	r3, #0
   81660:	9300      	str	r3, [sp, #0]
   81662:	4620      	mov	r0, r4
   81664:	4619      	mov	r1, r3
   81666:	4632      	mov	r2, r6
   81668:	4e3b      	ldr	r6, [pc, #236]	; (81758 <prvTimerTask+0x154>)
   8166a:	47b0      	blx	r6
			configASSERT( xResult );
   8166c:	b918      	cbnz	r0, 81676 <prvTimerTask+0x72>
   8166e:	4b3b      	ldr	r3, [pc, #236]	; (8175c <prvTimerTask+0x158>)
   81670:	4798      	blx	r3
   81672:	bf00      	nop
   81674:	e7fd      	b.n	81672 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81676:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81678:	4620      	mov	r0, r4
   8167a:	4798      	blx	r3
   8167c:	e00c      	b.n	81698 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   8167e:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81680:	6828      	ldr	r0, [r5, #0]
   81682:	1bf1      	subs	r1, r6, r7
   81684:	4b36      	ldr	r3, [pc, #216]	; (81760 <prvTimerTask+0x15c>)
   81686:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81688:	4b31      	ldr	r3, [pc, #196]	; (81750 <prvTimerTask+0x14c>)
   8168a:	4798      	blx	r3
   8168c:	b920      	cbnz	r0, 81698 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   8168e:	4b35      	ldr	r3, [pc, #212]	; (81764 <prvTimerTask+0x160>)
   81690:	4798      	blx	r3
   81692:	e001      	b.n	81698 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81694:	4b2e      	ldr	r3, [pc, #184]	; (81750 <prvTimerTask+0x14c>)
   81696:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81698:	a802      	add	r0, sp, #8
   8169a:	4b2c      	ldr	r3, [pc, #176]	; (8174c <prvTimerTask+0x148>)
   8169c:	4798      	blx	r3
   8169e:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   816a0:	4e31      	ldr	r6, [pc, #196]	; (81768 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   816a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81754 <prvTimerTask+0x150>
   816a6:	e038      	b.n	8171a <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   816a8:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   816aa:	b11c      	cbz	r4, 816b4 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   816ac:	6963      	ldr	r3, [r4, #20]
   816ae:	b10b      	cbz	r3, 816b4 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   816b0:	1d20      	adds	r0, r4, #4
   816b2:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   816b4:	9b03      	ldr	r3, [sp, #12]
   816b6:	2b02      	cmp	r3, #2
   816b8:	d01f      	beq.n	816fa <prvTimerTask+0xf6>
   816ba:	2b03      	cmp	r3, #3
   816bc:	d02a      	beq.n	81714 <prvTimerTask+0x110>
   816be:	2b00      	cmp	r3, #0
   816c0:	d12b      	bne.n	8171a <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   816c2:	9b04      	ldr	r3, [sp, #16]
   816c4:	69a1      	ldr	r1, [r4, #24]
   816c6:	4620      	mov	r0, r4
   816c8:	4419      	add	r1, r3
   816ca:	463a      	mov	r2, r7
   816cc:	47c8      	blx	r9
   816ce:	2801      	cmp	r0, #1
   816d0:	d123      	bne.n	8171a <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   816d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   816d4:	4620      	mov	r0, r4
   816d6:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   816d8:	69e3      	ldr	r3, [r4, #28]
   816da:	2b01      	cmp	r3, #1
   816dc:	d11d      	bne.n	8171a <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   816de:	69a2      	ldr	r2, [r4, #24]
   816e0:	2300      	movs	r3, #0
   816e2:	9300      	str	r3, [sp, #0]
   816e4:	4620      	mov	r0, r4
   816e6:	4619      	mov	r1, r3
   816e8:	9c04      	ldr	r4, [sp, #16]
   816ea:	4422      	add	r2, r4
   816ec:	4c1a      	ldr	r4, [pc, #104]	; (81758 <prvTimerTask+0x154>)
   816ee:	47a0      	blx	r4
						configASSERT( xResult );
   816f0:	b998      	cbnz	r0, 8171a <prvTimerTask+0x116>
   816f2:	4b1a      	ldr	r3, [pc, #104]	; (8175c <prvTimerTask+0x158>)
   816f4:	4798      	blx	r3
   816f6:	bf00      	nop
   816f8:	e7fd      	b.n	816f6 <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   816fa:	9904      	ldr	r1, [sp, #16]
   816fc:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   816fe:	b919      	cbnz	r1, 81708 <prvTimerTask+0x104>
   81700:	4b16      	ldr	r3, [pc, #88]	; (8175c <prvTimerTask+0x158>)
   81702:	4798      	blx	r3
   81704:	bf00      	nop
   81706:	e7fd      	b.n	81704 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81708:	4620      	mov	r0, r4
   8170a:	4439      	add	r1, r7
   8170c:	463a      	mov	r2, r7
   8170e:	463b      	mov	r3, r7
   81710:	47c8      	blx	r9
   81712:	e002      	b.n	8171a <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81714:	4620      	mov	r0, r4
   81716:	4b15      	ldr	r3, [pc, #84]	; (8176c <prvTimerTask+0x168>)
   81718:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8171a:	6828      	ldr	r0, [r5, #0]
   8171c:	a903      	add	r1, sp, #12
   8171e:	2200      	movs	r2, #0
   81720:	4613      	mov	r3, r2
   81722:	47b0      	blx	r6
   81724:	2800      	cmp	r0, #0
   81726:	d1bf      	bne.n	816a8 <prvTimerTask+0xa4>
   81728:	e772      	b.n	81610 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8172a:	4b07      	ldr	r3, [pc, #28]	; (81748 <prvTimerTask+0x144>)
   8172c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8172e:	a803      	add	r0, sp, #12
   81730:	4b06      	ldr	r3, [pc, #24]	; (8174c <prvTimerTask+0x148>)
   81732:	4798      	blx	r3
   81734:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81736:	9b03      	ldr	r3, [sp, #12]
   81738:	2b00      	cmp	r3, #0
   8173a:	d0a0      	beq.n	8167e <prvTimerTask+0x7a>
   8173c:	e7aa      	b.n	81694 <prvTimerTask+0x90>
   8173e:	bf00      	nop
   81740:	2007ab0c 	.word	0x2007ab0c
   81744:	2007aadc 	.word	0x2007aadc
   81748:	00080d21 	.word	0x00080d21
   8174c:	00081551 	.word	0x00081551
   81750:	00080e71 	.word	0x00080e71
   81754:	00081409 	.word	0x00081409
   81758:	000814fd 	.word	0x000814fd
   8175c:	000802b9 	.word	0x000802b9
   81760:	00080a11 	.word	0x00080a11
   81764:	000802a9 	.word	0x000802a9
   81768:	000808b5 	.word	0x000808b5
   8176c:	000804dd 	.word	0x000804dd
   81770:	00080231 	.word	0x00080231

00081774 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   81774:	b500      	push	{lr}
   81776:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   81778:	4811      	ldr	r0, [pc, #68]	; (817c0 <USART0_Handler+0x4c>)
   8177a:	f10d 0107 	add.w	r1, sp, #7
   8177e:	2201      	movs	r2, #1
   81780:	4b10      	ldr	r3, [pc, #64]	; (817c4 <USART0_Handler+0x50>)
   81782:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81784:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81786:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8178a:	2200      	movs	r2, #0
   8178c:	4b0e      	ldr	r3, [pc, #56]	; (817c8 <USART0_Handler+0x54>)
   8178e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   81790:	4b0e      	ldr	r3, [pc, #56]	; (817cc <USART0_Handler+0x58>)
   81792:	781b      	ldrb	r3, [r3, #0]
   81794:	f89d 1007 	ldrb.w	r1, [sp, #7]
   81798:	4a0d      	ldr	r2, [pc, #52]	; (817d0 <USART0_Handler+0x5c>)
   8179a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   8179c:	2b9b      	cmp	r3, #155	; 0x9b
   8179e:	d103      	bne.n	817a8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   817a0:	2200      	movs	r2, #0
   817a2:	4b0a      	ldr	r3, [pc, #40]	; (817cc <USART0_Handler+0x58>)
   817a4:	701a      	strb	r2, [r3, #0]
   817a6:	e002      	b.n	817ae <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   817a8:	3301      	adds	r3, #1
   817aa:	4a08      	ldr	r2, [pc, #32]	; (817cc <USART0_Handler+0x58>)
   817ac:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   817ae:	2201      	movs	r2, #1
   817b0:	4b05      	ldr	r3, [pc, #20]	; (817c8 <USART0_Handler+0x54>)
   817b2:	701a      	strb	r2, [r3, #0]
   817b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   817b8:	b662      	cpsie	i
}
   817ba:	b003      	add	sp, #12
   817bc:	f85d fb04 	ldr.w	pc, [sp], #4
   817c0:	40098000 	.word	0x40098000
   817c4:	00081a71 	.word	0x00081a71
   817c8:	2007013c 	.word	0x2007013c
   817cc:	2007abb0 	.word	0x2007abb0
   817d0:	2007ab14 	.word	0x2007ab14

000817d4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   817d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   817d6:	b083      	sub	sp, #12
   817d8:	4604      	mov	r4, r0
   817da:	460d      	mov	r5, r1
	uint32_t val = 0;
   817dc:	2300      	movs	r3, #0
   817de:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   817e0:	4b1f      	ldr	r3, [pc, #124]	; (81860 <usart_serial_getchar+0x8c>)
   817e2:	4298      	cmp	r0, r3
   817e4:	d107      	bne.n	817f6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   817e6:	461f      	mov	r7, r3
   817e8:	4e1e      	ldr	r6, [pc, #120]	; (81864 <usart_serial_getchar+0x90>)
   817ea:	4638      	mov	r0, r7
   817ec:	4629      	mov	r1, r5
   817ee:	47b0      	blx	r6
   817f0:	2800      	cmp	r0, #0
   817f2:	d1fa      	bne.n	817ea <usart_serial_getchar+0x16>
   817f4:	e019      	b.n	8182a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   817f6:	4b1c      	ldr	r3, [pc, #112]	; (81868 <usart_serial_getchar+0x94>)
   817f8:	4298      	cmp	r0, r3
   817fa:	d109      	bne.n	81810 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   817fc:	461f      	mov	r7, r3
   817fe:	4e1b      	ldr	r6, [pc, #108]	; (8186c <usart_serial_getchar+0x98>)
   81800:	4638      	mov	r0, r7
   81802:	a901      	add	r1, sp, #4
   81804:	47b0      	blx	r6
   81806:	2800      	cmp	r0, #0
   81808:	d1fa      	bne.n	81800 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8180a:	9b01      	ldr	r3, [sp, #4]
   8180c:	702b      	strb	r3, [r5, #0]
   8180e:	e019      	b.n	81844 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81810:	4b17      	ldr	r3, [pc, #92]	; (81870 <usart_serial_getchar+0x9c>)
   81812:	4298      	cmp	r0, r3
   81814:	d109      	bne.n	8182a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81816:	461e      	mov	r6, r3
   81818:	4c14      	ldr	r4, [pc, #80]	; (8186c <usart_serial_getchar+0x98>)
   8181a:	4630      	mov	r0, r6
   8181c:	a901      	add	r1, sp, #4
   8181e:	47a0      	blx	r4
   81820:	2800      	cmp	r0, #0
   81822:	d1fa      	bne.n	8181a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81824:	9b01      	ldr	r3, [sp, #4]
   81826:	702b      	strb	r3, [r5, #0]
   81828:	e018      	b.n	8185c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8182a:	4b12      	ldr	r3, [pc, #72]	; (81874 <usart_serial_getchar+0xa0>)
   8182c:	429c      	cmp	r4, r3
   8182e:	d109      	bne.n	81844 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81830:	461e      	mov	r6, r3
   81832:	4c0e      	ldr	r4, [pc, #56]	; (8186c <usart_serial_getchar+0x98>)
   81834:	4630      	mov	r0, r6
   81836:	a901      	add	r1, sp, #4
   81838:	47a0      	blx	r4
   8183a:	2800      	cmp	r0, #0
   8183c:	d1fa      	bne.n	81834 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8183e:	9b01      	ldr	r3, [sp, #4]
   81840:	702b      	strb	r3, [r5, #0]
   81842:	e00b      	b.n	8185c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81844:	4b0c      	ldr	r3, [pc, #48]	; (81878 <usart_serial_getchar+0xa4>)
   81846:	429c      	cmp	r4, r3
   81848:	d108      	bne.n	8185c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8184a:	461e      	mov	r6, r3
   8184c:	4c07      	ldr	r4, [pc, #28]	; (8186c <usart_serial_getchar+0x98>)
   8184e:	4630      	mov	r0, r6
   81850:	a901      	add	r1, sp, #4
   81852:	47a0      	blx	r4
   81854:	2800      	cmp	r0, #0
   81856:	d1fa      	bne.n	8184e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81858:	9b01      	ldr	r3, [sp, #4]
   8185a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8185c:	b003      	add	sp, #12
   8185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81860:	400e0800 	.word	0x400e0800
   81864:	00081c29 	.word	0x00081c29
   81868:	40098000 	.word	0x40098000
   8186c:	000801a1 	.word	0x000801a1
   81870:	4009c000 	.word	0x4009c000
   81874:	400a0000 	.word	0x400a0000
   81878:	400a4000 	.word	0x400a4000

0008187c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8187c:	b570      	push	{r4, r5, r6, lr}
   8187e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81880:	4b1e      	ldr	r3, [pc, #120]	; (818fc <usart_serial_putchar+0x80>)
   81882:	4298      	cmp	r0, r3
   81884:	d108      	bne.n	81898 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   81886:	461e      	mov	r6, r3
   81888:	4d1d      	ldr	r5, [pc, #116]	; (81900 <usart_serial_putchar+0x84>)
   8188a:	4630      	mov	r0, r6
   8188c:	4621      	mov	r1, r4
   8188e:	47a8      	blx	r5
   81890:	2800      	cmp	r0, #0
   81892:	d1fa      	bne.n	8188a <usart_serial_putchar+0xe>
		return 1;
   81894:	2001      	movs	r0, #1
   81896:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81898:	4b1a      	ldr	r3, [pc, #104]	; (81904 <usart_serial_putchar+0x88>)
   8189a:	4298      	cmp	r0, r3
   8189c:	d108      	bne.n	818b0 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   8189e:	461e      	mov	r6, r3
   818a0:	4d19      	ldr	r5, [pc, #100]	; (81908 <usart_serial_putchar+0x8c>)
   818a2:	4630      	mov	r0, r6
   818a4:	4621      	mov	r1, r4
   818a6:	47a8      	blx	r5
   818a8:	2800      	cmp	r0, #0
   818aa:	d1fa      	bne.n	818a2 <usart_serial_putchar+0x26>
		return 1;
   818ac:	2001      	movs	r0, #1
   818ae:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   818b0:	4b16      	ldr	r3, [pc, #88]	; (8190c <usart_serial_putchar+0x90>)
   818b2:	4298      	cmp	r0, r3
   818b4:	d108      	bne.n	818c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   818b6:	461e      	mov	r6, r3
   818b8:	4d13      	ldr	r5, [pc, #76]	; (81908 <usart_serial_putchar+0x8c>)
   818ba:	4630      	mov	r0, r6
   818bc:	4621      	mov	r1, r4
   818be:	47a8      	blx	r5
   818c0:	2800      	cmp	r0, #0
   818c2:	d1fa      	bne.n	818ba <usart_serial_putchar+0x3e>
		return 1;
   818c4:	2001      	movs	r0, #1
   818c6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   818c8:	4b11      	ldr	r3, [pc, #68]	; (81910 <usart_serial_putchar+0x94>)
   818ca:	4298      	cmp	r0, r3
   818cc:	d108      	bne.n	818e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   818ce:	461e      	mov	r6, r3
   818d0:	4d0d      	ldr	r5, [pc, #52]	; (81908 <usart_serial_putchar+0x8c>)
   818d2:	4630      	mov	r0, r6
   818d4:	4621      	mov	r1, r4
   818d6:	47a8      	blx	r5
   818d8:	2800      	cmp	r0, #0
   818da:	d1fa      	bne.n	818d2 <usart_serial_putchar+0x56>
		return 1;
   818dc:	2001      	movs	r0, #1
   818de:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   818e0:	4b0c      	ldr	r3, [pc, #48]	; (81914 <usart_serial_putchar+0x98>)
   818e2:	4298      	cmp	r0, r3
   818e4:	d108      	bne.n	818f8 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   818e6:	461e      	mov	r6, r3
   818e8:	4d07      	ldr	r5, [pc, #28]	; (81908 <usart_serial_putchar+0x8c>)
   818ea:	4630      	mov	r0, r6
   818ec:	4621      	mov	r1, r4
   818ee:	47a8      	blx	r5
   818f0:	2800      	cmp	r0, #0
   818f2:	d1fa      	bne.n	818ea <usart_serial_putchar+0x6e>
		return 1;
   818f4:	2001      	movs	r0, #1
   818f6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   818f8:	2000      	movs	r0, #0
}
   818fa:	bd70      	pop	{r4, r5, r6, pc}
   818fc:	400e0800 	.word	0x400e0800
   81900:	00081c19 	.word	0x00081c19
   81904:	40098000 	.word	0x40098000
   81908:	0008018d 	.word	0x0008018d
   8190c:	4009c000 	.word	0x4009c000
   81910:	400a0000 	.word	0x400a0000
   81914:	400a4000 	.word	0x400a4000

00081918 <configure_console>:
 */ 
#include <asf.h>

void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   81918:	b530      	push	{r4, r5, lr}
   8191a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8191c:	2008      	movs	r0, #8
   8191e:	4d12      	ldr	r5, [pc, #72]	; (81968 <configure_console+0x50>)
   81920:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81922:	4c12      	ldr	r4, [pc, #72]	; (8196c <configure_console+0x54>)
   81924:	4b12      	ldr	r3, [pc, #72]	; (81970 <configure_console+0x58>)
   81926:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81928:	4a12      	ldr	r2, [pc, #72]	; (81974 <configure_console+0x5c>)
   8192a:	4b13      	ldr	r3, [pc, #76]	; (81978 <configure_console+0x60>)
   8192c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8192e:	4a13      	ldr	r2, [pc, #76]	; (8197c <configure_console+0x64>)
   81930:	4b13      	ldr	r3, [pc, #76]	; (81980 <configure_console+0x68>)
   81932:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81934:	4b13      	ldr	r3, [pc, #76]	; (81984 <configure_console+0x6c>)
   81936:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81938:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8193c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8193e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81942:	9303      	str	r3, [sp, #12]
   81944:	2008      	movs	r0, #8
   81946:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81948:	4620      	mov	r0, r4
   8194a:	a901      	add	r1, sp, #4
   8194c:	4b0e      	ldr	r3, [pc, #56]	; (81988 <configure_console+0x70>)
   8194e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81950:	4d0e      	ldr	r5, [pc, #56]	; (8198c <configure_console+0x74>)
   81952:	682b      	ldr	r3, [r5, #0]
   81954:	6898      	ldr	r0, [r3, #8]
   81956:	2100      	movs	r1, #0
   81958:	4c0d      	ldr	r4, [pc, #52]	; (81990 <configure_console+0x78>)
   8195a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8195c:	682b      	ldr	r3, [r5, #0]
   8195e:	6858      	ldr	r0, [r3, #4]
   81960:	2100      	movs	r1, #0
   81962:	47a0      	blx	r4
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
   81964:	b005      	add	sp, #20
   81966:	bd30      	pop	{r4, r5, pc}
   81968:	000820b5 	.word	0x000820b5
   8196c:	400e0800 	.word	0x400e0800
   81970:	2007ac64 	.word	0x2007ac64
   81974:	0008187d 	.word	0x0008187d
   81978:	2007ac60 	.word	0x2007ac60
   8197c:	000817d5 	.word	0x000817d5
   81980:	2007ac5c 	.word	0x2007ac5c
   81984:	0501bd00 	.word	0x0501bd00
   81988:	00081be1 	.word	0x00081be1
   8198c:	20070570 	.word	0x20070570
   81990:	000825b9 	.word	0x000825b9

00081994 <task_com>:
#include "sync.h"
#include <string.h>

/* This task sends controller values to PC for logging*/
void task_com(void *pvParameters)
{	
   81994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81998:	b086      	sub	sp, #24
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 50;	
	xLastWakeTime = xTaskGetTickCount();
   8199a:	4b11      	ldr	r3, [pc, #68]	; (819e0 <task_com+0x4c>)
   8199c:	4798      	blx	r3
   8199e:	9005      	str	r0, [sp, #20]
	char str[20] = {0};
   819a0:	2300      	movs	r3, #0
   819a2:	9300      	str	r3, [sp, #0]
   819a4:	9301      	str	r3, [sp, #4]
   819a6:	9302      	str	r3, [sp, #8]
   819a8:	9303      	str	r3, [sp, #12]
   819aa:	9304      	str	r3, [sp, #16]
	
	while(1)
	{	
		gets(str);
   819ac:	f8df 8048 	ldr.w	r8, [pc, #72]	; 819f8 <task_com+0x64>
		char* token;
		token = strsep(&str, ":");
   819b0:	4f0c      	ldr	r7, [pc, #48]	; (819e4 <task_com+0x50>)
   819b2:	4e0d      	ldr	r6, [pc, #52]	; (819e8 <task_com+0x54>)
	xLastWakeTime = xTaskGetTickCount();
	char str[20] = {0};
	
	while(1)
	{	
		gets(str);
   819b4:	4668      	mov	r0, sp
   819b6:	47c0      	blx	r8
		char* token;
		token = strsep(&str, ":");
   819b8:	4668      	mov	r0, sp
   819ba:	4639      	mov	r1, r7
   819bc:	47b0      	blx	r6
		printf(token);
   819be:	4c0b      	ldr	r4, [pc, #44]	; (819ec <task_com+0x58>)
   819c0:	47a0      	blx	r4
		printf("\n");
   819c2:	4d0b      	ldr	r5, [pc, #44]	; (819f0 <task_com+0x5c>)
   819c4:	4628      	mov	r0, r5
   819c6:	47a0      	blx	r4
		token = strsep(&str, ":");
   819c8:	4668      	mov	r0, sp
   819ca:	4639      	mov	r1, r7
   819cc:	47b0      	blx	r6
		printf(token);
   819ce:	47a0      	blx	r4
		printf("\n");
   819d0:	4628      	mov	r0, r5
   819d2:	47a0      	blx	r4

		/* Sleep for some time */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);		
   819d4:	a805      	add	r0, sp, #20
   819d6:	2132      	movs	r1, #50	; 0x32
   819d8:	4b06      	ldr	r3, [pc, #24]	; (819f4 <task_com+0x60>)
   819da:	4798      	blx	r3
	}
   819dc:	e7ea      	b.n	819b4 <task_com+0x20>
   819de:	bf00      	nop
   819e0:	00080d31 	.word	0x00080d31
   819e4:	000855a8 	.word	0x000855a8
   819e8:	00082785 	.word	0x00082785
   819ec:	000823d5 	.word	0x000823d5
   819f0:	00085590 	.word	0x00085590
   819f4:	00080f75 	.word	0x00080f75
   819f8:	00082375 	.word	0x00082375

000819fc <task_regulate>:

/* This task reads an analog value, filters it 
 * and calculates PID value for fan PWM 
 */
void task_regulate(void *pvParameters)
{
   819fc:	b570      	push	{r4, r5, r6, lr}
   819fe:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 50;
	xLastWakeTime = xTaskGetTickCount();
   81a00:	4b05      	ldr	r3, [pc, #20]	; (81a18 <task_regulate+0x1c>)
   81a02:	4798      	blx	r3
   81a04:	ac02      	add	r4, sp, #8
   81a06:	f844 0d04 	str.w	r0, [r4, #-4]!
	
	while(1){		
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   81a0a:	2632      	movs	r6, #50	; 0x32
   81a0c:	4d03      	ldr	r5, [pc, #12]	; (81a1c <task_regulate+0x20>)
   81a0e:	4620      	mov	r0, r4
   81a10:	4631      	mov	r1, r6
   81a12:	47a8      	blx	r5
	}
   81a14:	e7fb      	b.n	81a0e <task_regulate+0x12>
   81a16:	bf00      	nop
   81a18:	00080d31 	.word	0x00080d31
   81a1c:	00080f75 	.word	0x00080f75

00081a20 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81a20:	3801      	subs	r0, #1
   81a22:	2802      	cmp	r0, #2
   81a24:	d818      	bhi.n	81a58 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81a2a:	460e      	mov	r6, r1
   81a2c:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81a2e:	b182      	cbz	r2, 81a52 <_write+0x32>
   81a30:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81a32:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81a6c <_write+0x4c>
   81a36:	4f0c      	ldr	r7, [pc, #48]	; (81a68 <_write+0x48>)
   81a38:	f8d8 0000 	ldr.w	r0, [r8]
   81a3c:	f815 1b01 	ldrb.w	r1, [r5], #1
   81a40:	683b      	ldr	r3, [r7, #0]
   81a42:	4798      	blx	r3
   81a44:	2800      	cmp	r0, #0
   81a46:	db0a      	blt.n	81a5e <_write+0x3e>
   81a48:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81a4a:	3c01      	subs	r4, #1
   81a4c:	d1f4      	bne.n	81a38 <_write+0x18>
   81a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a52:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   81a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81a58:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   81a5c:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81a5e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   81a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a66:	bf00      	nop
   81a68:	2007ac60 	.word	0x2007ac60
   81a6c:	2007ac64 	.word	0x2007ac64

00081a70 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   81a70:	2a00      	cmp	r2, #0
   81a72:	d04e      	beq.n	81b12 <usart_serial_read_packet+0xa2>
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   81a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a78:	b085      	sub	sp, #20
   81a7a:	4606      	mov	r6, r0
   81a7c:	460d      	mov	r5, r1
   81a7e:	4617      	mov	r7, r2

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81a80:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 81b28 <usart_serial_read_packet+0xb8>
		while (uart_read((Uart*)p_usart, data));
   81a84:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 81b2c <usart_serial_read_packet+0xbc>
   81a88:	f8cd a000 	str.w	sl, [sp]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81a8c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 81b30 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
   81a90:	4c21      	ldr	r4, [pc, #132]	; (81b18 <usart_serial_read_packet+0xa8>)
   81a92:	f8cd b004 	str.w	fp, [sp, #4]
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   81a96:	2300      	movs	r3, #0
   81a98:	9303      	str	r3, [sp, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81a9a:	4556      	cmp	r6, sl
   81a9c:	d105      	bne.n	81aaa <usart_serial_read_packet+0x3a>
		while (uart_read((Uart*)p_usart, data));
   81a9e:	9800      	ldr	r0, [sp, #0]
   81aa0:	4629      	mov	r1, r5
   81aa2:	47c8      	blx	r9
   81aa4:	2800      	cmp	r0, #0
   81aa6:	d1fa      	bne.n	81a9e <usart_serial_read_packet+0x2e>
   81aa8:	e015      	b.n	81ad6 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81aaa:	455e      	cmp	r6, fp
   81aac:	d107      	bne.n	81abe <usart_serial_read_packet+0x4e>
		while (usart_read(p_usart, &val));
   81aae:	9801      	ldr	r0, [sp, #4]
   81ab0:	a903      	add	r1, sp, #12
   81ab2:	47a0      	blx	r4
   81ab4:	2800      	cmp	r0, #0
   81ab6:	d1fa      	bne.n	81aae <usart_serial_read_packet+0x3e>
		*data = (uint8_t)(val & 0xFF);
   81ab8:	9b03      	ldr	r3, [sp, #12]
   81aba:	702b      	strb	r3, [r5, #0]
   81abc:	e017      	b.n	81aee <usart_serial_read_packet+0x7e>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81abe:	4b17      	ldr	r3, [pc, #92]	; (81b1c <usart_serial_read_packet+0xac>)
   81ac0:	429e      	cmp	r6, r3
   81ac2:	d108      	bne.n	81ad6 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
   81ac4:	4698      	mov	r8, r3
   81ac6:	4640      	mov	r0, r8
   81ac8:	a903      	add	r1, sp, #12
   81aca:	47a0      	blx	r4
   81acc:	2800      	cmp	r0, #0
   81ace:	d1fa      	bne.n	81ac6 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
   81ad0:	9b03      	ldr	r3, [sp, #12]
   81ad2:	702b      	strb	r3, [r5, #0]
   81ad4:	e016      	b.n	81b04 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81ad6:	4b12      	ldr	r3, [pc, #72]	; (81b20 <usart_serial_read_packet+0xb0>)
   81ad8:	429e      	cmp	r6, r3
   81ada:	d108      	bne.n	81aee <usart_serial_read_packet+0x7e>
		while (usart_read(p_usart, &val));
   81adc:	4698      	mov	r8, r3
   81ade:	4640      	mov	r0, r8
   81ae0:	a903      	add	r1, sp, #12
   81ae2:	47a0      	blx	r4
   81ae4:	2800      	cmp	r0, #0
   81ae6:	d1fa      	bne.n	81ade <usart_serial_read_packet+0x6e>
		*data = (uint8_t)(val & 0xFF);
   81ae8:	9b03      	ldr	r3, [sp, #12]
   81aea:	702b      	strb	r3, [r5, #0]
   81aec:	e00a      	b.n	81b04 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81aee:	4b0d      	ldr	r3, [pc, #52]	; (81b24 <usart_serial_read_packet+0xb4>)
   81af0:	429e      	cmp	r6, r3
   81af2:	d107      	bne.n	81b04 <usart_serial_read_packet+0x94>
		while (usart_read(p_usart, &val));
   81af4:	4698      	mov	r8, r3
   81af6:	4640      	mov	r0, r8
   81af8:	a903      	add	r1, sp, #12
   81afa:	47a0      	blx	r4
   81afc:	2800      	cmp	r0, #0
   81afe:	d1fa      	bne.n	81af6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   81b00:	9b03      	ldr	r3, [sp, #12]
   81b02:	702b      	strb	r3, [r5, #0]
	while (len) {
		usart_serial_getchar(usart, data);
		len--;
		data++;
   81b04:	3501      	adds	r5, #1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   81b06:	3f01      	subs	r7, #1
   81b08:	d1c5      	bne.n	81a96 <usart_serial_read_packet+0x26>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   81b0a:	2000      	movs	r0, #0
   81b0c:	b005      	add	sp, #20
   81b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b12:	2000      	movs	r0, #0
   81b14:	4770      	bx	lr
   81b16:	bf00      	nop
   81b18:	000801a1 	.word	0x000801a1
   81b1c:	4009c000 	.word	0x4009c000
   81b20:	400a0000 	.word	0x400a0000
   81b24:	400a4000 	.word	0x400a4000
   81b28:	400e0800 	.word	0x400e0800
   81b2c:	00081c29 	.word	0x00081c29
   81b30:	40098000 	.word	0x40098000

00081b34 <main>:

uint16_t cha_reading;
uint16_t chb_reading;

int main (void)
{
   81b34:	b530      	push	{r4, r5, lr}
   81b36:	b085      	sub	sp, #20
	/* Initialize board and all functions that will be used */
	sysclk_init();
   81b38:	4b1c      	ldr	r3, [pc, #112]	; (81bac <main+0x78>)
   81b3a:	4798      	blx	r3
	board_init();
   81b3c:	4b1c      	ldr	r3, [pc, #112]	; (81bb0 <main+0x7c>)
   81b3e:	4798      	blx	r3
	configure_console();
   81b40:	4b1c      	ldr	r3, [pc, #112]	; (81bb4 <main+0x80>)
   81b42:	4798      	blx	r3
   81b44:	200b      	movs	r0, #11
   81b46:	4c1c      	ldr	r4, [pc, #112]	; (81bb8 <main+0x84>)
   81b48:	47a0      	blx	r4
   81b4a:	200c      	movs	r0, #12
   81b4c:	47a0      	blx	r4
   81b4e:	200d      	movs	r0, #13
   81b50:	47a0      	blx	r4
   81b52:	200e      	movs	r0, #14
   81b54:	47a0      	blx	r4
	ioport_init();
	delay_init(sysclk_get_cpu_hz());
	
	/* Configure RTOS tasks and start tasks */
	vSemaphoreCreateBinary(sync);
   81b56:	2001      	movs	r0, #1
   81b58:	2100      	movs	r1, #0
   81b5a:	2203      	movs	r2, #3
   81b5c:	4b17      	ldr	r3, [pc, #92]	; (81bbc <main+0x88>)
   81b5e:	4798      	blx	r3
   81b60:	4b17      	ldr	r3, [pc, #92]	; (81bc0 <main+0x8c>)
   81b62:	6018      	str	r0, [r3, #0]
   81b64:	b120      	cbz	r0, 81b70 <main+0x3c>
   81b66:	2100      	movs	r1, #0
   81b68:	460a      	mov	r2, r1
   81b6a:	460b      	mov	r3, r1
   81b6c:	4c15      	ldr	r4, [pc, #84]	; (81bc4 <main+0x90>)
   81b6e:	47a0      	blx	r4
	xTaskCreate(task_com, (const signed char * const) "Com", TASK_STACKSIZE, NULL, 1, NULL);	
   81b70:	2301      	movs	r3, #1
   81b72:	9300      	str	r3, [sp, #0]
   81b74:	2400      	movs	r4, #0
   81b76:	9401      	str	r4, [sp, #4]
   81b78:	9402      	str	r4, [sp, #8]
   81b7a:	9403      	str	r4, [sp, #12]
   81b7c:	4812      	ldr	r0, [pc, #72]	; (81bc8 <main+0x94>)
   81b7e:	4913      	ldr	r1, [pc, #76]	; (81bcc <main+0x98>)
   81b80:	f44f 7200 	mov.w	r2, #512	; 0x200
   81b84:	4623      	mov	r3, r4
   81b86:	4d12      	ldr	r5, [pc, #72]	; (81bd0 <main+0x9c>)
   81b88:	47a8      	blx	r5
	xTaskCreate(task_regulate, (const signed char * const) "Regulate", TASK_STACKSIZE,NULL,2,NULL);	
   81b8a:	2302      	movs	r3, #2
   81b8c:	9300      	str	r3, [sp, #0]
   81b8e:	9401      	str	r4, [sp, #4]
   81b90:	9402      	str	r4, [sp, #8]
   81b92:	9403      	str	r4, [sp, #12]
   81b94:	480f      	ldr	r0, [pc, #60]	; (81bd4 <main+0xa0>)
   81b96:	4910      	ldr	r1, [pc, #64]	; (81bd8 <main+0xa4>)
   81b98:	f44f 7200 	mov.w	r2, #512	; 0x200
   81b9c:	4623      	mov	r3, r4
   81b9e:	47a8      	blx	r5
	vTaskStartScheduler();	
   81ba0:	4b0e      	ldr	r3, [pc, #56]	; (81bdc <main+0xa8>)
   81ba2:	4798      	blx	r3
}
   81ba4:	4620      	mov	r0, r4
   81ba6:	b005      	add	sp, #20
   81ba8:	bd30      	pop	{r4, r5, pc}
   81baa:	bf00      	nop
   81bac:	00081c3d 	.word	0x00081c3d
   81bb0:	00081ca1 	.word	0x00081ca1
   81bb4:	00081919 	.word	0x00081919
   81bb8:	000820b5 	.word	0x000820b5
   81bbc:	000806ad 	.word	0x000806ad
   81bc0:	20070138 	.word	0x20070138
   81bc4:	00080705 	.word	0x00080705
   81bc8:	00081995 	.word	0x00081995
   81bcc:	000855ac 	.word	0x000855ac
   81bd0:	00080ab5 	.word	0x00080ab5
   81bd4:	000819fd 	.word	0x000819fd
   81bd8:	000855b0 	.word	0x000855b0
   81bdc:	00080cb9 	.word	0x00080cb9

00081be0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81be0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81be2:	23ac      	movs	r3, #172	; 0xac
   81be4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81be6:	680b      	ldr	r3, [r1, #0]
   81be8:	684a      	ldr	r2, [r1, #4]
   81bea:	fbb3 f3f2 	udiv	r3, r3, r2
   81bee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81bf0:	1e5c      	subs	r4, r3, #1
   81bf2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81bf6:	4294      	cmp	r4, r2
   81bf8:	d80a      	bhi.n	81c10 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81bfa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81bfc:	688b      	ldr	r3, [r1, #8]
   81bfe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81c00:	f240 2302 	movw	r3, #514	; 0x202
   81c04:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81c08:	2350      	movs	r3, #80	; 0x50
   81c0a:	6003      	str	r3, [r0, #0]

	return 0;
   81c0c:	2000      	movs	r0, #0
   81c0e:	e000      	b.n	81c12 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81c10:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81c12:	f85d 4b04 	ldr.w	r4, [sp], #4
   81c16:	4770      	bx	lr

00081c18 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81c18:	6943      	ldr	r3, [r0, #20]
   81c1a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81c1e:	bf1a      	itte	ne
   81c20:	61c1      	strne	r1, [r0, #28]
	return 0;
   81c22:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81c24:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81c26:	4770      	bx	lr

00081c28 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81c28:	6943      	ldr	r3, [r0, #20]
   81c2a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81c2e:	bf1d      	ittte	ne
   81c30:	6983      	ldrne	r3, [r0, #24]
   81c32:	700b      	strbne	r3, [r1, #0]
	return 0;
   81c34:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81c36:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81c38:	4770      	bx	lr
   81c3a:	bf00      	nop

00081c3c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81c3c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81c3e:	480e      	ldr	r0, [pc, #56]	; (81c78 <sysclk_init+0x3c>)
   81c40:	4b0e      	ldr	r3, [pc, #56]	; (81c7c <sysclk_init+0x40>)
   81c42:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81c44:	2000      	movs	r0, #0
   81c46:	213e      	movs	r1, #62	; 0x3e
   81c48:	4b0d      	ldr	r3, [pc, #52]	; (81c80 <sysclk_init+0x44>)
   81c4a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81c4c:	4c0d      	ldr	r4, [pc, #52]	; (81c84 <sysclk_init+0x48>)
   81c4e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81c50:	2800      	cmp	r0, #0
   81c52:	d0fc      	beq.n	81c4e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81c54:	4b0c      	ldr	r3, [pc, #48]	; (81c88 <sysclk_init+0x4c>)
   81c56:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81c58:	4a0c      	ldr	r2, [pc, #48]	; (81c8c <sysclk_init+0x50>)
   81c5a:	4b0d      	ldr	r3, [pc, #52]	; (81c90 <sysclk_init+0x54>)
   81c5c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81c5e:	4c0d      	ldr	r4, [pc, #52]	; (81c94 <sysclk_init+0x58>)
   81c60:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81c62:	2800      	cmp	r0, #0
   81c64:	d0fc      	beq.n	81c60 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81c66:	2010      	movs	r0, #16
   81c68:	4b0b      	ldr	r3, [pc, #44]	; (81c98 <sysclk_init+0x5c>)
   81c6a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81c6c:	4b0b      	ldr	r3, [pc, #44]	; (81c9c <sysclk_init+0x60>)
   81c6e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81c70:	4801      	ldr	r0, [pc, #4]	; (81c78 <sysclk_init+0x3c>)
   81c72:	4b02      	ldr	r3, [pc, #8]	; (81c7c <sysclk_init+0x40>)
   81c74:	4798      	blx	r3
   81c76:	bd10      	pop	{r4, pc}
   81c78:	0501bd00 	.word	0x0501bd00
   81c7c:	200700a5 	.word	0x200700a5
   81c80:	00082031 	.word	0x00082031
   81c84:	00082085 	.word	0x00082085
   81c88:	00082095 	.word	0x00082095
   81c8c:	200d3f01 	.word	0x200d3f01
   81c90:	400e0600 	.word	0x400e0600
   81c94:	000820a5 	.word	0x000820a5
   81c98:	00081fc9 	.word	0x00081fc9
   81c9c:	000821bd 	.word	0x000821bd

00081ca0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81ca0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81ca6:	4b12      	ldr	r3, [pc, #72]	; (81cf0 <board_init+0x50>)
   81ca8:	605a      	str	r2, [r3, #4]
   81caa:	200b      	movs	r0, #11
   81cac:	4c11      	ldr	r4, [pc, #68]	; (81cf4 <board_init+0x54>)
   81cae:	47a0      	blx	r4
   81cb0:	200c      	movs	r0, #12
   81cb2:	47a0      	blx	r4
   81cb4:	200d      	movs	r0, #13
   81cb6:	47a0      	blx	r4
   81cb8:	200e      	movs	r0, #14
   81cba:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81cbc:	203b      	movs	r0, #59	; 0x3b
   81cbe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81cc2:	4c0d      	ldr	r4, [pc, #52]	; (81cf8 <board_init+0x58>)
   81cc4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81cc6:	2055      	movs	r0, #85	; 0x55
   81cc8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81ccc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81cce:	2056      	movs	r0, #86	; 0x56
   81cd0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81cd4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81cd6:	2068      	movs	r0, #104	; 0x68
   81cd8:	4908      	ldr	r1, [pc, #32]	; (81cfc <board_init+0x5c>)
   81cda:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81cdc:	205c      	movs	r0, #92	; 0x5c
   81cde:	4908      	ldr	r1, [pc, #32]	; (81d00 <board_init+0x60>)
   81ce0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81ce2:	4808      	ldr	r0, [pc, #32]	; (81d04 <board_init+0x64>)
   81ce4:	f44f 7140 	mov.w	r1, #768	; 0x300
   81ce8:	4a07      	ldr	r2, [pc, #28]	; (81d08 <board_init+0x68>)
   81cea:	4b08      	ldr	r3, [pc, #32]	; (81d0c <board_init+0x6c>)
   81cec:	4798      	blx	r3
   81cee:	bd10      	pop	{r4, pc}
   81cf0:	400e1a50 	.word	0x400e1a50
   81cf4:	000820b5 	.word	0x000820b5
   81cf8:	00081db5 	.word	0x00081db5
   81cfc:	28000079 	.word	0x28000079
   81d00:	28000001 	.word	0x28000001
   81d04:	400e0e00 	.word	0x400e0e00
   81d08:	08000001 	.word	0x08000001
   81d0c:	00081e89 	.word	0x00081e89

00081d10 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81d10:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81d12:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81d16:	d016      	beq.n	81d46 <pio_set_peripheral+0x36>
   81d18:	d804      	bhi.n	81d24 <pio_set_peripheral+0x14>
   81d1a:	b1c1      	cbz	r1, 81d4e <pio_set_peripheral+0x3e>
   81d1c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81d20:	d00a      	beq.n	81d38 <pio_set_peripheral+0x28>
   81d22:	e013      	b.n	81d4c <pio_set_peripheral+0x3c>
   81d24:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81d28:	d011      	beq.n	81d4e <pio_set_peripheral+0x3e>
   81d2a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81d2e:	d00e      	beq.n	81d4e <pio_set_peripheral+0x3e>
   81d30:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81d34:	d10a      	bne.n	81d4c <pio_set_peripheral+0x3c>
   81d36:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81d38:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81d3a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81d3c:	400b      	ands	r3, r1
   81d3e:	ea23 0302 	bic.w	r3, r3, r2
   81d42:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81d44:	e002      	b.n	81d4c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81d46:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81d48:	4313      	orrs	r3, r2
   81d4a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81d4c:	6042      	str	r2, [r0, #4]
   81d4e:	4770      	bx	lr

00081d50 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81d50:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81d52:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81d56:	bf14      	ite	ne
   81d58:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81d5a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81d5c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81d60:	bf14      	ite	ne
   81d62:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81d64:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81d66:	f012 0f02 	tst.w	r2, #2
   81d6a:	d002      	beq.n	81d72 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81d6c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81d70:	e004      	b.n	81d7c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81d72:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81d76:	bf18      	it	ne
   81d78:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81d7c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81d7e:	6001      	str	r1, [r0, #0]
   81d80:	4770      	bx	lr
   81d82:	bf00      	nop

00081d84 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81d84:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81d86:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81d88:	9c01      	ldr	r4, [sp, #4]
   81d8a:	b10c      	cbz	r4, 81d90 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81d8c:	6641      	str	r1, [r0, #100]	; 0x64
   81d8e:	e000      	b.n	81d92 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81d90:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81d92:	b10b      	cbz	r3, 81d98 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81d94:	6501      	str	r1, [r0, #80]	; 0x50
   81d96:	e000      	b.n	81d9a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81d98:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81d9a:	b10a      	cbz	r2, 81da0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81d9c:	6301      	str	r1, [r0, #48]	; 0x30
   81d9e:	e000      	b.n	81da2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81da0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81da2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81da4:	6001      	str	r1, [r0, #0]
}
   81da6:	f85d 4b04 	ldr.w	r4, [sp], #4
   81daa:	4770      	bx	lr

00081dac <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81dac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81dae:	4770      	bx	lr

00081db0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81db0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81db2:	4770      	bx	lr

00081db4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81db4:	b570      	push	{r4, r5, r6, lr}
   81db6:	b082      	sub	sp, #8
   81db8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81dba:	0943      	lsrs	r3, r0, #5
   81dbc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81dc0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81dc4:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81dc6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81dca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81dce:	d030      	beq.n	81e32 <pio_configure_pin+0x7e>
   81dd0:	d806      	bhi.n	81de0 <pio_configure_pin+0x2c>
   81dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81dd6:	d00a      	beq.n	81dee <pio_configure_pin+0x3a>
   81dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ddc:	d018      	beq.n	81e10 <pio_configure_pin+0x5c>
   81dde:	e049      	b.n	81e74 <pio_configure_pin+0xc0>
   81de0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81de4:	d030      	beq.n	81e48 <pio_configure_pin+0x94>
   81de6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81dea:	d02d      	beq.n	81e48 <pio_configure_pin+0x94>
   81dec:	e042      	b.n	81e74 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81dee:	f000 001f 	and.w	r0, r0, #31
   81df2:	2601      	movs	r6, #1
   81df4:	4086      	lsls	r6, r0
   81df6:	4620      	mov	r0, r4
   81df8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81dfc:	4632      	mov	r2, r6
   81dfe:	4b1f      	ldr	r3, [pc, #124]	; (81e7c <pio_configure_pin+0xc8>)
   81e00:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81e02:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81e06:	bf14      	ite	ne
   81e08:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81e0a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81e0c:	2001      	movs	r0, #1
   81e0e:	e032      	b.n	81e76 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81e10:	f000 001f 	and.w	r0, r0, #31
   81e14:	2601      	movs	r6, #1
   81e16:	4086      	lsls	r6, r0
   81e18:	4620      	mov	r0, r4
   81e1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81e1e:	4632      	mov	r2, r6
   81e20:	4b16      	ldr	r3, [pc, #88]	; (81e7c <pio_configure_pin+0xc8>)
   81e22:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81e24:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81e28:	bf14      	ite	ne
   81e2a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81e2c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81e2e:	2001      	movs	r0, #1
   81e30:	e021      	b.n	81e76 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81e32:	f000 031f 	and.w	r3, r0, #31
   81e36:	2601      	movs	r6, #1
   81e38:	4620      	mov	r0, r4
   81e3a:	fa06 f103 	lsl.w	r1, r6, r3
   81e3e:	462a      	mov	r2, r5
   81e40:	4b0f      	ldr	r3, [pc, #60]	; (81e80 <pio_configure_pin+0xcc>)
   81e42:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81e44:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81e46:	e016      	b.n	81e76 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81e48:	f000 031f 	and.w	r3, r0, #31
   81e4c:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81e4e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81e52:	ea05 0106 	and.w	r1, r5, r6
   81e56:	9100      	str	r1, [sp, #0]
   81e58:	4620      	mov	r0, r4
   81e5a:	fa06 f103 	lsl.w	r1, r6, r3
   81e5e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81e62:	bf14      	ite	ne
   81e64:	2200      	movne	r2, #0
   81e66:	2201      	moveq	r2, #1
   81e68:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81e6c:	4c05      	ldr	r4, [pc, #20]	; (81e84 <pio_configure_pin+0xd0>)
   81e6e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81e70:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81e72:	e000      	b.n	81e76 <pio_configure_pin+0xc2>

	default:
		return 0;
   81e74:	2000      	movs	r0, #0
	}

	return 1;
}
   81e76:	b002      	add	sp, #8
   81e78:	bd70      	pop	{r4, r5, r6, pc}
   81e7a:	bf00      	nop
   81e7c:	00081d11 	.word	0x00081d11
   81e80:	00081d51 	.word	0x00081d51
   81e84:	00081d85 	.word	0x00081d85

00081e88 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81e88:	b570      	push	{r4, r5, r6, lr}
   81e8a:	b082      	sub	sp, #8
   81e8c:	4606      	mov	r6, r0
   81e8e:	460d      	mov	r5, r1
   81e90:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81e92:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81e96:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81e9a:	d026      	beq.n	81eea <pio_configure_pin_group+0x62>
   81e9c:	d806      	bhi.n	81eac <pio_configure_pin_group+0x24>
   81e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ea2:	d00a      	beq.n	81eba <pio_configure_pin_group+0x32>
   81ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ea8:	d013      	beq.n	81ed2 <pio_configure_pin_group+0x4a>
   81eaa:	e034      	b.n	81f16 <pio_configure_pin_group+0x8e>
   81eac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81eb0:	d01f      	beq.n	81ef2 <pio_configure_pin_group+0x6a>
   81eb2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81eb6:	d01c      	beq.n	81ef2 <pio_configure_pin_group+0x6a>
   81eb8:	e02d      	b.n	81f16 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81eba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ebe:	462a      	mov	r2, r5
   81ec0:	4b16      	ldr	r3, [pc, #88]	; (81f1c <pio_configure_pin_group+0x94>)
   81ec2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81ec4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81ec8:	bf14      	ite	ne
   81eca:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81ecc:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81ece:	2001      	movs	r0, #1
   81ed0:	e022      	b.n	81f18 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81ed2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ed6:	462a      	mov	r2, r5
   81ed8:	4b10      	ldr	r3, [pc, #64]	; (81f1c <pio_configure_pin_group+0x94>)
   81eda:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81edc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81ee0:	bf14      	ite	ne
   81ee2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81ee4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81ee6:	2001      	movs	r0, #1
   81ee8:	e016      	b.n	81f18 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81eea:	4b0d      	ldr	r3, [pc, #52]	; (81f20 <pio_configure_pin_group+0x98>)
   81eec:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81eee:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81ef0:	e012      	b.n	81f18 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81ef2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81ef6:	f004 0301 	and.w	r3, r4, #1
   81efa:	9300      	str	r3, [sp, #0]
   81efc:	4630      	mov	r0, r6
   81efe:	4629      	mov	r1, r5
   81f00:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81f04:	bf14      	ite	ne
   81f06:	2200      	movne	r2, #0
   81f08:	2201      	moveq	r2, #1
   81f0a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81f0e:	4c05      	ldr	r4, [pc, #20]	; (81f24 <pio_configure_pin_group+0x9c>)
   81f10:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81f12:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81f14:	e000      	b.n	81f18 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81f16:	2000      	movs	r0, #0
	}

	return 1;
}
   81f18:	b002      	add	sp, #8
   81f1a:	bd70      	pop	{r4, r5, r6, pc}
   81f1c:	00081d11 	.word	0x00081d11
   81f20:	00081d51 	.word	0x00081d51
   81f24:	00081d85 	.word	0x00081d85

00081f28 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f2c:	4604      	mov	r4, r0
   81f2e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81f30:	4b0e      	ldr	r3, [pc, #56]	; (81f6c <pio_handler_process+0x44>)
   81f32:	4798      	blx	r3
   81f34:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81f36:	4620      	mov	r0, r4
   81f38:	4b0d      	ldr	r3, [pc, #52]	; (81f70 <pio_handler_process+0x48>)
   81f3a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81f3c:	4005      	ands	r5, r0
   81f3e:	d013      	beq.n	81f68 <pio_handler_process+0x40>
   81f40:	4c0c      	ldr	r4, [pc, #48]	; (81f74 <pio_handler_process+0x4c>)
   81f42:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81f46:	6823      	ldr	r3, [r4, #0]
   81f48:	4543      	cmp	r3, r8
   81f4a:	d108      	bne.n	81f5e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81f4c:	6861      	ldr	r1, [r4, #4]
   81f4e:	4229      	tst	r1, r5
   81f50:	d005      	beq.n	81f5e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81f52:	68e3      	ldr	r3, [r4, #12]
   81f54:	4640      	mov	r0, r8
   81f56:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81f58:	6863      	ldr	r3, [r4, #4]
   81f5a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81f5e:	42b4      	cmp	r4, r6
   81f60:	d002      	beq.n	81f68 <pio_handler_process+0x40>
   81f62:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81f64:	2d00      	cmp	r5, #0
   81f66:	d1ee      	bne.n	81f46 <pio_handler_process+0x1e>
   81f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f6c:	00081dad 	.word	0x00081dad
   81f70:	00081db1 	.word	0x00081db1
   81f74:	2007abb4 	.word	0x2007abb4

00081f78 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81f78:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81f7a:	4802      	ldr	r0, [pc, #8]	; (81f84 <PIOA_Handler+0xc>)
   81f7c:	210b      	movs	r1, #11
   81f7e:	4b02      	ldr	r3, [pc, #8]	; (81f88 <PIOA_Handler+0x10>)
   81f80:	4798      	blx	r3
   81f82:	bd08      	pop	{r3, pc}
   81f84:	400e0e00 	.word	0x400e0e00
   81f88:	00081f29 	.word	0x00081f29

00081f8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81f8c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81f8e:	4802      	ldr	r0, [pc, #8]	; (81f98 <PIOB_Handler+0xc>)
   81f90:	210c      	movs	r1, #12
   81f92:	4b02      	ldr	r3, [pc, #8]	; (81f9c <PIOB_Handler+0x10>)
   81f94:	4798      	blx	r3
   81f96:	bd08      	pop	{r3, pc}
   81f98:	400e1000 	.word	0x400e1000
   81f9c:	00081f29 	.word	0x00081f29

00081fa0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81fa0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81fa2:	4802      	ldr	r0, [pc, #8]	; (81fac <PIOC_Handler+0xc>)
   81fa4:	210d      	movs	r1, #13
   81fa6:	4b02      	ldr	r3, [pc, #8]	; (81fb0 <PIOC_Handler+0x10>)
   81fa8:	4798      	blx	r3
   81faa:	bd08      	pop	{r3, pc}
   81fac:	400e1200 	.word	0x400e1200
   81fb0:	00081f29 	.word	0x00081f29

00081fb4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81fb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81fb6:	4802      	ldr	r0, [pc, #8]	; (81fc0 <PIOD_Handler+0xc>)
   81fb8:	210e      	movs	r1, #14
   81fba:	4b02      	ldr	r3, [pc, #8]	; (81fc4 <PIOD_Handler+0x10>)
   81fbc:	4798      	blx	r3
   81fbe:	bd08      	pop	{r3, pc}
   81fc0:	400e1400 	.word	0x400e1400
   81fc4:	00081f29 	.word	0x00081f29

00081fc8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81fc8:	4a18      	ldr	r2, [pc, #96]	; (8202c <pmc_switch_mck_to_pllack+0x64>)
   81fca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81fd0:	4318      	orrs	r0, r3
   81fd2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81fd4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81fd6:	f013 0f08 	tst.w	r3, #8
   81fda:	d003      	beq.n	81fe4 <pmc_switch_mck_to_pllack+0x1c>
   81fdc:	e009      	b.n	81ff2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81fde:	3b01      	subs	r3, #1
   81fe0:	d103      	bne.n	81fea <pmc_switch_mck_to_pllack+0x22>
   81fe2:	e01e      	b.n	82022 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81fe8:	4910      	ldr	r1, [pc, #64]	; (8202c <pmc_switch_mck_to_pllack+0x64>)
   81fea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81fec:	f012 0f08 	tst.w	r2, #8
   81ff0:	d0f5      	beq.n	81fde <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81ff2:	4a0e      	ldr	r2, [pc, #56]	; (8202c <pmc_switch_mck_to_pllack+0x64>)
   81ff4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81ff6:	f023 0303 	bic.w	r3, r3, #3
   81ffa:	f043 0302 	orr.w	r3, r3, #2
   81ffe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82000:	6e90      	ldr	r0, [r2, #104]	; 0x68
   82002:	f010 0008 	ands.w	r0, r0, #8
   82006:	d004      	beq.n	82012 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82008:	2000      	movs	r0, #0
   8200a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8200c:	3b01      	subs	r3, #1
   8200e:	d103      	bne.n	82018 <pmc_switch_mck_to_pllack+0x50>
   82010:	e009      	b.n	82026 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82012:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82016:	4905      	ldr	r1, [pc, #20]	; (8202c <pmc_switch_mck_to_pllack+0x64>)
   82018:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8201a:	f012 0f08 	tst.w	r2, #8
   8201e:	d0f5      	beq.n	8200c <pmc_switch_mck_to_pllack+0x44>
   82020:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82022:	2001      	movs	r0, #1
   82024:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82026:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82028:	4770      	bx	lr
   8202a:	bf00      	nop
   8202c:	400e0600 	.word	0x400e0600

00082030 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82030:	b138      	cbz	r0, 82042 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82032:	4911      	ldr	r1, [pc, #68]	; (82078 <pmc_switch_mainck_to_xtal+0x48>)
   82034:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82036:	4a11      	ldr	r2, [pc, #68]	; (8207c <pmc_switch_mainck_to_xtal+0x4c>)
   82038:	401a      	ands	r2, r3
   8203a:	4b11      	ldr	r3, [pc, #68]	; (82080 <pmc_switch_mainck_to_xtal+0x50>)
   8203c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8203e:	620b      	str	r3, [r1, #32]
   82040:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82042:	4a0d      	ldr	r2, [pc, #52]	; (82078 <pmc_switch_mainck_to_xtal+0x48>)
   82044:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82046:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8204a:	f023 0303 	bic.w	r3, r3, #3
   8204e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82052:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82056:	0209      	lsls	r1, r1, #8
   82058:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8205a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8205c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8205e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82060:	f013 0f01 	tst.w	r3, #1
   82064:	d0fb      	beq.n	8205e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82066:	4a04      	ldr	r2, [pc, #16]	; (82078 <pmc_switch_mainck_to_xtal+0x48>)
   82068:	6a13      	ldr	r3, [r2, #32]
   8206a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8206e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82072:	6213      	str	r3, [r2, #32]
   82074:	4770      	bx	lr
   82076:	bf00      	nop
   82078:	400e0600 	.word	0x400e0600
   8207c:	fec8fffc 	.word	0xfec8fffc
   82080:	01370002 	.word	0x01370002

00082084 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82084:	4b02      	ldr	r3, [pc, #8]	; (82090 <pmc_osc_is_ready_mainck+0xc>)
   82086:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82088:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8208c:	4770      	bx	lr
   8208e:	bf00      	nop
   82090:	400e0600 	.word	0x400e0600

00082094 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82094:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82098:	4b01      	ldr	r3, [pc, #4]	; (820a0 <pmc_disable_pllack+0xc>)
   8209a:	629a      	str	r2, [r3, #40]	; 0x28
   8209c:	4770      	bx	lr
   8209e:	bf00      	nop
   820a0:	400e0600 	.word	0x400e0600

000820a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   820a4:	4b02      	ldr	r3, [pc, #8]	; (820b0 <pmc_is_locked_pllack+0xc>)
   820a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   820a8:	f000 0002 	and.w	r0, r0, #2
   820ac:	4770      	bx	lr
   820ae:	bf00      	nop
   820b0:	400e0600 	.word	0x400e0600

000820b4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   820b4:	282c      	cmp	r0, #44	; 0x2c
   820b6:	d81e      	bhi.n	820f6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   820b8:	281f      	cmp	r0, #31
   820ba:	d80c      	bhi.n	820d6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   820bc:	4b11      	ldr	r3, [pc, #68]	; (82104 <pmc_enable_periph_clk+0x50>)
   820be:	699a      	ldr	r2, [r3, #24]
   820c0:	2301      	movs	r3, #1
   820c2:	4083      	lsls	r3, r0
   820c4:	401a      	ands	r2, r3
   820c6:	4293      	cmp	r3, r2
   820c8:	d017      	beq.n	820fa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   820ca:	2301      	movs	r3, #1
   820cc:	4083      	lsls	r3, r0
   820ce:	4a0d      	ldr	r2, [pc, #52]	; (82104 <pmc_enable_periph_clk+0x50>)
   820d0:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   820d2:	2000      	movs	r0, #0
   820d4:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   820d6:	4b0b      	ldr	r3, [pc, #44]	; (82104 <pmc_enable_periph_clk+0x50>)
   820d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   820dc:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   820de:	2301      	movs	r3, #1
   820e0:	4083      	lsls	r3, r0
   820e2:	401a      	ands	r2, r3
   820e4:	4293      	cmp	r3, r2
   820e6:	d00a      	beq.n	820fe <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   820e8:	2301      	movs	r3, #1
   820ea:	4083      	lsls	r3, r0
   820ec:	4a05      	ldr	r2, [pc, #20]	; (82104 <pmc_enable_periph_clk+0x50>)
   820ee:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   820f2:	2000      	movs	r0, #0
   820f4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   820f6:	2001      	movs	r0, #1
   820f8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   820fa:	2000      	movs	r0, #0
   820fc:	4770      	bx	lr
   820fe:	2000      	movs	r0, #0
}
   82100:	4770      	bx	lr
   82102:	bf00      	nop
   82104:	400e0600 	.word	0x400e0600

00082108 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   82108:	e7fe      	b.n	82108 <Dummy_Handler>
   8210a:	bf00      	nop

0008210c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8210c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8210e:	4b1f      	ldr	r3, [pc, #124]	; (8218c <Reset_Handler+0x80>)
   82110:	4a1f      	ldr	r2, [pc, #124]	; (82190 <Reset_Handler+0x84>)
   82112:	429a      	cmp	r2, r3
   82114:	d003      	beq.n	8211e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82116:	4b1f      	ldr	r3, [pc, #124]	; (82194 <Reset_Handler+0x88>)
   82118:	4a1c      	ldr	r2, [pc, #112]	; (8218c <Reset_Handler+0x80>)
   8211a:	429a      	cmp	r2, r3
   8211c:	d304      	bcc.n	82128 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8211e:	4b1e      	ldr	r3, [pc, #120]	; (82198 <Reset_Handler+0x8c>)
   82120:	4a1e      	ldr	r2, [pc, #120]	; (8219c <Reset_Handler+0x90>)
   82122:	429a      	cmp	r2, r3
   82124:	d310      	bcc.n	82148 <Reset_Handler+0x3c>
   82126:	e01b      	b.n	82160 <Reset_Handler+0x54>
   82128:	4918      	ldr	r1, [pc, #96]	; (8218c <Reset_Handler+0x80>)
   8212a:	1d0a      	adds	r2, r1, #4
   8212c:	4b1c      	ldr	r3, [pc, #112]	; (821a0 <Reset_Handler+0x94>)
   8212e:	1a9b      	subs	r3, r3, r2
   82130:	f023 0303 	bic.w	r3, r3, #3
   82134:	3304      	adds	r3, #4
   82136:	4a16      	ldr	r2, [pc, #88]	; (82190 <Reset_Handler+0x84>)
   82138:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8213a:	f852 0b04 	ldr.w	r0, [r2], #4
   8213e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82142:	429a      	cmp	r2, r3
   82144:	d1f9      	bne.n	8213a <Reset_Handler+0x2e>
   82146:	e7ea      	b.n	8211e <Reset_Handler+0x12>
   82148:	4b16      	ldr	r3, [pc, #88]	; (821a4 <Reset_Handler+0x98>)
   8214a:	4a17      	ldr	r2, [pc, #92]	; (821a8 <Reset_Handler+0x9c>)
   8214c:	1ad2      	subs	r2, r2, r3
   8214e:	f022 0203 	bic.w	r2, r2, #3
   82152:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82154:	3b04      	subs	r3, #4
		*pDest++ = 0;
   82156:	2100      	movs	r1, #0
   82158:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8215c:	4293      	cmp	r3, r2
   8215e:	d1fb      	bne.n	82158 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82160:	4b12      	ldr	r3, [pc, #72]	; (821ac <Reset_Handler+0xa0>)
   82162:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82166:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8216a:	4911      	ldr	r1, [pc, #68]	; (821b0 <Reset_Handler+0xa4>)
   8216c:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8216e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82176:	d203      	bcs.n	82180 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82178:	688b      	ldr	r3, [r1, #8]
   8217a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8217e:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82180:	4b0c      	ldr	r3, [pc, #48]	; (821b4 <Reset_Handler+0xa8>)
   82182:	4798      	blx	r3

	/* Branch to main function */
	main();
   82184:	4b0c      	ldr	r3, [pc, #48]	; (821b8 <Reset_Handler+0xac>)
   82186:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82188:	e7fe      	b.n	82188 <Reset_Handler+0x7c>
   8218a:	bf00      	nop
   8218c:	20070000 	.word	0x20070000
   82190:	00085640 	.word	0x00085640
   82194:	200709ac 	.word	0x200709ac
   82198:	2007ac6c 	.word	0x2007ac6c
   8219c:	200709b0 	.word	0x200709b0
   821a0:	200709af 	.word	0x200709af
   821a4:	200709b4 	.word	0x200709b4
   821a8:	2007ac6f 	.word	0x2007ac6f
   821ac:	00080000 	.word	0x00080000
   821b0:	e000ed00 	.word	0xe000ed00
   821b4:	00082385 	.word	0x00082385
   821b8:	00081b35 	.word	0x00081b35

000821bc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   821bc:	4b3e      	ldr	r3, [pc, #248]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   821be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   821c0:	f003 0303 	and.w	r3, r3, #3
   821c4:	2b03      	cmp	r3, #3
   821c6:	d85f      	bhi.n	82288 <SystemCoreClockUpdate+0xcc>
   821c8:	e8df f003 	tbb	[pc, r3]
   821cc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   821d0:	4b3a      	ldr	r3, [pc, #232]	; (822bc <SystemCoreClockUpdate+0x100>)
   821d2:	695b      	ldr	r3, [r3, #20]
   821d4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   821d8:	bf14      	ite	ne
   821da:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   821de:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   821e2:	4b37      	ldr	r3, [pc, #220]	; (822c0 <SystemCoreClockUpdate+0x104>)
   821e4:	601a      	str	r2, [r3, #0]
   821e6:	e04f      	b.n	82288 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   821e8:	4b33      	ldr	r3, [pc, #204]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   821ea:	6a1b      	ldr	r3, [r3, #32]
   821ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   821f0:	d003      	beq.n	821fa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   821f2:	4a34      	ldr	r2, [pc, #208]	; (822c4 <SystemCoreClockUpdate+0x108>)
   821f4:	4b32      	ldr	r3, [pc, #200]	; (822c0 <SystemCoreClockUpdate+0x104>)
   821f6:	601a      	str	r2, [r3, #0]
   821f8:	e046      	b.n	82288 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   821fa:	4a33      	ldr	r2, [pc, #204]	; (822c8 <SystemCoreClockUpdate+0x10c>)
   821fc:	4b30      	ldr	r3, [pc, #192]	; (822c0 <SystemCoreClockUpdate+0x104>)
   821fe:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82200:	4b2d      	ldr	r3, [pc, #180]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   82202:	6a1b      	ldr	r3, [r3, #32]
   82204:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82208:	2b10      	cmp	r3, #16
   8220a:	d002      	beq.n	82212 <SystemCoreClockUpdate+0x56>
   8220c:	2b20      	cmp	r3, #32
   8220e:	d004      	beq.n	8221a <SystemCoreClockUpdate+0x5e>
   82210:	e03a      	b.n	82288 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82212:	4a2e      	ldr	r2, [pc, #184]	; (822cc <SystemCoreClockUpdate+0x110>)
   82214:	4b2a      	ldr	r3, [pc, #168]	; (822c0 <SystemCoreClockUpdate+0x104>)
   82216:	601a      	str	r2, [r3, #0]
				break;
   82218:	e036      	b.n	82288 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8221a:	4a2a      	ldr	r2, [pc, #168]	; (822c4 <SystemCoreClockUpdate+0x108>)
   8221c:	4b28      	ldr	r3, [pc, #160]	; (822c0 <SystemCoreClockUpdate+0x104>)
   8221e:	601a      	str	r2, [r3, #0]
				break;
   82220:	e032      	b.n	82288 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82222:	4b25      	ldr	r3, [pc, #148]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   82224:	6a1b      	ldr	r3, [r3, #32]
   82226:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8222a:	d003      	beq.n	82234 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8222c:	4a25      	ldr	r2, [pc, #148]	; (822c4 <SystemCoreClockUpdate+0x108>)
   8222e:	4b24      	ldr	r3, [pc, #144]	; (822c0 <SystemCoreClockUpdate+0x104>)
   82230:	601a      	str	r2, [r3, #0]
   82232:	e012      	b.n	8225a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82234:	4a24      	ldr	r2, [pc, #144]	; (822c8 <SystemCoreClockUpdate+0x10c>)
   82236:	4b22      	ldr	r3, [pc, #136]	; (822c0 <SystemCoreClockUpdate+0x104>)
   82238:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8223a:	4b1f      	ldr	r3, [pc, #124]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   8223c:	6a1b      	ldr	r3, [r3, #32]
   8223e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82242:	2b10      	cmp	r3, #16
   82244:	d002      	beq.n	8224c <SystemCoreClockUpdate+0x90>
   82246:	2b20      	cmp	r3, #32
   82248:	d004      	beq.n	82254 <SystemCoreClockUpdate+0x98>
   8224a:	e006      	b.n	8225a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8224c:	4a1f      	ldr	r2, [pc, #124]	; (822cc <SystemCoreClockUpdate+0x110>)
   8224e:	4b1c      	ldr	r3, [pc, #112]	; (822c0 <SystemCoreClockUpdate+0x104>)
   82250:	601a      	str	r2, [r3, #0]
				break;
   82252:	e002      	b.n	8225a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82254:	4a1b      	ldr	r2, [pc, #108]	; (822c4 <SystemCoreClockUpdate+0x108>)
   82256:	4b1a      	ldr	r3, [pc, #104]	; (822c0 <SystemCoreClockUpdate+0x104>)
   82258:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8225a:	4b17      	ldr	r3, [pc, #92]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   8225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8225e:	f003 0303 	and.w	r3, r3, #3
   82262:	2b02      	cmp	r3, #2
   82264:	d10d      	bne.n	82282 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82266:	4a14      	ldr	r2, [pc, #80]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   82268:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8226a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8226c:	4814      	ldr	r0, [pc, #80]	; (822c0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8226e:	f3c3 410a 	ubfx	r1, r3, #16, #11
   82272:	6803      	ldr	r3, [r0, #0]
   82274:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82278:	b2d2      	uxtb	r2, r2
   8227a:	fbb3 f3f2 	udiv	r3, r3, r2
   8227e:	6003      	str	r3, [r0, #0]
   82280:	e002      	b.n	82288 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82282:	4a13      	ldr	r2, [pc, #76]	; (822d0 <SystemCoreClockUpdate+0x114>)
   82284:	4b0e      	ldr	r3, [pc, #56]	; (822c0 <SystemCoreClockUpdate+0x104>)
   82286:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82288:	4b0b      	ldr	r3, [pc, #44]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   8228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8228c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82290:	2b70      	cmp	r3, #112	; 0x70
   82292:	d107      	bne.n	822a4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82294:	4a0a      	ldr	r2, [pc, #40]	; (822c0 <SystemCoreClockUpdate+0x104>)
   82296:	6813      	ldr	r3, [r2, #0]
   82298:	490e      	ldr	r1, [pc, #56]	; (822d4 <SystemCoreClockUpdate+0x118>)
   8229a:	fba1 1303 	umull	r1, r3, r1, r3
   8229e:	085b      	lsrs	r3, r3, #1
   822a0:	6013      	str	r3, [r2, #0]
   822a2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   822a4:	4b04      	ldr	r3, [pc, #16]	; (822b8 <SystemCoreClockUpdate+0xfc>)
   822a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   822a8:	4905      	ldr	r1, [pc, #20]	; (822c0 <SystemCoreClockUpdate+0x104>)
   822aa:	f3c2 1202 	ubfx	r2, r2, #4, #3
   822ae:	680b      	ldr	r3, [r1, #0]
   822b0:	40d3      	lsrs	r3, r2
   822b2:	600b      	str	r3, [r1, #0]
   822b4:	4770      	bx	lr
   822b6:	bf00      	nop
   822b8:	400e0600 	.word	0x400e0600
   822bc:	400e1a10 	.word	0x400e1a10
   822c0:	20070140 	.word	0x20070140
   822c4:	00b71b00 	.word	0x00b71b00
   822c8:	003d0900 	.word	0x003d0900
   822cc:	007a1200 	.word	0x007a1200
   822d0:	0e4e1c00 	.word	0x0e4e1c00
   822d4:	aaaaaaab 	.word	0xaaaaaaab

000822d8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   822d8:	4b09      	ldr	r3, [pc, #36]	; (82300 <_sbrk+0x28>)
   822da:	681b      	ldr	r3, [r3, #0]
   822dc:	b913      	cbnz	r3, 822e4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   822de:	4a09      	ldr	r2, [pc, #36]	; (82304 <_sbrk+0x2c>)
   822e0:	4b07      	ldr	r3, [pc, #28]	; (82300 <_sbrk+0x28>)
   822e2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   822e4:	4b06      	ldr	r3, [pc, #24]	; (82300 <_sbrk+0x28>)
   822e6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   822e8:	181a      	adds	r2, r3, r0
   822ea:	4907      	ldr	r1, [pc, #28]	; (82308 <_sbrk+0x30>)
   822ec:	4291      	cmp	r1, r2
   822ee:	db04      	blt.n	822fa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   822f0:	4610      	mov	r0, r2
   822f2:	4a03      	ldr	r2, [pc, #12]	; (82300 <_sbrk+0x28>)
   822f4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   822f6:	4618      	mov	r0, r3
   822f8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   822fa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   822fe:	4770      	bx	lr
   82300:	2007ac24 	.word	0x2007ac24
   82304:	2007cc70 	.word	0x2007cc70
   82308:	20087ffc 	.word	0x20087ffc

0008230c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8230c:	f04f 30ff 	mov.w	r0, #4294967295
   82310:	4770      	bx	lr
   82312:	bf00      	nop

00082314 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82318:	604b      	str	r3, [r1, #4]

	return 0;
}
   8231a:	2000      	movs	r0, #0
   8231c:	4770      	bx	lr
   8231e:	bf00      	nop

00082320 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82320:	2001      	movs	r0, #1
   82322:	4770      	bx	lr

00082324 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82324:	2000      	movs	r0, #0
   82326:	4770      	bx	lr

00082328 <_gets_r>:
   82328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8232a:	460f      	mov	r7, r1
   8232c:	4605      	mov	r5, r0
   8232e:	460c      	mov	r4, r1
   82330:	4e0f      	ldr	r6, [pc, #60]	; (82370 <_gets_r+0x48>)
   82332:	e007      	b.n	82344 <_gets_r+0x1c>
   82334:	680b      	ldr	r3, [r1, #0]
   82336:	1c5a      	adds	r2, r3, #1
   82338:	600a      	str	r2, [r1, #0]
   8233a:	7818      	ldrb	r0, [r3, #0]
   8233c:	280a      	cmp	r0, #10
   8233e:	d011      	beq.n	82364 <_gets_r+0x3c>
   82340:	f804 0b01 	strb.w	r0, [r4], #1
   82344:	6833      	ldr	r3, [r6, #0]
   82346:	6859      	ldr	r1, [r3, #4]
   82348:	684b      	ldr	r3, [r1, #4]
   8234a:	3b01      	subs	r3, #1
   8234c:	2b00      	cmp	r3, #0
   8234e:	604b      	str	r3, [r1, #4]
   82350:	daf0      	bge.n	82334 <_gets_r+0xc>
   82352:	4628      	mov	r0, r5
   82354:	f000 f916 	bl	82584 <__srget_r>
   82358:	280a      	cmp	r0, #10
   8235a:	d003      	beq.n	82364 <_gets_r+0x3c>
   8235c:	1c43      	adds	r3, r0, #1
   8235e:	d1ef      	bne.n	82340 <_gets_r+0x18>
   82360:	42a7      	cmp	r7, r4
   82362:	d003      	beq.n	8236c <_gets_r+0x44>
   82364:	2300      	movs	r3, #0
   82366:	7023      	strb	r3, [r4, #0]
   82368:	4638      	mov	r0, r7
   8236a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8236c:	2000      	movs	r0, #0
   8236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82370:	20070570 	.word	0x20070570

00082374 <gets>:
   82374:	4b02      	ldr	r3, [pc, #8]	; (82380 <gets+0xc>)
   82376:	4601      	mov	r1, r0
   82378:	6818      	ldr	r0, [r3, #0]
   8237a:	f7ff bfd5 	b.w	82328 <_gets_r>
   8237e:	bf00      	nop
   82380:	20070570 	.word	0x20070570

00082384 <__libc_init_array>:
   82384:	b570      	push	{r4, r5, r6, lr}
   82386:	4e0f      	ldr	r6, [pc, #60]	; (823c4 <__libc_init_array+0x40>)
   82388:	4d0f      	ldr	r5, [pc, #60]	; (823c8 <__libc_init_array+0x44>)
   8238a:	1b76      	subs	r6, r6, r5
   8238c:	10b6      	asrs	r6, r6, #2
   8238e:	bf18      	it	ne
   82390:	2400      	movne	r4, #0
   82392:	d005      	beq.n	823a0 <__libc_init_array+0x1c>
   82394:	3401      	adds	r4, #1
   82396:	f855 3b04 	ldr.w	r3, [r5], #4
   8239a:	4798      	blx	r3
   8239c:	42a6      	cmp	r6, r4
   8239e:	d1f9      	bne.n	82394 <__libc_init_array+0x10>
   823a0:	4e0a      	ldr	r6, [pc, #40]	; (823cc <__libc_init_array+0x48>)
   823a2:	4d0b      	ldr	r5, [pc, #44]	; (823d0 <__libc_init_array+0x4c>)
   823a4:	f003 f936 	bl	85614 <_init>
   823a8:	1b76      	subs	r6, r6, r5
   823aa:	10b6      	asrs	r6, r6, #2
   823ac:	bf18      	it	ne
   823ae:	2400      	movne	r4, #0
   823b0:	d006      	beq.n	823c0 <__libc_init_array+0x3c>
   823b2:	3401      	adds	r4, #1
   823b4:	f855 3b04 	ldr.w	r3, [r5], #4
   823b8:	4798      	blx	r3
   823ba:	42a6      	cmp	r6, r4
   823bc:	d1f9      	bne.n	823b2 <__libc_init_array+0x2e>
   823be:	bd70      	pop	{r4, r5, r6, pc}
   823c0:	bd70      	pop	{r4, r5, r6, pc}
   823c2:	bf00      	nop
   823c4:	00085620 	.word	0x00085620
   823c8:	00085620 	.word	0x00085620
   823cc:	00085628 	.word	0x00085628
   823d0:	00085620 	.word	0x00085620

000823d4 <iprintf>:
   823d4:	b40f      	push	{r0, r1, r2, r3}
   823d6:	b510      	push	{r4, lr}
   823d8:	4b07      	ldr	r3, [pc, #28]	; (823f8 <iprintf+0x24>)
   823da:	b082      	sub	sp, #8
   823dc:	ac04      	add	r4, sp, #16
   823de:	f854 2b04 	ldr.w	r2, [r4], #4
   823e2:	6818      	ldr	r0, [r3, #0]
   823e4:	4623      	mov	r3, r4
   823e6:	6881      	ldr	r1, [r0, #8]
   823e8:	9401      	str	r4, [sp, #4]
   823ea:	f000 fa3f 	bl	8286c <_vfiprintf_r>
   823ee:	b002      	add	sp, #8
   823f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   823f4:	b004      	add	sp, #16
   823f6:	4770      	bx	lr
   823f8:	20070570 	.word	0x20070570

000823fc <memcpy>:
   823fc:	4684      	mov	ip, r0
   823fe:	ea41 0300 	orr.w	r3, r1, r0
   82402:	f013 0303 	ands.w	r3, r3, #3
   82406:	d149      	bne.n	8249c <memcpy+0xa0>
   82408:	3a40      	subs	r2, #64	; 0x40
   8240a:	d323      	bcc.n	82454 <memcpy+0x58>
   8240c:	680b      	ldr	r3, [r1, #0]
   8240e:	6003      	str	r3, [r0, #0]
   82410:	684b      	ldr	r3, [r1, #4]
   82412:	6043      	str	r3, [r0, #4]
   82414:	688b      	ldr	r3, [r1, #8]
   82416:	6083      	str	r3, [r0, #8]
   82418:	68cb      	ldr	r3, [r1, #12]
   8241a:	60c3      	str	r3, [r0, #12]
   8241c:	690b      	ldr	r3, [r1, #16]
   8241e:	6103      	str	r3, [r0, #16]
   82420:	694b      	ldr	r3, [r1, #20]
   82422:	6143      	str	r3, [r0, #20]
   82424:	698b      	ldr	r3, [r1, #24]
   82426:	6183      	str	r3, [r0, #24]
   82428:	69cb      	ldr	r3, [r1, #28]
   8242a:	61c3      	str	r3, [r0, #28]
   8242c:	6a0b      	ldr	r3, [r1, #32]
   8242e:	6203      	str	r3, [r0, #32]
   82430:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82432:	6243      	str	r3, [r0, #36]	; 0x24
   82434:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82436:	6283      	str	r3, [r0, #40]	; 0x28
   82438:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8243a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8243c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8243e:	6303      	str	r3, [r0, #48]	; 0x30
   82440:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82442:	6343      	str	r3, [r0, #52]	; 0x34
   82444:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82446:	6383      	str	r3, [r0, #56]	; 0x38
   82448:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8244a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8244c:	3040      	adds	r0, #64	; 0x40
   8244e:	3140      	adds	r1, #64	; 0x40
   82450:	3a40      	subs	r2, #64	; 0x40
   82452:	d2db      	bcs.n	8240c <memcpy+0x10>
   82454:	3230      	adds	r2, #48	; 0x30
   82456:	d30b      	bcc.n	82470 <memcpy+0x74>
   82458:	680b      	ldr	r3, [r1, #0]
   8245a:	6003      	str	r3, [r0, #0]
   8245c:	684b      	ldr	r3, [r1, #4]
   8245e:	6043      	str	r3, [r0, #4]
   82460:	688b      	ldr	r3, [r1, #8]
   82462:	6083      	str	r3, [r0, #8]
   82464:	68cb      	ldr	r3, [r1, #12]
   82466:	60c3      	str	r3, [r0, #12]
   82468:	3010      	adds	r0, #16
   8246a:	3110      	adds	r1, #16
   8246c:	3a10      	subs	r2, #16
   8246e:	d2f3      	bcs.n	82458 <memcpy+0x5c>
   82470:	320c      	adds	r2, #12
   82472:	d305      	bcc.n	82480 <memcpy+0x84>
   82474:	f851 3b04 	ldr.w	r3, [r1], #4
   82478:	f840 3b04 	str.w	r3, [r0], #4
   8247c:	3a04      	subs	r2, #4
   8247e:	d2f9      	bcs.n	82474 <memcpy+0x78>
   82480:	3204      	adds	r2, #4
   82482:	d008      	beq.n	82496 <memcpy+0x9a>
   82484:	07d2      	lsls	r2, r2, #31
   82486:	bf1c      	itt	ne
   82488:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8248c:	f800 3b01 	strbne.w	r3, [r0], #1
   82490:	d301      	bcc.n	82496 <memcpy+0x9a>
   82492:	880b      	ldrh	r3, [r1, #0]
   82494:	8003      	strh	r3, [r0, #0]
   82496:	4660      	mov	r0, ip
   82498:	4770      	bx	lr
   8249a:	bf00      	nop
   8249c:	2a08      	cmp	r2, #8
   8249e:	d313      	bcc.n	824c8 <memcpy+0xcc>
   824a0:	078b      	lsls	r3, r1, #30
   824a2:	d0b1      	beq.n	82408 <memcpy+0xc>
   824a4:	f010 0303 	ands.w	r3, r0, #3
   824a8:	d0ae      	beq.n	82408 <memcpy+0xc>
   824aa:	f1c3 0304 	rsb	r3, r3, #4
   824ae:	1ad2      	subs	r2, r2, r3
   824b0:	07db      	lsls	r3, r3, #31
   824b2:	bf1c      	itt	ne
   824b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   824b8:	f800 3b01 	strbne.w	r3, [r0], #1
   824bc:	d3a4      	bcc.n	82408 <memcpy+0xc>
   824be:	f831 3b02 	ldrh.w	r3, [r1], #2
   824c2:	f820 3b02 	strh.w	r3, [r0], #2
   824c6:	e79f      	b.n	82408 <memcpy+0xc>
   824c8:	3a04      	subs	r2, #4
   824ca:	d3d9      	bcc.n	82480 <memcpy+0x84>
   824cc:	3a01      	subs	r2, #1
   824ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   824d2:	f800 3b01 	strb.w	r3, [r0], #1
   824d6:	d2f9      	bcs.n	824cc <memcpy+0xd0>
   824d8:	780b      	ldrb	r3, [r1, #0]
   824da:	7003      	strb	r3, [r0, #0]
   824dc:	784b      	ldrb	r3, [r1, #1]
   824de:	7043      	strb	r3, [r0, #1]
   824e0:	788b      	ldrb	r3, [r1, #2]
   824e2:	7083      	strb	r3, [r0, #2]
   824e4:	4660      	mov	r0, ip
   824e6:	4770      	bx	lr

000824e8 <memset>:
   824e8:	b470      	push	{r4, r5, r6}
   824ea:	0784      	lsls	r4, r0, #30
   824ec:	d046      	beq.n	8257c <memset+0x94>
   824ee:	1e54      	subs	r4, r2, #1
   824f0:	2a00      	cmp	r2, #0
   824f2:	d041      	beq.n	82578 <memset+0x90>
   824f4:	b2cd      	uxtb	r5, r1
   824f6:	4603      	mov	r3, r0
   824f8:	e002      	b.n	82500 <memset+0x18>
   824fa:	1e62      	subs	r2, r4, #1
   824fc:	b3e4      	cbz	r4, 82578 <memset+0x90>
   824fe:	4614      	mov	r4, r2
   82500:	f803 5b01 	strb.w	r5, [r3], #1
   82504:	079a      	lsls	r2, r3, #30
   82506:	d1f8      	bne.n	824fa <memset+0x12>
   82508:	2c03      	cmp	r4, #3
   8250a:	d92e      	bls.n	8256a <memset+0x82>
   8250c:	b2cd      	uxtb	r5, r1
   8250e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82512:	2c0f      	cmp	r4, #15
   82514:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82518:	d919      	bls.n	8254e <memset+0x66>
   8251a:	4626      	mov	r6, r4
   8251c:	f103 0210 	add.w	r2, r3, #16
   82520:	3e10      	subs	r6, #16
   82522:	2e0f      	cmp	r6, #15
   82524:	f842 5c10 	str.w	r5, [r2, #-16]
   82528:	f842 5c0c 	str.w	r5, [r2, #-12]
   8252c:	f842 5c08 	str.w	r5, [r2, #-8]
   82530:	f842 5c04 	str.w	r5, [r2, #-4]
   82534:	f102 0210 	add.w	r2, r2, #16
   82538:	d8f2      	bhi.n	82520 <memset+0x38>
   8253a:	f1a4 0210 	sub.w	r2, r4, #16
   8253e:	f022 020f 	bic.w	r2, r2, #15
   82542:	f004 040f 	and.w	r4, r4, #15
   82546:	3210      	adds	r2, #16
   82548:	2c03      	cmp	r4, #3
   8254a:	4413      	add	r3, r2
   8254c:	d90d      	bls.n	8256a <memset+0x82>
   8254e:	461e      	mov	r6, r3
   82550:	4622      	mov	r2, r4
   82552:	3a04      	subs	r2, #4
   82554:	2a03      	cmp	r2, #3
   82556:	f846 5b04 	str.w	r5, [r6], #4
   8255a:	d8fa      	bhi.n	82552 <memset+0x6a>
   8255c:	1f22      	subs	r2, r4, #4
   8255e:	f022 0203 	bic.w	r2, r2, #3
   82562:	3204      	adds	r2, #4
   82564:	4413      	add	r3, r2
   82566:	f004 0403 	and.w	r4, r4, #3
   8256a:	b12c      	cbz	r4, 82578 <memset+0x90>
   8256c:	b2c9      	uxtb	r1, r1
   8256e:	441c      	add	r4, r3
   82570:	f803 1b01 	strb.w	r1, [r3], #1
   82574:	42a3      	cmp	r3, r4
   82576:	d1fb      	bne.n	82570 <memset+0x88>
   82578:	bc70      	pop	{r4, r5, r6}
   8257a:	4770      	bx	lr
   8257c:	4614      	mov	r4, r2
   8257e:	4603      	mov	r3, r0
   82580:	e7c2      	b.n	82508 <memset+0x20>
   82582:	bf00      	nop

00082584 <__srget_r>:
   82584:	b538      	push	{r3, r4, r5, lr}
   82586:	460c      	mov	r4, r1
   82588:	4605      	mov	r5, r0
   8258a:	b108      	cbz	r0, 82590 <__srget_r+0xc>
   8258c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8258e:	b163      	cbz	r3, 825aa <__srget_r+0x26>
   82590:	4628      	mov	r0, r5
   82592:	4621      	mov	r1, r4
   82594:	f002 faac 	bl	84af0 <__srefill_r>
   82598:	b950      	cbnz	r0, 825b0 <__srget_r+0x2c>
   8259a:	e894 000c 	ldmia.w	r4, {r2, r3}
   8259e:	3b01      	subs	r3, #1
   825a0:	1c51      	adds	r1, r2, #1
   825a2:	e884 000a 	stmia.w	r4, {r1, r3}
   825a6:	7810      	ldrb	r0, [r2, #0]
   825a8:	bd38      	pop	{r3, r4, r5, pc}
   825aa:	f001 f961 	bl	83870 <__sinit>
   825ae:	e7ef      	b.n	82590 <__srget_r+0xc>
   825b0:	f04f 30ff 	mov.w	r0, #4294967295
   825b4:	bd38      	pop	{r3, r4, r5, pc}
   825b6:	bf00      	nop

000825b8 <setbuf>:
   825b8:	2900      	cmp	r1, #0
   825ba:	bf0c      	ite	eq
   825bc:	2202      	moveq	r2, #2
   825be:	2200      	movne	r2, #0
   825c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   825c4:	f000 b800 	b.w	825c8 <setvbuf>

000825c8 <setvbuf>:
   825c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   825cc:	4d3a      	ldr	r5, [pc, #232]	; (826b8 <setvbuf+0xf0>)
   825ce:	4604      	mov	r4, r0
   825d0:	682e      	ldr	r6, [r5, #0]
   825d2:	4690      	mov	r8, r2
   825d4:	460d      	mov	r5, r1
   825d6:	461f      	mov	r7, r3
   825d8:	b116      	cbz	r6, 825e0 <setvbuf+0x18>
   825da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   825dc:	2b00      	cmp	r3, #0
   825de:	d03c      	beq.n	8265a <setvbuf+0x92>
   825e0:	f1b8 0f02 	cmp.w	r8, #2
   825e4:	d82f      	bhi.n	82646 <setvbuf+0x7e>
   825e6:	2f00      	cmp	r7, #0
   825e8:	db2d      	blt.n	82646 <setvbuf+0x7e>
   825ea:	4621      	mov	r1, r4
   825ec:	4630      	mov	r0, r6
   825ee:	f001 f899 	bl	83724 <_fflush_r>
   825f2:	89a1      	ldrh	r1, [r4, #12]
   825f4:	2300      	movs	r3, #0
   825f6:	6063      	str	r3, [r4, #4]
   825f8:	61a3      	str	r3, [r4, #24]
   825fa:	060b      	lsls	r3, r1, #24
   825fc:	d427      	bmi.n	8264e <setvbuf+0x86>
   825fe:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   82602:	b289      	uxth	r1, r1
   82604:	f1b8 0f02 	cmp.w	r8, #2
   82608:	81a1      	strh	r1, [r4, #12]
   8260a:	d02a      	beq.n	82662 <setvbuf+0x9a>
   8260c:	2d00      	cmp	r5, #0
   8260e:	d036      	beq.n	8267e <setvbuf+0xb6>
   82610:	f1b8 0f01 	cmp.w	r8, #1
   82614:	d011      	beq.n	8263a <setvbuf+0x72>
   82616:	b289      	uxth	r1, r1
   82618:	f001 0008 	and.w	r0, r1, #8
   8261c:	4b27      	ldr	r3, [pc, #156]	; (826bc <setvbuf+0xf4>)
   8261e:	b280      	uxth	r0, r0
   82620:	63f3      	str	r3, [r6, #60]	; 0x3c
   82622:	6025      	str	r5, [r4, #0]
   82624:	6125      	str	r5, [r4, #16]
   82626:	6167      	str	r7, [r4, #20]
   82628:	b178      	cbz	r0, 8264a <setvbuf+0x82>
   8262a:	f011 0f03 	tst.w	r1, #3
   8262e:	bf18      	it	ne
   82630:	2700      	movne	r7, #0
   82632:	2000      	movs	r0, #0
   82634:	60a7      	str	r7, [r4, #8]
   82636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8263a:	f041 0101 	orr.w	r1, r1, #1
   8263e:	427b      	negs	r3, r7
   82640:	81a1      	strh	r1, [r4, #12]
   82642:	61a3      	str	r3, [r4, #24]
   82644:	e7e7      	b.n	82616 <setvbuf+0x4e>
   82646:	f04f 30ff 	mov.w	r0, #4294967295
   8264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8264e:	6921      	ldr	r1, [r4, #16]
   82650:	4630      	mov	r0, r6
   82652:	f001 f9e5 	bl	83a20 <_free_r>
   82656:	89a1      	ldrh	r1, [r4, #12]
   82658:	e7d1      	b.n	825fe <setvbuf+0x36>
   8265a:	4630      	mov	r0, r6
   8265c:	f001 f908 	bl	83870 <__sinit>
   82660:	e7be      	b.n	825e0 <setvbuf+0x18>
   82662:	2000      	movs	r0, #0
   82664:	f104 0343 	add.w	r3, r4, #67	; 0x43
   82668:	f041 0102 	orr.w	r1, r1, #2
   8266c:	2500      	movs	r5, #0
   8266e:	2201      	movs	r2, #1
   82670:	81a1      	strh	r1, [r4, #12]
   82672:	60a5      	str	r5, [r4, #8]
   82674:	6023      	str	r3, [r4, #0]
   82676:	6123      	str	r3, [r4, #16]
   82678:	6162      	str	r2, [r4, #20]
   8267a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8267e:	2f00      	cmp	r7, #0
   82680:	bf08      	it	eq
   82682:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   82686:	4638      	mov	r0, r7
   82688:	f001 fcf8 	bl	8407c <malloc>
   8268c:	4605      	mov	r5, r0
   8268e:	b128      	cbz	r0, 8269c <setvbuf+0xd4>
   82690:	89a1      	ldrh	r1, [r4, #12]
   82692:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   82696:	b289      	uxth	r1, r1
   82698:	81a1      	strh	r1, [r4, #12]
   8269a:	e7b9      	b.n	82610 <setvbuf+0x48>
   8269c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   826a0:	f001 fcec 	bl	8407c <malloc>
   826a4:	4605      	mov	r5, r0
   826a6:	b918      	cbnz	r0, 826b0 <setvbuf+0xe8>
   826a8:	89a1      	ldrh	r1, [r4, #12]
   826aa:	f04f 30ff 	mov.w	r0, #4294967295
   826ae:	e7d9      	b.n	82664 <setvbuf+0x9c>
   826b0:	f44f 6780 	mov.w	r7, #1024	; 0x400
   826b4:	e7ec      	b.n	82690 <setvbuf+0xc8>
   826b6:	bf00      	nop
   826b8:	20070570 	.word	0x20070570
   826bc:	00083775 	.word	0x00083775

000826c0 <strlen>:
   826c0:	f020 0103 	bic.w	r1, r0, #3
   826c4:	f010 0003 	ands.w	r0, r0, #3
   826c8:	f1c0 0000 	rsb	r0, r0, #0
   826cc:	f851 3b04 	ldr.w	r3, [r1], #4
   826d0:	f100 0c04 	add.w	ip, r0, #4
   826d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   826d8:	f06f 0200 	mvn.w	r2, #0
   826dc:	bf1c      	itt	ne
   826de:	fa22 f20c 	lsrne.w	r2, r2, ip
   826e2:	4313      	orrne	r3, r2
   826e4:	f04f 0c01 	mov.w	ip, #1
   826e8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   826ec:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   826f0:	eba3 020c 	sub.w	r2, r3, ip
   826f4:	ea22 0203 	bic.w	r2, r2, r3
   826f8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   826fc:	bf04      	itt	eq
   826fe:	f851 3b04 	ldreq.w	r3, [r1], #4
   82702:	3004      	addeq	r0, #4
   82704:	d0f4      	beq.n	826f0 <strlen+0x30>
   82706:	f1c2 0100 	rsb	r1, r2, #0
   8270a:	ea02 0201 	and.w	r2, r2, r1
   8270e:	fab2 f282 	clz	r2, r2
   82712:	f1c2 021f 	rsb	r2, r2, #31
   82716:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8271a:	4770      	bx	lr

0008271c <strncpy>:
   8271c:	ea40 0301 	orr.w	r3, r0, r1
   82720:	079b      	lsls	r3, r3, #30
   82722:	b470      	push	{r4, r5, r6}
   82724:	d12b      	bne.n	8277e <strncpy+0x62>
   82726:	2a03      	cmp	r2, #3
   82728:	d929      	bls.n	8277e <strncpy+0x62>
   8272a:	460c      	mov	r4, r1
   8272c:	4603      	mov	r3, r0
   8272e:	4621      	mov	r1, r4
   82730:	f854 6b04 	ldr.w	r6, [r4], #4
   82734:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   82738:	ea25 0506 	bic.w	r5, r5, r6
   8273c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   82740:	d105      	bne.n	8274e <strncpy+0x32>
   82742:	3a04      	subs	r2, #4
   82744:	2a03      	cmp	r2, #3
   82746:	f843 6b04 	str.w	r6, [r3], #4
   8274a:	4621      	mov	r1, r4
   8274c:	d8ef      	bhi.n	8272e <strncpy+0x12>
   8274e:	b1a2      	cbz	r2, 8277a <strncpy+0x5e>
   82750:	780c      	ldrb	r4, [r1, #0]
   82752:	3a01      	subs	r2, #1
   82754:	701c      	strb	r4, [r3, #0]
   82756:	3101      	adds	r1, #1
   82758:	3301      	adds	r3, #1
   8275a:	b13c      	cbz	r4, 8276c <strncpy+0x50>
   8275c:	b16a      	cbz	r2, 8277a <strncpy+0x5e>
   8275e:	f811 4b01 	ldrb.w	r4, [r1], #1
   82762:	3a01      	subs	r2, #1
   82764:	f803 4b01 	strb.w	r4, [r3], #1
   82768:	2c00      	cmp	r4, #0
   8276a:	d1f7      	bne.n	8275c <strncpy+0x40>
   8276c:	b12a      	cbz	r2, 8277a <strncpy+0x5e>
   8276e:	441a      	add	r2, r3
   82770:	2100      	movs	r1, #0
   82772:	f803 1b01 	strb.w	r1, [r3], #1
   82776:	4293      	cmp	r3, r2
   82778:	d1fb      	bne.n	82772 <strncpy+0x56>
   8277a:	bc70      	pop	{r4, r5, r6}
   8277c:	4770      	bx	lr
   8277e:	4603      	mov	r3, r0
   82780:	e7e5      	b.n	8274e <strncpy+0x32>
   82782:	bf00      	nop

00082784 <strsep>:
   82784:	4602      	mov	r2, r0
   82786:	2300      	movs	r3, #0
   82788:	6800      	ldr	r0, [r0, #0]
   8278a:	f000 b801 	b.w	82790 <__strtok_r>
   8278e:	bf00      	nop

00082790 <__strtok_r>:
   82790:	b4f0      	push	{r4, r5, r6, r7}
   82792:	b320      	cbz	r0, 827de <__strtok_r+0x4e>
   82794:	4607      	mov	r7, r0
   82796:	460d      	mov	r5, r1
   82798:	f817 6b01 	ldrb.w	r6, [r7], #1
   8279c:	e001      	b.n	827a2 <__strtok_r+0x12>
   8279e:	42a6      	cmp	r6, r4
   827a0:	d016      	beq.n	827d0 <__strtok_r+0x40>
   827a2:	f815 4b01 	ldrb.w	r4, [r5], #1
   827a6:	2c00      	cmp	r4, #0
   827a8:	d1f9      	bne.n	8279e <__strtok_r+0xe>
   827aa:	b1ee      	cbz	r6, 827e8 <__strtok_r+0x58>
   827ac:	463e      	mov	r6, r7
   827ae:	460c      	mov	r4, r1
   827b0:	f816 5b01 	ldrb.w	r5, [r6], #1
   827b4:	e000      	b.n	827b8 <__strtok_r+0x28>
   827b6:	b173      	cbz	r3, 827d6 <__strtok_r+0x46>
   827b8:	f814 3b01 	ldrb.w	r3, [r4], #1
   827bc:	42ab      	cmp	r3, r5
   827be:	d1fa      	bne.n	827b6 <__strtok_r+0x26>
   827c0:	b15d      	cbz	r5, 827da <__strtok_r+0x4a>
   827c2:	2300      	movs	r3, #0
   827c4:	703b      	strb	r3, [r7, #0]
   827c6:	6016      	str	r6, [r2, #0]
   827c8:	4606      	mov	r6, r0
   827ca:	4630      	mov	r0, r6
   827cc:	bcf0      	pop	{r4, r5, r6, r7}
   827ce:	4770      	bx	lr
   827d0:	b163      	cbz	r3, 827ec <__strtok_r+0x5c>
   827d2:	4638      	mov	r0, r7
   827d4:	e7de      	b.n	82794 <__strtok_r+0x4>
   827d6:	4637      	mov	r7, r6
   827d8:	e7e8      	b.n	827ac <__strtok_r+0x1c>
   827da:	462e      	mov	r6, r5
   827dc:	e7f3      	b.n	827c6 <__strtok_r+0x36>
   827de:	6810      	ldr	r0, [r2, #0]
   827e0:	2800      	cmp	r0, #0
   827e2:	d1d7      	bne.n	82794 <__strtok_r+0x4>
   827e4:	4606      	mov	r6, r0
   827e6:	e7f0      	b.n	827ca <__strtok_r+0x3a>
   827e8:	6016      	str	r6, [r2, #0]
   827ea:	e7ee      	b.n	827ca <__strtok_r+0x3a>
   827ec:	6017      	str	r7, [r2, #0]
   827ee:	4606      	mov	r6, r0
   827f0:	7003      	strb	r3, [r0, #0]
   827f2:	e7ea      	b.n	827ca <__strtok_r+0x3a>

000827f4 <__sprint_r.part.0>:
   827f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   827f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   827fa:	049c      	lsls	r4, r3, #18
   827fc:	460f      	mov	r7, r1
   827fe:	4692      	mov	sl, r2
   82800:	d52b      	bpl.n	8285a <__sprint_r.part.0+0x66>
   82802:	6893      	ldr	r3, [r2, #8]
   82804:	6812      	ldr	r2, [r2, #0]
   82806:	b333      	cbz	r3, 82856 <__sprint_r.part.0+0x62>
   82808:	4680      	mov	r8, r0
   8280a:	f102 0908 	add.w	r9, r2, #8
   8280e:	e919 0060 	ldmdb	r9, {r5, r6}
   82812:	08b6      	lsrs	r6, r6, #2
   82814:	d017      	beq.n	82846 <__sprint_r.part.0+0x52>
   82816:	3d04      	subs	r5, #4
   82818:	2400      	movs	r4, #0
   8281a:	e001      	b.n	82820 <__sprint_r.part.0+0x2c>
   8281c:	42a6      	cmp	r6, r4
   8281e:	d010      	beq.n	82842 <__sprint_r.part.0+0x4e>
   82820:	4640      	mov	r0, r8
   82822:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82826:	463a      	mov	r2, r7
   82828:	f001 f89a 	bl	83960 <_fputwc_r>
   8282c:	1c43      	adds	r3, r0, #1
   8282e:	f104 0401 	add.w	r4, r4, #1
   82832:	d1f3      	bne.n	8281c <__sprint_r.part.0+0x28>
   82834:	2300      	movs	r3, #0
   82836:	f8ca 3008 	str.w	r3, [sl, #8]
   8283a:	f8ca 3004 	str.w	r3, [sl, #4]
   8283e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82842:	f8da 3008 	ldr.w	r3, [sl, #8]
   82846:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   8284a:	f8ca 3008 	str.w	r3, [sl, #8]
   8284e:	f109 0908 	add.w	r9, r9, #8
   82852:	2b00      	cmp	r3, #0
   82854:	d1db      	bne.n	8280e <__sprint_r.part.0+0x1a>
   82856:	2000      	movs	r0, #0
   82858:	e7ec      	b.n	82834 <__sprint_r.part.0+0x40>
   8285a:	f001 f9b9 	bl	83bd0 <__sfvwrite_r>
   8285e:	2300      	movs	r3, #0
   82860:	f8ca 3008 	str.w	r3, [sl, #8]
   82864:	f8ca 3004 	str.w	r3, [sl, #4]
   82868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008286c <_vfiprintf_r>:
   8286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82870:	b0ab      	sub	sp, #172	; 0xac
   82872:	461c      	mov	r4, r3
   82874:	9100      	str	r1, [sp, #0]
   82876:	4693      	mov	fp, r2
   82878:	9304      	str	r3, [sp, #16]
   8287a:	9001      	str	r0, [sp, #4]
   8287c:	b118      	cbz	r0, 82886 <_vfiprintf_r+0x1a>
   8287e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82880:	2b00      	cmp	r3, #0
   82882:	f000 80e3 	beq.w	82a4c <_vfiprintf_r+0x1e0>
   82886:	9b00      	ldr	r3, [sp, #0]
   82888:	8999      	ldrh	r1, [r3, #12]
   8288a:	b28a      	uxth	r2, r1
   8288c:	0490      	lsls	r0, r2, #18
   8288e:	d408      	bmi.n	828a2 <_vfiprintf_r+0x36>
   82890:	4618      	mov	r0, r3
   82892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   82894:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   82898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8289c:	8182      	strh	r2, [r0, #12]
   8289e:	6643      	str	r3, [r0, #100]	; 0x64
   828a0:	b292      	uxth	r2, r2
   828a2:	0711      	lsls	r1, r2, #28
   828a4:	f140 80b2 	bpl.w	82a0c <_vfiprintf_r+0x1a0>
   828a8:	9b00      	ldr	r3, [sp, #0]
   828aa:	691b      	ldr	r3, [r3, #16]
   828ac:	2b00      	cmp	r3, #0
   828ae:	f000 80ad 	beq.w	82a0c <_vfiprintf_r+0x1a0>
   828b2:	f002 021a 	and.w	r2, r2, #26
   828b6:	2a0a      	cmp	r2, #10
   828b8:	f000 80b4 	beq.w	82a24 <_vfiprintf_r+0x1b8>
   828bc:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   828c0:	4654      	mov	r4, sl
   828c2:	2300      	movs	r3, #0
   828c4:	9309      	str	r3, [sp, #36]	; 0x24
   828c6:	9302      	str	r3, [sp, #8]
   828c8:	930f      	str	r3, [sp, #60]	; 0x3c
   828ca:	930e      	str	r3, [sp, #56]	; 0x38
   828cc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   828d0:	f89b 3000 	ldrb.w	r3, [fp]
   828d4:	2b00      	cmp	r3, #0
   828d6:	f000 84a3 	beq.w	83220 <_vfiprintf_r+0x9b4>
   828da:	2b25      	cmp	r3, #37	; 0x25
   828dc:	f000 84a0 	beq.w	83220 <_vfiprintf_r+0x9b4>
   828e0:	465a      	mov	r2, fp
   828e2:	e001      	b.n	828e8 <_vfiprintf_r+0x7c>
   828e4:	2b25      	cmp	r3, #37	; 0x25
   828e6:	d003      	beq.n	828f0 <_vfiprintf_r+0x84>
   828e8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   828ec:	2b00      	cmp	r3, #0
   828ee:	d1f9      	bne.n	828e4 <_vfiprintf_r+0x78>
   828f0:	ebcb 0602 	rsb	r6, fp, r2
   828f4:	4615      	mov	r5, r2
   828f6:	b196      	cbz	r6, 8291e <_vfiprintf_r+0xb2>
   828f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   828fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   828fc:	3301      	adds	r3, #1
   828fe:	4432      	add	r2, r6
   82900:	2b07      	cmp	r3, #7
   82902:	f8c4 b000 	str.w	fp, [r4]
   82906:	6066      	str	r6, [r4, #4]
   82908:	920f      	str	r2, [sp, #60]	; 0x3c
   8290a:	930e      	str	r3, [sp, #56]	; 0x38
   8290c:	dd79      	ble.n	82a02 <_vfiprintf_r+0x196>
   8290e:	2a00      	cmp	r2, #0
   82910:	f040 84ad 	bne.w	8326e <_vfiprintf_r+0xa02>
   82914:	4654      	mov	r4, sl
   82916:	9b02      	ldr	r3, [sp, #8]
   82918:	920e      	str	r2, [sp, #56]	; 0x38
   8291a:	4433      	add	r3, r6
   8291c:	9302      	str	r3, [sp, #8]
   8291e:	782b      	ldrb	r3, [r5, #0]
   82920:	2b00      	cmp	r3, #0
   82922:	f000 835f 	beq.w	82fe4 <_vfiprintf_r+0x778>
   82926:	f04f 0300 	mov.w	r3, #0
   8292a:	2100      	movs	r1, #0
   8292c:	f04f 3cff 	mov.w	ip, #4294967295
   82930:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82934:	1c68      	adds	r0, r5, #1
   82936:	786b      	ldrb	r3, [r5, #1]
   82938:	4688      	mov	r8, r1
   8293a:	460d      	mov	r5, r1
   8293c:	4666      	mov	r6, ip
   8293e:	f100 0b01 	add.w	fp, r0, #1
   82942:	f1a3 0220 	sub.w	r2, r3, #32
   82946:	2a58      	cmp	r2, #88	; 0x58
   82948:	f200 82aa 	bhi.w	82ea0 <_vfiprintf_r+0x634>
   8294c:	e8df f012 	tbh	[pc, r2, lsl #1]
   82950:	02a8029a 	.word	0x02a8029a
   82954:	02a202a8 	.word	0x02a202a8
   82958:	02a802a8 	.word	0x02a802a8
   8295c:	02a802a8 	.word	0x02a802a8
   82960:	02a802a8 	.word	0x02a802a8
   82964:	02600254 	.word	0x02600254
   82968:	010d02a8 	.word	0x010d02a8
   8296c:	02a8026c 	.word	0x02a8026c
   82970:	012f0129 	.word	0x012f0129
   82974:	012f012f 	.word	0x012f012f
   82978:	012f012f 	.word	0x012f012f
   8297c:	012f012f 	.word	0x012f012f
   82980:	012f012f 	.word	0x012f012f
   82984:	02a802a8 	.word	0x02a802a8
   82988:	02a802a8 	.word	0x02a802a8
   8298c:	02a802a8 	.word	0x02a802a8
   82990:	02a802a8 	.word	0x02a802a8
   82994:	02a802a8 	.word	0x02a802a8
   82998:	02a8013d 	.word	0x02a8013d
   8299c:	02a802a8 	.word	0x02a802a8
   829a0:	02a802a8 	.word	0x02a802a8
   829a4:	02a802a8 	.word	0x02a802a8
   829a8:	02a802a8 	.word	0x02a802a8
   829ac:	017402a8 	.word	0x017402a8
   829b0:	02a802a8 	.word	0x02a802a8
   829b4:	02a802a8 	.word	0x02a802a8
   829b8:	018b02a8 	.word	0x018b02a8
   829bc:	02a802a8 	.word	0x02a802a8
   829c0:	02a801a3 	.word	0x02a801a3
   829c4:	02a802a8 	.word	0x02a802a8
   829c8:	02a802a8 	.word	0x02a802a8
   829cc:	02a802a8 	.word	0x02a802a8
   829d0:	02a802a8 	.word	0x02a802a8
   829d4:	01c702a8 	.word	0x01c702a8
   829d8:	02a801da 	.word	0x02a801da
   829dc:	02a802a8 	.word	0x02a802a8
   829e0:	01da0123 	.word	0x01da0123
   829e4:	02a802a8 	.word	0x02a802a8
   829e8:	02a8024b 	.word	0x02a8024b
   829ec:	01130288 	.word	0x01130288
   829f0:	020701f4 	.word	0x020701f4
   829f4:	020d02a8 	.word	0x020d02a8
   829f8:	008102a8 	.word	0x008102a8
   829fc:	02a802a8 	.word	0x02a802a8
   82a00:	0232      	.short	0x0232
   82a02:	3408      	adds	r4, #8
   82a04:	9b02      	ldr	r3, [sp, #8]
   82a06:	4433      	add	r3, r6
   82a08:	9302      	str	r3, [sp, #8]
   82a0a:	e788      	b.n	8291e <_vfiprintf_r+0xb2>
   82a0c:	9801      	ldr	r0, [sp, #4]
   82a0e:	9900      	ldr	r1, [sp, #0]
   82a10:	f000 fd72 	bl	834f8 <__swsetup_r>
   82a14:	b9a8      	cbnz	r0, 82a42 <_vfiprintf_r+0x1d6>
   82a16:	9b00      	ldr	r3, [sp, #0]
   82a18:	899a      	ldrh	r2, [r3, #12]
   82a1a:	f002 021a 	and.w	r2, r2, #26
   82a1e:	2a0a      	cmp	r2, #10
   82a20:	f47f af4c 	bne.w	828bc <_vfiprintf_r+0x50>
   82a24:	9b00      	ldr	r3, [sp, #0]
   82a26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   82a2a:	2b00      	cmp	r3, #0
   82a2c:	f6ff af46 	blt.w	828bc <_vfiprintf_r+0x50>
   82a30:	9801      	ldr	r0, [sp, #4]
   82a32:	9900      	ldr	r1, [sp, #0]
   82a34:	465a      	mov	r2, fp
   82a36:	4623      	mov	r3, r4
   82a38:	f000 fd20 	bl	8347c <__sbprintf>
   82a3c:	b02b      	add	sp, #172	; 0xac
   82a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a42:	f04f 30ff 	mov.w	r0, #4294967295
   82a46:	b02b      	add	sp, #172	; 0xac
   82a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a4c:	f000 ff10 	bl	83870 <__sinit>
   82a50:	e719      	b.n	82886 <_vfiprintf_r+0x1a>
   82a52:	f018 0f20 	tst.w	r8, #32
   82a56:	9503      	str	r5, [sp, #12]
   82a58:	46b4      	mov	ip, r6
   82a5a:	f000 810c 	beq.w	82c76 <_vfiprintf_r+0x40a>
   82a5e:	9b04      	ldr	r3, [sp, #16]
   82a60:	3307      	adds	r3, #7
   82a62:	f023 0307 	bic.w	r3, r3, #7
   82a66:	f103 0208 	add.w	r2, r3, #8
   82a6a:	e9d3 6700 	ldrd	r6, r7, [r3]
   82a6e:	9204      	str	r2, [sp, #16]
   82a70:	2301      	movs	r3, #1
   82a72:	f04f 0200 	mov.w	r2, #0
   82a76:	46e1      	mov	r9, ip
   82a78:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   82a7c:	2500      	movs	r5, #0
   82a7e:	f1bc 0f00 	cmp.w	ip, #0
   82a82:	bfa8      	it	ge
   82a84:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   82a88:	ea56 0207 	orrs.w	r2, r6, r7
   82a8c:	f040 80c4 	bne.w	82c18 <_vfiprintf_r+0x3ac>
   82a90:	f1bc 0f00 	cmp.w	ip, #0
   82a94:	f000 8380 	beq.w	83198 <_vfiprintf_r+0x92c>
   82a98:	2b01      	cmp	r3, #1
   82a9a:	f000 80c5 	beq.w	82c28 <_vfiprintf_r+0x3bc>
   82a9e:	2b02      	cmp	r3, #2
   82aa0:	f000 8386 	beq.w	831b0 <_vfiprintf_r+0x944>
   82aa4:	4651      	mov	r1, sl
   82aa6:	08f2      	lsrs	r2, r6, #3
   82aa8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   82aac:	08f8      	lsrs	r0, r7, #3
   82aae:	f006 0307 	and.w	r3, r6, #7
   82ab2:	4607      	mov	r7, r0
   82ab4:	4616      	mov	r6, r2
   82ab6:	3330      	adds	r3, #48	; 0x30
   82ab8:	ea56 0207 	orrs.w	r2, r6, r7
   82abc:	f801 3d01 	strb.w	r3, [r1, #-1]!
   82ac0:	d1f1      	bne.n	82aa6 <_vfiprintf_r+0x23a>
   82ac2:	f018 0f01 	tst.w	r8, #1
   82ac6:	9107      	str	r1, [sp, #28]
   82ac8:	f040 83fa 	bne.w	832c0 <_vfiprintf_r+0xa54>
   82acc:	ebc1 090a 	rsb	r9, r1, sl
   82ad0:	45e1      	cmp	r9, ip
   82ad2:	464e      	mov	r6, r9
   82ad4:	bfb8      	it	lt
   82ad6:	4666      	movlt	r6, ip
   82ad8:	b105      	cbz	r5, 82adc <_vfiprintf_r+0x270>
   82ada:	3601      	adds	r6, #1
   82adc:	f018 0302 	ands.w	r3, r8, #2
   82ae0:	9305      	str	r3, [sp, #20]
   82ae2:	bf18      	it	ne
   82ae4:	3602      	addne	r6, #2
   82ae6:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   82aea:	9306      	str	r3, [sp, #24]
   82aec:	f040 81f9 	bne.w	82ee2 <_vfiprintf_r+0x676>
   82af0:	9b03      	ldr	r3, [sp, #12]
   82af2:	1b9d      	subs	r5, r3, r6
   82af4:	2d00      	cmp	r5, #0
   82af6:	f340 81f4 	ble.w	82ee2 <_vfiprintf_r+0x676>
   82afa:	2d10      	cmp	r5, #16
   82afc:	f340 848a 	ble.w	83414 <_vfiprintf_r+0xba8>
   82b00:	4620      	mov	r0, r4
   82b02:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   82b06:	4664      	mov	r4, ip
   82b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82b0a:	4fc4      	ldr	r7, [pc, #784]	; (82e1c <_vfiprintf_r+0x5b0>)
   82b0c:	2310      	movs	r3, #16
   82b0e:	4671      	mov	r1, lr
   82b10:	4684      	mov	ip, r0
   82b12:	e007      	b.n	82b24 <_vfiprintf_r+0x2b8>
   82b14:	f101 0e02 	add.w	lr, r1, #2
   82b18:	4601      	mov	r1, r0
   82b1a:	f10c 0c08 	add.w	ip, ip, #8
   82b1e:	3d10      	subs	r5, #16
   82b20:	2d10      	cmp	r5, #16
   82b22:	dd13      	ble.n	82b4c <_vfiprintf_r+0x2e0>
   82b24:	1c48      	adds	r0, r1, #1
   82b26:	3210      	adds	r2, #16
   82b28:	2807      	cmp	r0, #7
   82b2a:	920f      	str	r2, [sp, #60]	; 0x3c
   82b2c:	f8cc 7000 	str.w	r7, [ip]
   82b30:	f8cc 3004 	str.w	r3, [ip, #4]
   82b34:	900e      	str	r0, [sp, #56]	; 0x38
   82b36:	dded      	ble.n	82b14 <_vfiprintf_r+0x2a8>
   82b38:	2a00      	cmp	r2, #0
   82b3a:	f040 81c2 	bne.w	82ec2 <_vfiprintf_r+0x656>
   82b3e:	3d10      	subs	r5, #16
   82b40:	2d10      	cmp	r5, #16
   82b42:	4611      	mov	r1, r2
   82b44:	f04f 0e01 	mov.w	lr, #1
   82b48:	46d4      	mov	ip, sl
   82b4a:	dceb      	bgt.n	82b24 <_vfiprintf_r+0x2b8>
   82b4c:	4663      	mov	r3, ip
   82b4e:	4671      	mov	r1, lr
   82b50:	46a4      	mov	ip, r4
   82b52:	461c      	mov	r4, r3
   82b54:	442a      	add	r2, r5
   82b56:	2907      	cmp	r1, #7
   82b58:	920f      	str	r2, [sp, #60]	; 0x3c
   82b5a:	6027      	str	r7, [r4, #0]
   82b5c:	6065      	str	r5, [r4, #4]
   82b5e:	910e      	str	r1, [sp, #56]	; 0x38
   82b60:	f300 8346 	bgt.w	831f0 <_vfiprintf_r+0x984>
   82b64:	3408      	adds	r4, #8
   82b66:	1c48      	adds	r0, r1, #1
   82b68:	e1be      	b.n	82ee8 <_vfiprintf_r+0x67c>
   82b6a:	4658      	mov	r0, fp
   82b6c:	f048 0804 	orr.w	r8, r8, #4
   82b70:	f89b 3000 	ldrb.w	r3, [fp]
   82b74:	e6e3      	b.n	8293e <_vfiprintf_r+0xd2>
   82b76:	f018 0320 	ands.w	r3, r8, #32
   82b7a:	9503      	str	r5, [sp, #12]
   82b7c:	46b4      	mov	ip, r6
   82b7e:	d062      	beq.n	82c46 <_vfiprintf_r+0x3da>
   82b80:	9b04      	ldr	r3, [sp, #16]
   82b82:	3307      	adds	r3, #7
   82b84:	f023 0307 	bic.w	r3, r3, #7
   82b88:	f103 0208 	add.w	r2, r3, #8
   82b8c:	e9d3 6700 	ldrd	r6, r7, [r3]
   82b90:	9204      	str	r2, [sp, #16]
   82b92:	2300      	movs	r3, #0
   82b94:	e76d      	b.n	82a72 <_vfiprintf_r+0x206>
   82b96:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   82b9a:	f89b 3000 	ldrb.w	r3, [fp]
   82b9e:	4658      	mov	r0, fp
   82ba0:	e6cd      	b.n	8293e <_vfiprintf_r+0xd2>
   82ba2:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   82ba6:	f89b 3000 	ldrb.w	r3, [fp]
   82baa:	4658      	mov	r0, fp
   82bac:	e6c7      	b.n	8293e <_vfiprintf_r+0xd2>
   82bae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82bb2:	2500      	movs	r5, #0
   82bb4:	f81b 3b01 	ldrb.w	r3, [fp], #1
   82bb8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82bbc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   82bc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82bc4:	2a09      	cmp	r2, #9
   82bc6:	d9f5      	bls.n	82bb4 <_vfiprintf_r+0x348>
   82bc8:	e6bb      	b.n	82942 <_vfiprintf_r+0xd6>
   82bca:	f048 0810 	orr.w	r8, r8, #16
   82bce:	f018 0f20 	tst.w	r8, #32
   82bd2:	9503      	str	r5, [sp, #12]
   82bd4:	46b4      	mov	ip, r6
   82bd6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82bda:	f000 809b 	beq.w	82d14 <_vfiprintf_r+0x4a8>
   82bde:	9904      	ldr	r1, [sp, #16]
   82be0:	3107      	adds	r1, #7
   82be2:	f021 0107 	bic.w	r1, r1, #7
   82be6:	e9d1 2300 	ldrd	r2, r3, [r1]
   82bea:	4616      	mov	r6, r2
   82bec:	461f      	mov	r7, r3
   82bee:	3108      	adds	r1, #8
   82bf0:	9104      	str	r1, [sp, #16]
   82bf2:	2a00      	cmp	r2, #0
   82bf4:	f173 0300 	sbcs.w	r3, r3, #0
   82bf8:	f2c0 83a4 	blt.w	83344 <_vfiprintf_r+0xad8>
   82bfc:	f1bc 0f00 	cmp.w	ip, #0
   82c00:	bfa8      	it	ge
   82c02:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   82c06:	ea56 0207 	orrs.w	r2, r6, r7
   82c0a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   82c0e:	46e1      	mov	r9, ip
   82c10:	f04f 0301 	mov.w	r3, #1
   82c14:	f43f af3c 	beq.w	82a90 <_vfiprintf_r+0x224>
   82c18:	2b01      	cmp	r3, #1
   82c1a:	f47f af40 	bne.w	82a9e <_vfiprintf_r+0x232>
   82c1e:	2f00      	cmp	r7, #0
   82c20:	bf08      	it	eq
   82c22:	2e0a      	cmpeq	r6, #10
   82c24:	f080 8332 	bcs.w	8328c <_vfiprintf_r+0xa20>
   82c28:	ab2a      	add	r3, sp, #168	; 0xa8
   82c2a:	3630      	adds	r6, #48	; 0x30
   82c2c:	f803 6d41 	strb.w	r6, [r3, #-65]!
   82c30:	ebc3 090a 	rsb	r9, r3, sl
   82c34:	9307      	str	r3, [sp, #28]
   82c36:	e74b      	b.n	82ad0 <_vfiprintf_r+0x264>
   82c38:	f048 0810 	orr.w	r8, r8, #16
   82c3c:	f018 0320 	ands.w	r3, r8, #32
   82c40:	9503      	str	r5, [sp, #12]
   82c42:	46b4      	mov	ip, r6
   82c44:	d19c      	bne.n	82b80 <_vfiprintf_r+0x314>
   82c46:	f018 0210 	ands.w	r2, r8, #16
   82c4a:	f040 82f7 	bne.w	8323c <_vfiprintf_r+0x9d0>
   82c4e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   82c52:	f000 82f3 	beq.w	8323c <_vfiprintf_r+0x9d0>
   82c56:	9904      	ldr	r1, [sp, #16]
   82c58:	4613      	mov	r3, r2
   82c5a:	460a      	mov	r2, r1
   82c5c:	3204      	adds	r2, #4
   82c5e:	880e      	ldrh	r6, [r1, #0]
   82c60:	2700      	movs	r7, #0
   82c62:	9204      	str	r2, [sp, #16]
   82c64:	e705      	b.n	82a72 <_vfiprintf_r+0x206>
   82c66:	f048 0810 	orr.w	r8, r8, #16
   82c6a:	f018 0f20 	tst.w	r8, #32
   82c6e:	9503      	str	r5, [sp, #12]
   82c70:	46b4      	mov	ip, r6
   82c72:	f47f aef4 	bne.w	82a5e <_vfiprintf_r+0x1f2>
   82c76:	9a04      	ldr	r2, [sp, #16]
   82c78:	f018 0f10 	tst.w	r8, #16
   82c7c:	4613      	mov	r3, r2
   82c7e:	f040 82e4 	bne.w	8324a <_vfiprintf_r+0x9de>
   82c82:	f018 0f40 	tst.w	r8, #64	; 0x40
   82c86:	f000 82e0 	beq.w	8324a <_vfiprintf_r+0x9de>
   82c8a:	8816      	ldrh	r6, [r2, #0]
   82c8c:	3204      	adds	r2, #4
   82c8e:	2700      	movs	r7, #0
   82c90:	2301      	movs	r3, #1
   82c92:	9204      	str	r2, [sp, #16]
   82c94:	e6ed      	b.n	82a72 <_vfiprintf_r+0x206>
   82c96:	4a62      	ldr	r2, [pc, #392]	; (82e20 <_vfiprintf_r+0x5b4>)
   82c98:	f018 0f20 	tst.w	r8, #32
   82c9c:	9503      	str	r5, [sp, #12]
   82c9e:	46b4      	mov	ip, r6
   82ca0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82ca4:	9209      	str	r2, [sp, #36]	; 0x24
   82ca6:	f000 808f 	beq.w	82dc8 <_vfiprintf_r+0x55c>
   82caa:	9a04      	ldr	r2, [sp, #16]
   82cac:	3207      	adds	r2, #7
   82cae:	f022 0207 	bic.w	r2, r2, #7
   82cb2:	f102 0108 	add.w	r1, r2, #8
   82cb6:	9104      	str	r1, [sp, #16]
   82cb8:	e9d2 6700 	ldrd	r6, r7, [r2]
   82cbc:	f018 0f01 	tst.w	r8, #1
   82cc0:	f000 828f 	beq.w	831e2 <_vfiprintf_r+0x976>
   82cc4:	ea56 0207 	orrs.w	r2, r6, r7
   82cc8:	f000 828b 	beq.w	831e2 <_vfiprintf_r+0x976>
   82ccc:	2230      	movs	r2, #48	; 0x30
   82cce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   82cd2:	f048 0802 	orr.w	r8, r8, #2
   82cd6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   82cda:	2302      	movs	r3, #2
   82cdc:	e6c9      	b.n	82a72 <_vfiprintf_r+0x206>
   82cde:	9a04      	ldr	r2, [sp, #16]
   82ce0:	2601      	movs	r6, #1
   82ce2:	6813      	ldr	r3, [r2, #0]
   82ce4:	f04f 0100 	mov.w	r1, #0
   82ce8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   82cec:	4613      	mov	r3, r2
   82cee:	46b1      	mov	r9, r6
   82cf0:	3304      	adds	r3, #4
   82cf2:	9304      	str	r3, [sp, #16]
   82cf4:	ab10      	add	r3, sp, #64	; 0x40
   82cf6:	9503      	str	r5, [sp, #12]
   82cf8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82cfc:	9307      	str	r3, [sp, #28]
   82cfe:	f04f 0c00 	mov.w	ip, #0
   82d02:	e6eb      	b.n	82adc <_vfiprintf_r+0x270>
   82d04:	f018 0f20 	tst.w	r8, #32
   82d08:	9503      	str	r5, [sp, #12]
   82d0a:	46b4      	mov	ip, r6
   82d0c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82d10:	f47f af65 	bne.w	82bde <_vfiprintf_r+0x372>
   82d14:	9a04      	ldr	r2, [sp, #16]
   82d16:	f018 0f10 	tst.w	r8, #16
   82d1a:	4613      	mov	r3, r2
   82d1c:	f040 82a0 	bne.w	83260 <_vfiprintf_r+0x9f4>
   82d20:	f018 0f40 	tst.w	r8, #64	; 0x40
   82d24:	f000 829c 	beq.w	83260 <_vfiprintf_r+0x9f4>
   82d28:	f9b2 6000 	ldrsh.w	r6, [r2]
   82d2c:	3304      	adds	r3, #4
   82d2e:	17f7      	asrs	r7, r6, #31
   82d30:	9304      	str	r3, [sp, #16]
   82d32:	4632      	mov	r2, r6
   82d34:	463b      	mov	r3, r7
   82d36:	e75c      	b.n	82bf2 <_vfiprintf_r+0x386>
   82d38:	9904      	ldr	r1, [sp, #16]
   82d3a:	2378      	movs	r3, #120	; 0x78
   82d3c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   82d40:	4b38      	ldr	r3, [pc, #224]	; (82e24 <_vfiprintf_r+0x5b8>)
   82d42:	46b4      	mov	ip, r6
   82d44:	2230      	movs	r2, #48	; 0x30
   82d46:	680e      	ldr	r6, [r1, #0]
   82d48:	3104      	adds	r1, #4
   82d4a:	9309      	str	r3, [sp, #36]	; 0x24
   82d4c:	9503      	str	r5, [sp, #12]
   82d4e:	f048 0802 	orr.w	r8, r8, #2
   82d52:	9104      	str	r1, [sp, #16]
   82d54:	2700      	movs	r7, #0
   82d56:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   82d5a:	2302      	movs	r3, #2
   82d5c:	e689      	b.n	82a72 <_vfiprintf_r+0x206>
   82d5e:	f048 0820 	orr.w	r8, r8, #32
   82d62:	f89b 3000 	ldrb.w	r3, [fp]
   82d66:	4658      	mov	r0, fp
   82d68:	e5e9      	b.n	8293e <_vfiprintf_r+0xd2>
   82d6a:	f04f 0100 	mov.w	r1, #0
   82d6e:	9a04      	ldr	r2, [sp, #16]
   82d70:	9503      	str	r5, [sp, #12]
   82d72:	6813      	ldr	r3, [r2, #0]
   82d74:	46b4      	mov	ip, r6
   82d76:	9307      	str	r3, [sp, #28]
   82d78:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82d7c:	1d15      	adds	r5, r2, #4
   82d7e:	2b00      	cmp	r3, #0
   82d80:	f000 834e 	beq.w	83420 <_vfiprintf_r+0xbb4>
   82d84:	2e00      	cmp	r6, #0
   82d86:	f2c0 8329 	blt.w	833dc <_vfiprintf_r+0xb70>
   82d8a:	9e07      	ldr	r6, [sp, #28]
   82d8c:	4662      	mov	r2, ip
   82d8e:	4630      	mov	r0, r6
   82d90:	2100      	movs	r1, #0
   82d92:	f8cd c010 	str.w	ip, [sp, #16]
   82d96:	f001 fbff 	bl	84598 <memchr>
   82d9a:	f8dd c010 	ldr.w	ip, [sp, #16]
   82d9e:	2800      	cmp	r0, #0
   82da0:	f000 834e 	beq.w	83440 <_vfiprintf_r+0xbd4>
   82da4:	9504      	str	r5, [sp, #16]
   82da6:	ebc6 0900 	rsb	r9, r6, r0
   82daa:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   82dae:	f04f 0c00 	mov.w	ip, #0
   82db2:	e68d      	b.n	82ad0 <_vfiprintf_r+0x264>
   82db4:	4a1b      	ldr	r2, [pc, #108]	; (82e24 <_vfiprintf_r+0x5b8>)
   82db6:	f018 0f20 	tst.w	r8, #32
   82dba:	9503      	str	r5, [sp, #12]
   82dbc:	46b4      	mov	ip, r6
   82dbe:	9209      	str	r2, [sp, #36]	; 0x24
   82dc0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82dc4:	f47f af71 	bne.w	82caa <_vfiprintf_r+0x43e>
   82dc8:	9904      	ldr	r1, [sp, #16]
   82dca:	f018 0f10 	tst.w	r8, #16
   82dce:	460a      	mov	r2, r1
   82dd0:	f040 8241 	bne.w	83256 <_vfiprintf_r+0x9ea>
   82dd4:	f018 0f40 	tst.w	r8, #64	; 0x40
   82dd8:	f000 823d 	beq.w	83256 <_vfiprintf_r+0x9ea>
   82ddc:	3204      	adds	r2, #4
   82dde:	880e      	ldrh	r6, [r1, #0]
   82de0:	2700      	movs	r7, #0
   82de2:	9204      	str	r2, [sp, #16]
   82de4:	e76a      	b.n	82cbc <_vfiprintf_r+0x450>
   82de6:	f89b 3000 	ldrb.w	r3, [fp]
   82dea:	2b6c      	cmp	r3, #108	; 0x6c
   82dec:	f000 82e9 	beq.w	833c2 <_vfiprintf_r+0xb56>
   82df0:	f048 0810 	orr.w	r8, r8, #16
   82df4:	4658      	mov	r0, fp
   82df6:	e5a2      	b.n	8293e <_vfiprintf_r+0xd2>
   82df8:	9a04      	ldr	r2, [sp, #16]
   82dfa:	4613      	mov	r3, r2
   82dfc:	6815      	ldr	r5, [r2, #0]
   82dfe:	3304      	adds	r3, #4
   82e00:	2d00      	cmp	r5, #0
   82e02:	f2c0 82e6 	blt.w	833d2 <_vfiprintf_r+0xb66>
   82e06:	9304      	str	r3, [sp, #16]
   82e08:	f89b 3000 	ldrb.w	r3, [fp]
   82e0c:	4658      	mov	r0, fp
   82e0e:	e596      	b.n	8293e <_vfiprintf_r+0xd2>
   82e10:	f89b 3000 	ldrb.w	r3, [fp]
   82e14:	4658      	mov	r0, fp
   82e16:	212b      	movs	r1, #43	; 0x2b
   82e18:	e591      	b.n	8293e <_vfiprintf_r+0xd2>
   82e1a:	bf00      	nop
   82e1c:	00085604 	.word	0x00085604
   82e20:	000855d4 	.word	0x000855d4
   82e24:	000855e8 	.word	0x000855e8
   82e28:	f89b 3000 	ldrb.w	r3, [fp]
   82e2c:	f10b 0001 	add.w	r0, fp, #1
   82e30:	2b2a      	cmp	r3, #42	; 0x2a
   82e32:	f000 830f 	beq.w	83454 <_vfiprintf_r+0xbe8>
   82e36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e3a:	2a09      	cmp	r2, #9
   82e3c:	4683      	mov	fp, r0
   82e3e:	f04f 0600 	mov.w	r6, #0
   82e42:	f63f ad7e 	bhi.w	82942 <_vfiprintf_r+0xd6>
   82e46:	f81b 3b01 	ldrb.w	r3, [fp], #1
   82e4a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   82e4e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   82e52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e56:	2a09      	cmp	r2, #9
   82e58:	d9f5      	bls.n	82e46 <_vfiprintf_r+0x5da>
   82e5a:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   82e5e:	e570      	b.n	82942 <_vfiprintf_r+0xd6>
   82e60:	f018 0f20 	tst.w	r8, #32
   82e64:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82e68:	f000 8283 	beq.w	83372 <_vfiprintf_r+0xb06>
   82e6c:	9a04      	ldr	r2, [sp, #16]
   82e6e:	4613      	mov	r3, r2
   82e70:	3304      	adds	r3, #4
   82e72:	9304      	str	r3, [sp, #16]
   82e74:	9b02      	ldr	r3, [sp, #8]
   82e76:	6811      	ldr	r1, [r2, #0]
   82e78:	17df      	asrs	r7, r3, #31
   82e7a:	461a      	mov	r2, r3
   82e7c:	463b      	mov	r3, r7
   82e7e:	e9c1 2300 	strd	r2, r3, [r1]
   82e82:	e525      	b.n	828d0 <_vfiprintf_r+0x64>
   82e84:	4658      	mov	r0, fp
   82e86:	f89b 3000 	ldrb.w	r3, [fp]
   82e8a:	2900      	cmp	r1, #0
   82e8c:	f47f ad57 	bne.w	8293e <_vfiprintf_r+0xd2>
   82e90:	2120      	movs	r1, #32
   82e92:	e554      	b.n	8293e <_vfiprintf_r+0xd2>
   82e94:	f048 0801 	orr.w	r8, r8, #1
   82e98:	4658      	mov	r0, fp
   82e9a:	f89b 3000 	ldrb.w	r3, [fp]
   82e9e:	e54e      	b.n	8293e <_vfiprintf_r+0xd2>
   82ea0:	9503      	str	r5, [sp, #12]
   82ea2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82ea6:	2b00      	cmp	r3, #0
   82ea8:	f000 809c 	beq.w	82fe4 <_vfiprintf_r+0x778>
   82eac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   82eb0:	f04f 0300 	mov.w	r3, #0
   82eb4:	2601      	movs	r6, #1
   82eb6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82eba:	ab10      	add	r3, sp, #64	; 0x40
   82ebc:	46b1      	mov	r9, r6
   82ebe:	9307      	str	r3, [sp, #28]
   82ec0:	e71d      	b.n	82cfe <_vfiprintf_r+0x492>
   82ec2:	9801      	ldr	r0, [sp, #4]
   82ec4:	9900      	ldr	r1, [sp, #0]
   82ec6:	aa0d      	add	r2, sp, #52	; 0x34
   82ec8:	9308      	str	r3, [sp, #32]
   82eca:	f7ff fc93 	bl	827f4 <__sprint_r.part.0>
   82ece:	2800      	cmp	r0, #0
   82ed0:	f040 808f 	bne.w	82ff2 <_vfiprintf_r+0x786>
   82ed4:	990e      	ldr	r1, [sp, #56]	; 0x38
   82ed6:	46d4      	mov	ip, sl
   82ed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82eda:	f101 0e01 	add.w	lr, r1, #1
   82ede:	9b08      	ldr	r3, [sp, #32]
   82ee0:	e61d      	b.n	82b1e <_vfiprintf_r+0x2b2>
   82ee2:	990e      	ldr	r1, [sp, #56]	; 0x38
   82ee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82ee6:	1c48      	adds	r0, r1, #1
   82ee8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   82eec:	b16b      	cbz	r3, 82f0a <_vfiprintf_r+0x69e>
   82eee:	3201      	adds	r2, #1
   82ef0:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   82ef4:	2101      	movs	r1, #1
   82ef6:	2807      	cmp	r0, #7
   82ef8:	920f      	str	r2, [sp, #60]	; 0x3c
   82efa:	900e      	str	r0, [sp, #56]	; 0x38
   82efc:	6023      	str	r3, [r4, #0]
   82efe:	6061      	str	r1, [r4, #4]
   82f00:	f300 8134 	bgt.w	8316c <_vfiprintf_r+0x900>
   82f04:	4601      	mov	r1, r0
   82f06:	3408      	adds	r4, #8
   82f08:	3001      	adds	r0, #1
   82f0a:	9b05      	ldr	r3, [sp, #20]
   82f0c:	b163      	cbz	r3, 82f28 <_vfiprintf_r+0x6bc>
   82f0e:	3202      	adds	r2, #2
   82f10:	a90c      	add	r1, sp, #48	; 0x30
   82f12:	2302      	movs	r3, #2
   82f14:	2807      	cmp	r0, #7
   82f16:	920f      	str	r2, [sp, #60]	; 0x3c
   82f18:	900e      	str	r0, [sp, #56]	; 0x38
   82f1a:	e884 000a 	stmia.w	r4, {r1, r3}
   82f1e:	f300 8134 	bgt.w	8318a <_vfiprintf_r+0x91e>
   82f22:	4601      	mov	r1, r0
   82f24:	3408      	adds	r4, #8
   82f26:	3001      	adds	r0, #1
   82f28:	9b06      	ldr	r3, [sp, #24]
   82f2a:	2b80      	cmp	r3, #128	; 0x80
   82f2c:	f000 80d4 	beq.w	830d8 <_vfiprintf_r+0x86c>
   82f30:	ebc9 070c 	rsb	r7, r9, ip
   82f34:	2f00      	cmp	r7, #0
   82f36:	dd2b      	ble.n	82f90 <_vfiprintf_r+0x724>
   82f38:	2f10      	cmp	r7, #16
   82f3a:	4dab      	ldr	r5, [pc, #684]	; (831e8 <_vfiprintf_r+0x97c>)
   82f3c:	dd1f      	ble.n	82f7e <_vfiprintf_r+0x712>
   82f3e:	46a6      	mov	lr, r4
   82f40:	2310      	movs	r3, #16
   82f42:	9c01      	ldr	r4, [sp, #4]
   82f44:	e007      	b.n	82f56 <_vfiprintf_r+0x6ea>
   82f46:	f101 0c02 	add.w	ip, r1, #2
   82f4a:	4601      	mov	r1, r0
   82f4c:	f10e 0e08 	add.w	lr, lr, #8
   82f50:	3f10      	subs	r7, #16
   82f52:	2f10      	cmp	r7, #16
   82f54:	dd11      	ble.n	82f7a <_vfiprintf_r+0x70e>
   82f56:	1c48      	adds	r0, r1, #1
   82f58:	3210      	adds	r2, #16
   82f5a:	2807      	cmp	r0, #7
   82f5c:	920f      	str	r2, [sp, #60]	; 0x3c
   82f5e:	f8ce 5000 	str.w	r5, [lr]
   82f62:	f8ce 3004 	str.w	r3, [lr, #4]
   82f66:	900e      	str	r0, [sp, #56]	; 0x38
   82f68:	dded      	ble.n	82f46 <_vfiprintf_r+0x6da>
   82f6a:	bb6a      	cbnz	r2, 82fc8 <_vfiprintf_r+0x75c>
   82f6c:	3f10      	subs	r7, #16
   82f6e:	2f10      	cmp	r7, #16
   82f70:	f04f 0c01 	mov.w	ip, #1
   82f74:	4611      	mov	r1, r2
   82f76:	46d6      	mov	lr, sl
   82f78:	dced      	bgt.n	82f56 <_vfiprintf_r+0x6ea>
   82f7a:	4674      	mov	r4, lr
   82f7c:	4660      	mov	r0, ip
   82f7e:	443a      	add	r2, r7
   82f80:	2807      	cmp	r0, #7
   82f82:	920f      	str	r2, [sp, #60]	; 0x3c
   82f84:	e884 00a0 	stmia.w	r4, {r5, r7}
   82f88:	900e      	str	r0, [sp, #56]	; 0x38
   82f8a:	dc3b      	bgt.n	83004 <_vfiprintf_r+0x798>
   82f8c:	3408      	adds	r4, #8
   82f8e:	3001      	adds	r0, #1
   82f90:	eb02 0309 	add.w	r3, r2, r9
   82f94:	9a07      	ldr	r2, [sp, #28]
   82f96:	2807      	cmp	r0, #7
   82f98:	930f      	str	r3, [sp, #60]	; 0x3c
   82f9a:	e884 0204 	stmia.w	r4, {r2, r9}
   82f9e:	900e      	str	r0, [sp, #56]	; 0x38
   82fa0:	dd3d      	ble.n	8301e <_vfiprintf_r+0x7b2>
   82fa2:	2b00      	cmp	r3, #0
   82fa4:	f040 813f 	bne.w	83226 <_vfiprintf_r+0x9ba>
   82fa8:	f018 0f04 	tst.w	r8, #4
   82fac:	930e      	str	r3, [sp, #56]	; 0x38
   82fae:	f040 8130 	bne.w	83212 <_vfiprintf_r+0x9a6>
   82fb2:	9b02      	ldr	r3, [sp, #8]
   82fb4:	9a03      	ldr	r2, [sp, #12]
   82fb6:	4296      	cmp	r6, r2
   82fb8:	bfac      	ite	ge
   82fba:	199b      	addge	r3, r3, r6
   82fbc:	189b      	addlt	r3, r3, r2
   82fbe:	9302      	str	r3, [sp, #8]
   82fc0:	2300      	movs	r3, #0
   82fc2:	930e      	str	r3, [sp, #56]	; 0x38
   82fc4:	4654      	mov	r4, sl
   82fc6:	e483      	b.n	828d0 <_vfiprintf_r+0x64>
   82fc8:	4620      	mov	r0, r4
   82fca:	9900      	ldr	r1, [sp, #0]
   82fcc:	aa0d      	add	r2, sp, #52	; 0x34
   82fce:	9305      	str	r3, [sp, #20]
   82fd0:	f7ff fc10 	bl	827f4 <__sprint_r.part.0>
   82fd4:	b968      	cbnz	r0, 82ff2 <_vfiprintf_r+0x786>
   82fd6:	990e      	ldr	r1, [sp, #56]	; 0x38
   82fd8:	46d6      	mov	lr, sl
   82fda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82fdc:	f101 0c01 	add.w	ip, r1, #1
   82fe0:	9b05      	ldr	r3, [sp, #20]
   82fe2:	e7b5      	b.n	82f50 <_vfiprintf_r+0x6e4>
   82fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82fe6:	b123      	cbz	r3, 82ff2 <_vfiprintf_r+0x786>
   82fe8:	9801      	ldr	r0, [sp, #4]
   82fea:	9900      	ldr	r1, [sp, #0]
   82fec:	aa0d      	add	r2, sp, #52	; 0x34
   82fee:	f7ff fc01 	bl	827f4 <__sprint_r.part.0>
   82ff2:	9b00      	ldr	r3, [sp, #0]
   82ff4:	899b      	ldrh	r3, [r3, #12]
   82ff6:	065b      	lsls	r3, r3, #25
   82ff8:	f53f ad23 	bmi.w	82a42 <_vfiprintf_r+0x1d6>
   82ffc:	9802      	ldr	r0, [sp, #8]
   82ffe:	b02b      	add	sp, #172	; 0xac
   83000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83004:	2a00      	cmp	r2, #0
   83006:	f040 8190 	bne.w	8332a <_vfiprintf_r+0xabe>
   8300a:	464b      	mov	r3, r9
   8300c:	4654      	mov	r4, sl
   8300e:	9907      	ldr	r1, [sp, #28]
   83010:	2201      	movs	r2, #1
   83012:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   83016:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8301a:	911a      	str	r1, [sp, #104]	; 0x68
   8301c:	920e      	str	r2, [sp, #56]	; 0x38
   8301e:	f104 0208 	add.w	r2, r4, #8
   83022:	f018 0f04 	tst.w	r8, #4
   83026:	d039      	beq.n	8309c <_vfiprintf_r+0x830>
   83028:	9903      	ldr	r1, [sp, #12]
   8302a:	1b8d      	subs	r5, r1, r6
   8302c:	2d00      	cmp	r5, #0
   8302e:	dd35      	ble.n	8309c <_vfiprintf_r+0x830>
   83030:	2d10      	cmp	r5, #16
   83032:	f340 8200 	ble.w	83436 <_vfiprintf_r+0xbca>
   83036:	980e      	ldr	r0, [sp, #56]	; 0x38
   83038:	4f6c      	ldr	r7, [pc, #432]	; (831ec <_vfiprintf_r+0x980>)
   8303a:	2410      	movs	r4, #16
   8303c:	f8dd 8004 	ldr.w	r8, [sp, #4]
   83040:	f8dd 9000 	ldr.w	r9, [sp]
   83044:	e006      	b.n	83054 <_vfiprintf_r+0x7e8>
   83046:	f100 0e02 	add.w	lr, r0, #2
   8304a:	4608      	mov	r0, r1
   8304c:	3208      	adds	r2, #8
   8304e:	3d10      	subs	r5, #16
   83050:	2d10      	cmp	r5, #16
   83052:	dd10      	ble.n	83076 <_vfiprintf_r+0x80a>
   83054:	1c41      	adds	r1, r0, #1
   83056:	3310      	adds	r3, #16
   83058:	2907      	cmp	r1, #7
   8305a:	930f      	str	r3, [sp, #60]	; 0x3c
   8305c:	6017      	str	r7, [r2, #0]
   8305e:	6054      	str	r4, [r2, #4]
   83060:	910e      	str	r1, [sp, #56]	; 0x38
   83062:	ddf0      	ble.n	83046 <_vfiprintf_r+0x7da>
   83064:	2b00      	cmp	r3, #0
   83066:	d12a      	bne.n	830be <_vfiprintf_r+0x852>
   83068:	3d10      	subs	r5, #16
   8306a:	2d10      	cmp	r5, #16
   8306c:	f04f 0e01 	mov.w	lr, #1
   83070:	4618      	mov	r0, r3
   83072:	4652      	mov	r2, sl
   83074:	dcee      	bgt.n	83054 <_vfiprintf_r+0x7e8>
   83076:	442b      	add	r3, r5
   83078:	f1be 0f07 	cmp.w	lr, #7
   8307c:	930f      	str	r3, [sp, #60]	; 0x3c
   8307e:	6017      	str	r7, [r2, #0]
   83080:	6055      	str	r5, [r2, #4]
   83082:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83086:	dd09      	ble.n	8309c <_vfiprintf_r+0x830>
   83088:	2b00      	cmp	r3, #0
   8308a:	d092      	beq.n	82fb2 <_vfiprintf_r+0x746>
   8308c:	9801      	ldr	r0, [sp, #4]
   8308e:	9900      	ldr	r1, [sp, #0]
   83090:	aa0d      	add	r2, sp, #52	; 0x34
   83092:	f7ff fbaf 	bl	827f4 <__sprint_r.part.0>
   83096:	2800      	cmp	r0, #0
   83098:	d1ab      	bne.n	82ff2 <_vfiprintf_r+0x786>
   8309a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8309c:	9a02      	ldr	r2, [sp, #8]
   8309e:	9903      	ldr	r1, [sp, #12]
   830a0:	428e      	cmp	r6, r1
   830a2:	bfac      	ite	ge
   830a4:	1992      	addge	r2, r2, r6
   830a6:	1852      	addlt	r2, r2, r1
   830a8:	9202      	str	r2, [sp, #8]
   830aa:	2b00      	cmp	r3, #0
   830ac:	d088      	beq.n	82fc0 <_vfiprintf_r+0x754>
   830ae:	9801      	ldr	r0, [sp, #4]
   830b0:	9900      	ldr	r1, [sp, #0]
   830b2:	aa0d      	add	r2, sp, #52	; 0x34
   830b4:	f7ff fb9e 	bl	827f4 <__sprint_r.part.0>
   830b8:	2800      	cmp	r0, #0
   830ba:	d081      	beq.n	82fc0 <_vfiprintf_r+0x754>
   830bc:	e799      	b.n	82ff2 <_vfiprintf_r+0x786>
   830be:	4640      	mov	r0, r8
   830c0:	4649      	mov	r1, r9
   830c2:	aa0d      	add	r2, sp, #52	; 0x34
   830c4:	f7ff fb96 	bl	827f4 <__sprint_r.part.0>
   830c8:	2800      	cmp	r0, #0
   830ca:	d192      	bne.n	82ff2 <_vfiprintf_r+0x786>
   830cc:	980e      	ldr	r0, [sp, #56]	; 0x38
   830ce:	4652      	mov	r2, sl
   830d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   830d2:	f100 0e01 	add.w	lr, r0, #1
   830d6:	e7ba      	b.n	8304e <_vfiprintf_r+0x7e2>
   830d8:	9b03      	ldr	r3, [sp, #12]
   830da:	1b9f      	subs	r7, r3, r6
   830dc:	2f00      	cmp	r7, #0
   830de:	f77f af27 	ble.w	82f30 <_vfiprintf_r+0x6c4>
   830e2:	2f10      	cmp	r7, #16
   830e4:	f340 81b3 	ble.w	8344e <_vfiprintf_r+0xbe2>
   830e8:	4620      	mov	r0, r4
   830ea:	4d3f      	ldr	r5, [pc, #252]	; (831e8 <_vfiprintf_r+0x97c>)
   830ec:	4664      	mov	r4, ip
   830ee:	2310      	movs	r3, #16
   830f0:	4684      	mov	ip, r0
   830f2:	e007      	b.n	83104 <_vfiprintf_r+0x898>
   830f4:	f101 0e02 	add.w	lr, r1, #2
   830f8:	4601      	mov	r1, r0
   830fa:	f10c 0c08 	add.w	ip, ip, #8
   830fe:	3f10      	subs	r7, #16
   83100:	2f10      	cmp	r7, #16
   83102:	dd11      	ble.n	83128 <_vfiprintf_r+0x8bc>
   83104:	1c48      	adds	r0, r1, #1
   83106:	3210      	adds	r2, #16
   83108:	2807      	cmp	r0, #7
   8310a:	920f      	str	r2, [sp, #60]	; 0x3c
   8310c:	f8cc 5000 	str.w	r5, [ip]
   83110:	f8cc 3004 	str.w	r3, [ip, #4]
   83114:	900e      	str	r0, [sp, #56]	; 0x38
   83116:	dded      	ble.n	830f4 <_vfiprintf_r+0x888>
   83118:	b9c2      	cbnz	r2, 8314c <_vfiprintf_r+0x8e0>
   8311a:	3f10      	subs	r7, #16
   8311c:	2f10      	cmp	r7, #16
   8311e:	f04f 0e01 	mov.w	lr, #1
   83122:	4611      	mov	r1, r2
   83124:	46d4      	mov	ip, sl
   83126:	dced      	bgt.n	83104 <_vfiprintf_r+0x898>
   83128:	4663      	mov	r3, ip
   8312a:	46a4      	mov	ip, r4
   8312c:	461c      	mov	r4, r3
   8312e:	443a      	add	r2, r7
   83130:	f1be 0f07 	cmp.w	lr, #7
   83134:	920f      	str	r2, [sp, #60]	; 0x3c
   83136:	e884 00a0 	stmia.w	r4, {r5, r7}
   8313a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8313e:	f300 80ee 	bgt.w	8331e <_vfiprintf_r+0xab2>
   83142:	3408      	adds	r4, #8
   83144:	f10e 0001 	add.w	r0, lr, #1
   83148:	4671      	mov	r1, lr
   8314a:	e6f1      	b.n	82f30 <_vfiprintf_r+0x6c4>
   8314c:	9801      	ldr	r0, [sp, #4]
   8314e:	9900      	ldr	r1, [sp, #0]
   83150:	aa0d      	add	r2, sp, #52	; 0x34
   83152:	9305      	str	r3, [sp, #20]
   83154:	f7ff fb4e 	bl	827f4 <__sprint_r.part.0>
   83158:	2800      	cmp	r0, #0
   8315a:	f47f af4a 	bne.w	82ff2 <_vfiprintf_r+0x786>
   8315e:	990e      	ldr	r1, [sp, #56]	; 0x38
   83160:	46d4      	mov	ip, sl
   83162:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83164:	f101 0e01 	add.w	lr, r1, #1
   83168:	9b05      	ldr	r3, [sp, #20]
   8316a:	e7c8      	b.n	830fe <_vfiprintf_r+0x892>
   8316c:	2a00      	cmp	r2, #0
   8316e:	f040 80c5 	bne.w	832fc <_vfiprintf_r+0xa90>
   83172:	9b05      	ldr	r3, [sp, #20]
   83174:	2b00      	cmp	r3, #0
   83176:	f000 8085 	beq.w	83284 <_vfiprintf_r+0xa18>
   8317a:	aa0c      	add	r2, sp, #48	; 0x30
   8317c:	2302      	movs	r3, #2
   8317e:	921a      	str	r2, [sp, #104]	; 0x68
   83180:	4608      	mov	r0, r1
   83182:	931b      	str	r3, [sp, #108]	; 0x6c
   83184:	461a      	mov	r2, r3
   83186:	4654      	mov	r4, sl
   83188:	e6cb      	b.n	82f22 <_vfiprintf_r+0x6b6>
   8318a:	2a00      	cmp	r2, #0
   8318c:	f040 80a5 	bne.w	832da <_vfiprintf_r+0xa6e>
   83190:	2001      	movs	r0, #1
   83192:	4611      	mov	r1, r2
   83194:	4654      	mov	r4, sl
   83196:	e6c7      	b.n	82f28 <_vfiprintf_r+0x6bc>
   83198:	bb03      	cbnz	r3, 831dc <_vfiprintf_r+0x970>
   8319a:	f018 0f01 	tst.w	r8, #1
   8319e:	d01d      	beq.n	831dc <_vfiprintf_r+0x970>
   831a0:	ab2a      	add	r3, sp, #168	; 0xa8
   831a2:	2230      	movs	r2, #48	; 0x30
   831a4:	f803 2d41 	strb.w	r2, [r3, #-65]!
   831a8:	ebc3 090a 	rsb	r9, r3, sl
   831ac:	9307      	str	r3, [sp, #28]
   831ae:	e48f      	b.n	82ad0 <_vfiprintf_r+0x264>
   831b0:	46d1      	mov	r9, sl
   831b2:	9809      	ldr	r0, [sp, #36]	; 0x24
   831b4:	0933      	lsrs	r3, r6, #4
   831b6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   831ba:	0939      	lsrs	r1, r7, #4
   831bc:	f006 020f 	and.w	r2, r6, #15
   831c0:	460f      	mov	r7, r1
   831c2:	461e      	mov	r6, r3
   831c4:	5c83      	ldrb	r3, [r0, r2]
   831c6:	f809 3d01 	strb.w	r3, [r9, #-1]!
   831ca:	ea56 0307 	orrs.w	r3, r6, r7
   831ce:	d1f1      	bne.n	831b4 <_vfiprintf_r+0x948>
   831d0:	464b      	mov	r3, r9
   831d2:	f8cd 901c 	str.w	r9, [sp, #28]
   831d6:	ebc3 090a 	rsb	r9, r3, sl
   831da:	e479      	b.n	82ad0 <_vfiprintf_r+0x264>
   831dc:	f8cd a01c 	str.w	sl, [sp, #28]
   831e0:	e476      	b.n	82ad0 <_vfiprintf_r+0x264>
   831e2:	2302      	movs	r3, #2
   831e4:	e445      	b.n	82a72 <_vfiprintf_r+0x206>
   831e6:	bf00      	nop
   831e8:	000855c4 	.word	0x000855c4
   831ec:	00085604 	.word	0x00085604
   831f0:	2a00      	cmp	r2, #0
   831f2:	f040 80d5 	bne.w	833a0 <_vfiprintf_r+0xb34>
   831f6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   831fa:	2b00      	cmp	r3, #0
   831fc:	f000 80ac 	beq.w	83358 <_vfiprintf_r+0xaec>
   83200:	2301      	movs	r3, #1
   83202:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   83206:	4618      	mov	r0, r3
   83208:	931b      	str	r3, [sp, #108]	; 0x6c
   8320a:	461a      	mov	r2, r3
   8320c:	911a      	str	r1, [sp, #104]	; 0x68
   8320e:	4654      	mov	r4, sl
   83210:	e678      	b.n	82f04 <_vfiprintf_r+0x698>
   83212:	9a03      	ldr	r2, [sp, #12]
   83214:	1b95      	subs	r5, r2, r6
   83216:	2d00      	cmp	r5, #0
   83218:	4652      	mov	r2, sl
   8321a:	f73f af09 	bgt.w	83030 <_vfiprintf_r+0x7c4>
   8321e:	e6c8      	b.n	82fb2 <_vfiprintf_r+0x746>
   83220:	465d      	mov	r5, fp
   83222:	f7ff bb7c 	b.w	8291e <_vfiprintf_r+0xb2>
   83226:	9801      	ldr	r0, [sp, #4]
   83228:	9900      	ldr	r1, [sp, #0]
   8322a:	aa0d      	add	r2, sp, #52	; 0x34
   8322c:	f7ff fae2 	bl	827f4 <__sprint_r.part.0>
   83230:	2800      	cmp	r0, #0
   83232:	f47f aede 	bne.w	82ff2 <_vfiprintf_r+0x786>
   83236:	4652      	mov	r2, sl
   83238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8323a:	e6f2      	b.n	83022 <_vfiprintf_r+0x7b6>
   8323c:	9904      	ldr	r1, [sp, #16]
   8323e:	2700      	movs	r7, #0
   83240:	460a      	mov	r2, r1
   83242:	3204      	adds	r2, #4
   83244:	680e      	ldr	r6, [r1, #0]
   83246:	9204      	str	r2, [sp, #16]
   83248:	e413      	b.n	82a72 <_vfiprintf_r+0x206>
   8324a:	3204      	adds	r2, #4
   8324c:	681e      	ldr	r6, [r3, #0]
   8324e:	2700      	movs	r7, #0
   83250:	2301      	movs	r3, #1
   83252:	9204      	str	r2, [sp, #16]
   83254:	e40d      	b.n	82a72 <_vfiprintf_r+0x206>
   83256:	6816      	ldr	r6, [r2, #0]
   83258:	3204      	adds	r2, #4
   8325a:	9204      	str	r2, [sp, #16]
   8325c:	2700      	movs	r7, #0
   8325e:	e52d      	b.n	82cbc <_vfiprintf_r+0x450>
   83260:	681e      	ldr	r6, [r3, #0]
   83262:	3304      	adds	r3, #4
   83264:	17f7      	asrs	r7, r6, #31
   83266:	9304      	str	r3, [sp, #16]
   83268:	4632      	mov	r2, r6
   8326a:	463b      	mov	r3, r7
   8326c:	e4c1      	b.n	82bf2 <_vfiprintf_r+0x386>
   8326e:	9801      	ldr	r0, [sp, #4]
   83270:	9900      	ldr	r1, [sp, #0]
   83272:	aa0d      	add	r2, sp, #52	; 0x34
   83274:	f7ff fabe 	bl	827f4 <__sprint_r.part.0>
   83278:	2800      	cmp	r0, #0
   8327a:	f47f aeba 	bne.w	82ff2 <_vfiprintf_r+0x786>
   8327e:	4654      	mov	r4, sl
   83280:	f7ff bbc0 	b.w	82a04 <_vfiprintf_r+0x198>
   83284:	4608      	mov	r0, r1
   83286:	4654      	mov	r4, sl
   83288:	4611      	mov	r1, r2
   8328a:	e64d      	b.n	82f28 <_vfiprintf_r+0x6bc>
   8328c:	46d1      	mov	r9, sl
   8328e:	f8cd c014 	str.w	ip, [sp, #20]
   83292:	4630      	mov	r0, r6
   83294:	4639      	mov	r1, r7
   83296:	220a      	movs	r2, #10
   83298:	2300      	movs	r3, #0
   8329a:	f001 fe99 	bl	84fd0 <__aeabi_uldivmod>
   8329e:	3230      	adds	r2, #48	; 0x30
   832a0:	4630      	mov	r0, r6
   832a2:	4639      	mov	r1, r7
   832a4:	f809 2d01 	strb.w	r2, [r9, #-1]!
   832a8:	2300      	movs	r3, #0
   832aa:	220a      	movs	r2, #10
   832ac:	f001 fe90 	bl	84fd0 <__aeabi_uldivmod>
   832b0:	4606      	mov	r6, r0
   832b2:	460f      	mov	r7, r1
   832b4:	ea56 0307 	orrs.w	r3, r6, r7
   832b8:	d1eb      	bne.n	83292 <_vfiprintf_r+0xa26>
   832ba:	f8dd c014 	ldr.w	ip, [sp, #20]
   832be:	e787      	b.n	831d0 <_vfiprintf_r+0x964>
   832c0:	2b30      	cmp	r3, #48	; 0x30
   832c2:	9b07      	ldr	r3, [sp, #28]
   832c4:	d087      	beq.n	831d6 <_vfiprintf_r+0x96a>
   832c6:	3b01      	subs	r3, #1
   832c8:	461a      	mov	r2, r3
   832ca:	9307      	str	r3, [sp, #28]
   832cc:	2330      	movs	r3, #48	; 0x30
   832ce:	ebc2 090a 	rsb	r9, r2, sl
   832d2:	f801 3c01 	strb.w	r3, [r1, #-1]
   832d6:	f7ff bbfb 	b.w	82ad0 <_vfiprintf_r+0x264>
   832da:	9801      	ldr	r0, [sp, #4]
   832dc:	9900      	ldr	r1, [sp, #0]
   832de:	aa0d      	add	r2, sp, #52	; 0x34
   832e0:	f8cd c014 	str.w	ip, [sp, #20]
   832e4:	f7ff fa86 	bl	827f4 <__sprint_r.part.0>
   832e8:	2800      	cmp	r0, #0
   832ea:	f47f ae82 	bne.w	82ff2 <_vfiprintf_r+0x786>
   832ee:	990e      	ldr	r1, [sp, #56]	; 0x38
   832f0:	4654      	mov	r4, sl
   832f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   832f4:	1c48      	adds	r0, r1, #1
   832f6:	f8dd c014 	ldr.w	ip, [sp, #20]
   832fa:	e615      	b.n	82f28 <_vfiprintf_r+0x6bc>
   832fc:	9801      	ldr	r0, [sp, #4]
   832fe:	9900      	ldr	r1, [sp, #0]
   83300:	aa0d      	add	r2, sp, #52	; 0x34
   83302:	f8cd c020 	str.w	ip, [sp, #32]
   83306:	f7ff fa75 	bl	827f4 <__sprint_r.part.0>
   8330a:	2800      	cmp	r0, #0
   8330c:	f47f ae71 	bne.w	82ff2 <_vfiprintf_r+0x786>
   83310:	990e      	ldr	r1, [sp, #56]	; 0x38
   83312:	4654      	mov	r4, sl
   83314:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83316:	1c48      	adds	r0, r1, #1
   83318:	f8dd c020 	ldr.w	ip, [sp, #32]
   8331c:	e5f5      	b.n	82f0a <_vfiprintf_r+0x69e>
   8331e:	2a00      	cmp	r2, #0
   83320:	d167      	bne.n	833f2 <_vfiprintf_r+0xb86>
   83322:	2001      	movs	r0, #1
   83324:	4611      	mov	r1, r2
   83326:	4654      	mov	r4, sl
   83328:	e602      	b.n	82f30 <_vfiprintf_r+0x6c4>
   8332a:	9801      	ldr	r0, [sp, #4]
   8332c:	9900      	ldr	r1, [sp, #0]
   8332e:	aa0d      	add	r2, sp, #52	; 0x34
   83330:	f7ff fa60 	bl	827f4 <__sprint_r.part.0>
   83334:	2800      	cmp	r0, #0
   83336:	f47f ae5c 	bne.w	82ff2 <_vfiprintf_r+0x786>
   8333a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8333c:	4654      	mov	r4, sl
   8333e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83340:	3001      	adds	r0, #1
   83342:	e625      	b.n	82f90 <_vfiprintf_r+0x724>
   83344:	252d      	movs	r5, #45	; 0x2d
   83346:	4276      	negs	r6, r6
   83348:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8334c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   83350:	46e1      	mov	r9, ip
   83352:	2301      	movs	r3, #1
   83354:	f7ff bb93 	b.w	82a7e <_vfiprintf_r+0x212>
   83358:	9b05      	ldr	r3, [sp, #20]
   8335a:	4611      	mov	r1, r2
   8335c:	2001      	movs	r0, #1
   8335e:	4654      	mov	r4, sl
   83360:	2b00      	cmp	r3, #0
   83362:	f43f ade5 	beq.w	82f30 <_vfiprintf_r+0x6c4>
   83366:	aa0c      	add	r2, sp, #48	; 0x30
   83368:	2302      	movs	r3, #2
   8336a:	e88a 000c 	stmia.w	sl, {r2, r3}
   8336e:	461a      	mov	r2, r3
   83370:	e5d7      	b.n	82f22 <_vfiprintf_r+0x6b6>
   83372:	f018 0f10 	tst.w	r8, #16
   83376:	d10b      	bne.n	83390 <_vfiprintf_r+0xb24>
   83378:	f018 0f40 	tst.w	r8, #64	; 0x40
   8337c:	d008      	beq.n	83390 <_vfiprintf_r+0xb24>
   8337e:	9a04      	ldr	r2, [sp, #16]
   83380:	6813      	ldr	r3, [r2, #0]
   83382:	3204      	adds	r2, #4
   83384:	9204      	str	r2, [sp, #16]
   83386:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   8338a:	801a      	strh	r2, [r3, #0]
   8338c:	f7ff baa0 	b.w	828d0 <_vfiprintf_r+0x64>
   83390:	9a04      	ldr	r2, [sp, #16]
   83392:	6813      	ldr	r3, [r2, #0]
   83394:	3204      	adds	r2, #4
   83396:	9204      	str	r2, [sp, #16]
   83398:	9a02      	ldr	r2, [sp, #8]
   8339a:	601a      	str	r2, [r3, #0]
   8339c:	f7ff ba98 	b.w	828d0 <_vfiprintf_r+0x64>
   833a0:	9801      	ldr	r0, [sp, #4]
   833a2:	9900      	ldr	r1, [sp, #0]
   833a4:	aa0d      	add	r2, sp, #52	; 0x34
   833a6:	f8cd c020 	str.w	ip, [sp, #32]
   833aa:	f7ff fa23 	bl	827f4 <__sprint_r.part.0>
   833ae:	2800      	cmp	r0, #0
   833b0:	f47f ae1f 	bne.w	82ff2 <_vfiprintf_r+0x786>
   833b4:	990e      	ldr	r1, [sp, #56]	; 0x38
   833b6:	4654      	mov	r4, sl
   833b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   833ba:	1c48      	adds	r0, r1, #1
   833bc:	f8dd c020 	ldr.w	ip, [sp, #32]
   833c0:	e592      	b.n	82ee8 <_vfiprintf_r+0x67c>
   833c2:	f048 0820 	orr.w	r8, r8, #32
   833c6:	f10b 0001 	add.w	r0, fp, #1
   833ca:	f89b 3001 	ldrb.w	r3, [fp, #1]
   833ce:	f7ff bab6 	b.w	8293e <_vfiprintf_r+0xd2>
   833d2:	426d      	negs	r5, r5
   833d4:	9304      	str	r3, [sp, #16]
   833d6:	4658      	mov	r0, fp
   833d8:	f7ff bbc8 	b.w	82b6c <_vfiprintf_r+0x300>
   833dc:	9807      	ldr	r0, [sp, #28]
   833de:	9504      	str	r5, [sp, #16]
   833e0:	f7ff f96e 	bl	826c0 <strlen>
   833e4:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   833e8:	4681      	mov	r9, r0
   833ea:	f04f 0c00 	mov.w	ip, #0
   833ee:	f7ff bb6f 	b.w	82ad0 <_vfiprintf_r+0x264>
   833f2:	9801      	ldr	r0, [sp, #4]
   833f4:	9900      	ldr	r1, [sp, #0]
   833f6:	aa0d      	add	r2, sp, #52	; 0x34
   833f8:	f8cd c014 	str.w	ip, [sp, #20]
   833fc:	f7ff f9fa 	bl	827f4 <__sprint_r.part.0>
   83400:	2800      	cmp	r0, #0
   83402:	f47f adf6 	bne.w	82ff2 <_vfiprintf_r+0x786>
   83406:	990e      	ldr	r1, [sp, #56]	; 0x38
   83408:	4654      	mov	r4, sl
   8340a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8340c:	1c48      	adds	r0, r1, #1
   8340e:	f8dd c014 	ldr.w	ip, [sp, #20]
   83412:	e58d      	b.n	82f30 <_vfiprintf_r+0x6c4>
   83414:	990e      	ldr	r1, [sp, #56]	; 0x38
   83416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83418:	3101      	adds	r1, #1
   8341a:	4f15      	ldr	r7, [pc, #84]	; (83470 <_vfiprintf_r+0xc04>)
   8341c:	f7ff bb9a 	b.w	82b54 <_vfiprintf_r+0x2e8>
   83420:	2e06      	cmp	r6, #6
   83422:	4b14      	ldr	r3, [pc, #80]	; (83474 <_vfiprintf_r+0xc08>)
   83424:	bf28      	it	cs
   83426:	f04f 0c06 	movcs.w	ip, #6
   8342a:	46e1      	mov	r9, ip
   8342c:	9504      	str	r5, [sp, #16]
   8342e:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   83432:	9307      	str	r3, [sp, #28]
   83434:	e463      	b.n	82cfe <_vfiprintf_r+0x492>
   83436:	990e      	ldr	r1, [sp, #56]	; 0x38
   83438:	4f0d      	ldr	r7, [pc, #52]	; (83470 <_vfiprintf_r+0xc04>)
   8343a:	f101 0e01 	add.w	lr, r1, #1
   8343e:	e61a      	b.n	83076 <_vfiprintf_r+0x80a>
   83440:	46e1      	mov	r9, ip
   83442:	9504      	str	r5, [sp, #16]
   83444:	4684      	mov	ip, r0
   83446:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8344a:	f7ff bb41 	b.w	82ad0 <_vfiprintf_r+0x264>
   8344e:	4686      	mov	lr, r0
   83450:	4d09      	ldr	r5, [pc, #36]	; (83478 <_vfiprintf_r+0xc0c>)
   83452:	e66c      	b.n	8312e <_vfiprintf_r+0x8c2>
   83454:	9a04      	ldr	r2, [sp, #16]
   83456:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8345a:	6816      	ldr	r6, [r2, #0]
   8345c:	3204      	adds	r2, #4
   8345e:	2e00      	cmp	r6, #0
   83460:	9204      	str	r2, [sp, #16]
   83462:	f6bf aa6c 	bge.w	8293e <_vfiprintf_r+0xd2>
   83466:	f04f 36ff 	mov.w	r6, #4294967295
   8346a:	f7ff ba68 	b.w	8293e <_vfiprintf_r+0xd2>
   8346e:	bf00      	nop
   83470:	00085604 	.word	0x00085604
   83474:	000855fc 	.word	0x000855fc
   83478:	000855c4 	.word	0x000855c4

0008347c <__sbprintf>:
   8347c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   83480:	4688      	mov	r8, r1
   83482:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   83484:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   83488:	9719      	str	r7, [sp, #100]	; 0x64
   8348a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8348e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   83492:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   83496:	9707      	str	r7, [sp, #28]
   83498:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8349c:	ac1a      	add	r4, sp, #104	; 0x68
   8349e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   834a2:	f02e 0e02 	bic.w	lr, lr, #2
   834a6:	2600      	movs	r6, #0
   834a8:	4669      	mov	r1, sp
   834aa:	9400      	str	r4, [sp, #0]
   834ac:	9404      	str	r4, [sp, #16]
   834ae:	9502      	str	r5, [sp, #8]
   834b0:	9505      	str	r5, [sp, #20]
   834b2:	f8ad e00c 	strh.w	lr, [sp, #12]
   834b6:	f8ad a00e 	strh.w	sl, [sp, #14]
   834ba:	9709      	str	r7, [sp, #36]	; 0x24
   834bc:	9606      	str	r6, [sp, #24]
   834be:	4605      	mov	r5, r0
   834c0:	f7ff f9d4 	bl	8286c <_vfiprintf_r>
   834c4:	1e04      	subs	r4, r0, #0
   834c6:	db07      	blt.n	834d8 <__sbprintf+0x5c>
   834c8:	4628      	mov	r0, r5
   834ca:	4669      	mov	r1, sp
   834cc:	f000 f92a 	bl	83724 <_fflush_r>
   834d0:	42b0      	cmp	r0, r6
   834d2:	bf18      	it	ne
   834d4:	f04f 34ff 	movne.w	r4, #4294967295
   834d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   834dc:	065b      	lsls	r3, r3, #25
   834de:	d505      	bpl.n	834ec <__sbprintf+0x70>
   834e0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   834e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   834e8:	f8a8 300c 	strh.w	r3, [r8, #12]
   834ec:	4620      	mov	r0, r4
   834ee:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   834f2:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   834f6:	bf00      	nop

000834f8 <__swsetup_r>:
   834f8:	b538      	push	{r3, r4, r5, lr}
   834fa:	4b2f      	ldr	r3, [pc, #188]	; (835b8 <__swsetup_r+0xc0>)
   834fc:	4605      	mov	r5, r0
   834fe:	6818      	ldr	r0, [r3, #0]
   83500:	460c      	mov	r4, r1
   83502:	b110      	cbz	r0, 8350a <__swsetup_r+0x12>
   83504:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83506:	2b00      	cmp	r3, #0
   83508:	d036      	beq.n	83578 <__swsetup_r+0x80>
   8350a:	89a2      	ldrh	r2, [r4, #12]
   8350c:	b293      	uxth	r3, r2
   8350e:	0718      	lsls	r0, r3, #28
   83510:	d50c      	bpl.n	8352c <__swsetup_r+0x34>
   83512:	6920      	ldr	r0, [r4, #16]
   83514:	b1a8      	cbz	r0, 83542 <__swsetup_r+0x4a>
   83516:	f013 0201 	ands.w	r2, r3, #1
   8351a:	d01e      	beq.n	8355a <__swsetup_r+0x62>
   8351c:	6963      	ldr	r3, [r4, #20]
   8351e:	2200      	movs	r2, #0
   83520:	425b      	negs	r3, r3
   83522:	61a3      	str	r3, [r4, #24]
   83524:	60a2      	str	r2, [r4, #8]
   83526:	b1f0      	cbz	r0, 83566 <__swsetup_r+0x6e>
   83528:	2000      	movs	r0, #0
   8352a:	bd38      	pop	{r3, r4, r5, pc}
   8352c:	06d9      	lsls	r1, r3, #27
   8352e:	d53a      	bpl.n	835a6 <__swsetup_r+0xae>
   83530:	0758      	lsls	r0, r3, #29
   83532:	d424      	bmi.n	8357e <__swsetup_r+0x86>
   83534:	6920      	ldr	r0, [r4, #16]
   83536:	f042 0308 	orr.w	r3, r2, #8
   8353a:	81a3      	strh	r3, [r4, #12]
   8353c:	b29b      	uxth	r3, r3
   8353e:	2800      	cmp	r0, #0
   83540:	d1e9      	bne.n	83516 <__swsetup_r+0x1e>
   83542:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83546:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8354a:	d0e4      	beq.n	83516 <__swsetup_r+0x1e>
   8354c:	4628      	mov	r0, r5
   8354e:	4621      	mov	r1, r4
   83550:	f000 fd24 	bl	83f9c <__smakebuf_r>
   83554:	89a3      	ldrh	r3, [r4, #12]
   83556:	6920      	ldr	r0, [r4, #16]
   83558:	e7dd      	b.n	83516 <__swsetup_r+0x1e>
   8355a:	0799      	lsls	r1, r3, #30
   8355c:	bf58      	it	pl
   8355e:	6962      	ldrpl	r2, [r4, #20]
   83560:	60a2      	str	r2, [r4, #8]
   83562:	2800      	cmp	r0, #0
   83564:	d1e0      	bne.n	83528 <__swsetup_r+0x30>
   83566:	89a3      	ldrh	r3, [r4, #12]
   83568:	061a      	lsls	r2, r3, #24
   8356a:	d5de      	bpl.n	8352a <__swsetup_r+0x32>
   8356c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83570:	81a3      	strh	r3, [r4, #12]
   83572:	f04f 30ff 	mov.w	r0, #4294967295
   83576:	bd38      	pop	{r3, r4, r5, pc}
   83578:	f000 f97a 	bl	83870 <__sinit>
   8357c:	e7c5      	b.n	8350a <__swsetup_r+0x12>
   8357e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83580:	b149      	cbz	r1, 83596 <__swsetup_r+0x9e>
   83582:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83586:	4299      	cmp	r1, r3
   83588:	d003      	beq.n	83592 <__swsetup_r+0x9a>
   8358a:	4628      	mov	r0, r5
   8358c:	f000 fa48 	bl	83a20 <_free_r>
   83590:	89a2      	ldrh	r2, [r4, #12]
   83592:	2300      	movs	r3, #0
   83594:	6323      	str	r3, [r4, #48]	; 0x30
   83596:	6920      	ldr	r0, [r4, #16]
   83598:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8359c:	2300      	movs	r3, #0
   8359e:	b292      	uxth	r2, r2
   835a0:	e884 0009 	stmia.w	r4, {r0, r3}
   835a4:	e7c7      	b.n	83536 <__swsetup_r+0x3e>
   835a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   835aa:	2309      	movs	r3, #9
   835ac:	602b      	str	r3, [r5, #0]
   835ae:	f04f 30ff 	mov.w	r0, #4294967295
   835b2:	81a2      	strh	r2, [r4, #12]
   835b4:	bd38      	pop	{r3, r4, r5, pc}
   835b6:	bf00      	nop
   835b8:	20070570 	.word	0x20070570

000835bc <register_fini>:
   835bc:	4b02      	ldr	r3, [pc, #8]	; (835c8 <register_fini+0xc>)
   835be:	b113      	cbz	r3, 835c6 <register_fini+0xa>
   835c0:	4802      	ldr	r0, [pc, #8]	; (835cc <register_fini+0x10>)
   835c2:	f000 b805 	b.w	835d0 <atexit>
   835c6:	4770      	bx	lr
   835c8:	00000000 	.word	0x00000000
   835cc:	00083885 	.word	0x00083885

000835d0 <atexit>:
   835d0:	4601      	mov	r1, r0
   835d2:	2000      	movs	r0, #0
   835d4:	4602      	mov	r2, r0
   835d6:	4603      	mov	r3, r0
   835d8:	f001 bc06 	b.w	84de8 <__register_exitproc>

000835dc <__sflush_r>:
   835dc:	898b      	ldrh	r3, [r1, #12]
   835de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835e2:	b29a      	uxth	r2, r3
   835e4:	460d      	mov	r5, r1
   835e6:	0711      	lsls	r1, r2, #28
   835e8:	4680      	mov	r8, r0
   835ea:	d43c      	bmi.n	83666 <__sflush_r+0x8a>
   835ec:	686a      	ldr	r2, [r5, #4]
   835ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   835f2:	2a00      	cmp	r2, #0
   835f4:	81ab      	strh	r3, [r5, #12]
   835f6:	dd65      	ble.n	836c4 <__sflush_r+0xe8>
   835f8:	6aae      	ldr	r6, [r5, #40]	; 0x28
   835fa:	2e00      	cmp	r6, #0
   835fc:	d04b      	beq.n	83696 <__sflush_r+0xba>
   835fe:	b29b      	uxth	r3, r3
   83600:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83604:	2100      	movs	r1, #0
   83606:	b292      	uxth	r2, r2
   83608:	f8d8 4000 	ldr.w	r4, [r8]
   8360c:	f8c8 1000 	str.w	r1, [r8]
   83610:	2a00      	cmp	r2, #0
   83612:	d05b      	beq.n	836cc <__sflush_r+0xf0>
   83614:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83616:	075f      	lsls	r7, r3, #29
   83618:	d505      	bpl.n	83626 <__sflush_r+0x4a>
   8361a:	6869      	ldr	r1, [r5, #4]
   8361c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8361e:	1a52      	subs	r2, r2, r1
   83620:	b10b      	cbz	r3, 83626 <__sflush_r+0x4a>
   83622:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83624:	1ad2      	subs	r2, r2, r3
   83626:	4640      	mov	r0, r8
   83628:	69e9      	ldr	r1, [r5, #28]
   8362a:	2300      	movs	r3, #0
   8362c:	47b0      	blx	r6
   8362e:	1c46      	adds	r6, r0, #1
   83630:	d056      	beq.n	836e0 <__sflush_r+0x104>
   83632:	89ab      	ldrh	r3, [r5, #12]
   83634:	692a      	ldr	r2, [r5, #16]
   83636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8363a:	b29b      	uxth	r3, r3
   8363c:	2100      	movs	r1, #0
   8363e:	602a      	str	r2, [r5, #0]
   83640:	04da      	lsls	r2, r3, #19
   83642:	81ab      	strh	r3, [r5, #12]
   83644:	6069      	str	r1, [r5, #4]
   83646:	d43b      	bmi.n	836c0 <__sflush_r+0xe4>
   83648:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8364a:	f8c8 4000 	str.w	r4, [r8]
   8364e:	b311      	cbz	r1, 83696 <__sflush_r+0xba>
   83650:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83654:	4299      	cmp	r1, r3
   83656:	d002      	beq.n	8365e <__sflush_r+0x82>
   83658:	4640      	mov	r0, r8
   8365a:	f000 f9e1 	bl	83a20 <_free_r>
   8365e:	2000      	movs	r0, #0
   83660:	6328      	str	r0, [r5, #48]	; 0x30
   83662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83666:	692e      	ldr	r6, [r5, #16]
   83668:	b1ae      	cbz	r6, 83696 <__sflush_r+0xba>
   8366a:	0791      	lsls	r1, r2, #30
   8366c:	682c      	ldr	r4, [r5, #0]
   8366e:	bf0c      	ite	eq
   83670:	696b      	ldreq	r3, [r5, #20]
   83672:	2300      	movne	r3, #0
   83674:	602e      	str	r6, [r5, #0]
   83676:	1ba4      	subs	r4, r4, r6
   83678:	60ab      	str	r3, [r5, #8]
   8367a:	e00a      	b.n	83692 <__sflush_r+0xb6>
   8367c:	4632      	mov	r2, r6
   8367e:	4623      	mov	r3, r4
   83680:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83682:	4640      	mov	r0, r8
   83684:	69e9      	ldr	r1, [r5, #28]
   83686:	47b8      	blx	r7
   83688:	2800      	cmp	r0, #0
   8368a:	eba4 0400 	sub.w	r4, r4, r0
   8368e:	4406      	add	r6, r0
   83690:	dd04      	ble.n	8369c <__sflush_r+0xc0>
   83692:	2c00      	cmp	r4, #0
   83694:	dcf2      	bgt.n	8367c <__sflush_r+0xa0>
   83696:	2000      	movs	r0, #0
   83698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8369c:	89ab      	ldrh	r3, [r5, #12]
   8369e:	f04f 30ff 	mov.w	r0, #4294967295
   836a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   836a6:	81ab      	strh	r3, [r5, #12]
   836a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836ac:	89ab      	ldrh	r3, [r5, #12]
   836ae:	692a      	ldr	r2, [r5, #16]
   836b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   836b4:	b29b      	uxth	r3, r3
   836b6:	81ab      	strh	r3, [r5, #12]
   836b8:	04db      	lsls	r3, r3, #19
   836ba:	6069      	str	r1, [r5, #4]
   836bc:	602a      	str	r2, [r5, #0]
   836be:	d5c3      	bpl.n	83648 <__sflush_r+0x6c>
   836c0:	6528      	str	r0, [r5, #80]	; 0x50
   836c2:	e7c1      	b.n	83648 <__sflush_r+0x6c>
   836c4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   836c6:	2a00      	cmp	r2, #0
   836c8:	dc96      	bgt.n	835f8 <__sflush_r+0x1c>
   836ca:	e7e4      	b.n	83696 <__sflush_r+0xba>
   836cc:	2301      	movs	r3, #1
   836ce:	4640      	mov	r0, r8
   836d0:	69e9      	ldr	r1, [r5, #28]
   836d2:	47b0      	blx	r6
   836d4:	1c43      	adds	r3, r0, #1
   836d6:	4602      	mov	r2, r0
   836d8:	d019      	beq.n	8370e <__sflush_r+0x132>
   836da:	89ab      	ldrh	r3, [r5, #12]
   836dc:	6aae      	ldr	r6, [r5, #40]	; 0x28
   836de:	e79a      	b.n	83616 <__sflush_r+0x3a>
   836e0:	f8d8 1000 	ldr.w	r1, [r8]
   836e4:	2900      	cmp	r1, #0
   836e6:	d0e1      	beq.n	836ac <__sflush_r+0xd0>
   836e8:	291d      	cmp	r1, #29
   836ea:	d007      	beq.n	836fc <__sflush_r+0x120>
   836ec:	2916      	cmp	r1, #22
   836ee:	d005      	beq.n	836fc <__sflush_r+0x120>
   836f0:	89ab      	ldrh	r3, [r5, #12]
   836f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   836f6:	81ab      	strh	r3, [r5, #12]
   836f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836fc:	89ab      	ldrh	r3, [r5, #12]
   836fe:	6929      	ldr	r1, [r5, #16]
   83700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83704:	2200      	movs	r2, #0
   83706:	81ab      	strh	r3, [r5, #12]
   83708:	e885 0006 	stmia.w	r5, {r1, r2}
   8370c:	e79c      	b.n	83648 <__sflush_r+0x6c>
   8370e:	f8d8 3000 	ldr.w	r3, [r8]
   83712:	2b00      	cmp	r3, #0
   83714:	d0e1      	beq.n	836da <__sflush_r+0xfe>
   83716:	2b1d      	cmp	r3, #29
   83718:	d001      	beq.n	8371e <__sflush_r+0x142>
   8371a:	2b16      	cmp	r3, #22
   8371c:	d1be      	bne.n	8369c <__sflush_r+0xc0>
   8371e:	f8c8 4000 	str.w	r4, [r8]
   83722:	e7b8      	b.n	83696 <__sflush_r+0xba>

00083724 <_fflush_r>:
   83724:	b510      	push	{r4, lr}
   83726:	4604      	mov	r4, r0
   83728:	b082      	sub	sp, #8
   8372a:	b108      	cbz	r0, 83730 <_fflush_r+0xc>
   8372c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8372e:	b153      	cbz	r3, 83746 <_fflush_r+0x22>
   83730:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83734:	b908      	cbnz	r0, 8373a <_fflush_r+0x16>
   83736:	b002      	add	sp, #8
   83738:	bd10      	pop	{r4, pc}
   8373a:	4620      	mov	r0, r4
   8373c:	b002      	add	sp, #8
   8373e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83742:	f7ff bf4b 	b.w	835dc <__sflush_r>
   83746:	9101      	str	r1, [sp, #4]
   83748:	f000 f892 	bl	83870 <__sinit>
   8374c:	9901      	ldr	r1, [sp, #4]
   8374e:	e7ef      	b.n	83730 <_fflush_r+0xc>

00083750 <fflush>:
   83750:	b120      	cbz	r0, 8375c <fflush+0xc>
   83752:	4b05      	ldr	r3, [pc, #20]	; (83768 <fflush+0x18>)
   83754:	4601      	mov	r1, r0
   83756:	6818      	ldr	r0, [r3, #0]
   83758:	f7ff bfe4 	b.w	83724 <_fflush_r>
   8375c:	4b03      	ldr	r3, [pc, #12]	; (8376c <fflush+0x1c>)
   8375e:	4904      	ldr	r1, [pc, #16]	; (83770 <fflush+0x20>)
   83760:	6818      	ldr	r0, [r3, #0]
   83762:	f000 bbe9 	b.w	83f38 <_fwalk_reent>
   83766:	bf00      	nop
   83768:	20070570 	.word	0x20070570
   8376c:	000855c0 	.word	0x000855c0
   83770:	00083725 	.word	0x00083725

00083774 <_cleanup_r>:
   83774:	4901      	ldr	r1, [pc, #4]	; (8377c <_cleanup_r+0x8>)
   83776:	f000 bbdf 	b.w	83f38 <_fwalk_reent>
   8377a:	bf00      	nop
   8377c:	00084eb1 	.word	0x00084eb1

00083780 <__sinit.part.1>:
   83780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83784:	4607      	mov	r7, r0
   83786:	4835      	ldr	r0, [pc, #212]	; (8385c <__sinit.part.1+0xdc>)
   83788:	687d      	ldr	r5, [r7, #4]
   8378a:	2400      	movs	r4, #0
   8378c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83790:	2304      	movs	r3, #4
   83792:	2103      	movs	r1, #3
   83794:	63f8      	str	r0, [r7, #60]	; 0x3c
   83796:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8379a:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8379e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   837a2:	b083      	sub	sp, #12
   837a4:	602c      	str	r4, [r5, #0]
   837a6:	606c      	str	r4, [r5, #4]
   837a8:	60ac      	str	r4, [r5, #8]
   837aa:	666c      	str	r4, [r5, #100]	; 0x64
   837ac:	81ec      	strh	r4, [r5, #14]
   837ae:	612c      	str	r4, [r5, #16]
   837b0:	616c      	str	r4, [r5, #20]
   837b2:	61ac      	str	r4, [r5, #24]
   837b4:	81ab      	strh	r3, [r5, #12]
   837b6:	4621      	mov	r1, r4
   837b8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   837bc:	2208      	movs	r2, #8
   837be:	f7fe fe93 	bl	824e8 <memset>
   837c2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83860 <__sinit.part.1+0xe0>
   837c6:	68be      	ldr	r6, [r7, #8]
   837c8:	f8df a098 	ldr.w	sl, [pc, #152]	; 83864 <__sinit.part.1+0xe4>
   837cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83868 <__sinit.part.1+0xe8>
   837d0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8386c <__sinit.part.1+0xec>
   837d4:	2301      	movs	r3, #1
   837d6:	2209      	movs	r2, #9
   837d8:	f8c5 b020 	str.w	fp, [r5, #32]
   837dc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   837e0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   837e4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   837e8:	61ed      	str	r5, [r5, #28]
   837ea:	4621      	mov	r1, r4
   837ec:	81f3      	strh	r3, [r6, #14]
   837ee:	81b2      	strh	r2, [r6, #12]
   837f0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   837f4:	6034      	str	r4, [r6, #0]
   837f6:	6074      	str	r4, [r6, #4]
   837f8:	60b4      	str	r4, [r6, #8]
   837fa:	6674      	str	r4, [r6, #100]	; 0x64
   837fc:	6134      	str	r4, [r6, #16]
   837fe:	6174      	str	r4, [r6, #20]
   83800:	61b4      	str	r4, [r6, #24]
   83802:	2208      	movs	r2, #8
   83804:	9301      	str	r3, [sp, #4]
   83806:	f7fe fe6f 	bl	824e8 <memset>
   8380a:	68fd      	ldr	r5, [r7, #12]
   8380c:	2012      	movs	r0, #18
   8380e:	2202      	movs	r2, #2
   83810:	61f6      	str	r6, [r6, #28]
   83812:	f8c6 b020 	str.w	fp, [r6, #32]
   83816:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8381a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8381e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83822:	4621      	mov	r1, r4
   83824:	81a8      	strh	r0, [r5, #12]
   83826:	81ea      	strh	r2, [r5, #14]
   83828:	602c      	str	r4, [r5, #0]
   8382a:	606c      	str	r4, [r5, #4]
   8382c:	60ac      	str	r4, [r5, #8]
   8382e:	666c      	str	r4, [r5, #100]	; 0x64
   83830:	612c      	str	r4, [r5, #16]
   83832:	616c      	str	r4, [r5, #20]
   83834:	61ac      	str	r4, [r5, #24]
   83836:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8383a:	2208      	movs	r2, #8
   8383c:	f7fe fe54 	bl	824e8 <memset>
   83840:	9b01      	ldr	r3, [sp, #4]
   83842:	61ed      	str	r5, [r5, #28]
   83844:	f8c5 b020 	str.w	fp, [r5, #32]
   83848:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8384c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83850:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83854:	63bb      	str	r3, [r7, #56]	; 0x38
   83856:	b003      	add	sp, #12
   83858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8385c:	00083775 	.word	0x00083775
   83860:	00084c25 	.word	0x00084c25
   83864:	00084c49 	.word	0x00084c49
   83868:	00084c81 	.word	0x00084c81
   8386c:	00084ca1 	.word	0x00084ca1

00083870 <__sinit>:
   83870:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83872:	b103      	cbz	r3, 83876 <__sinit+0x6>
   83874:	4770      	bx	lr
   83876:	f7ff bf83 	b.w	83780 <__sinit.part.1>
   8387a:	bf00      	nop

0008387c <__sfp_lock_acquire>:
   8387c:	4770      	bx	lr
   8387e:	bf00      	nop

00083880 <__sfp_lock_release>:
   83880:	4770      	bx	lr
   83882:	bf00      	nop

00083884 <__libc_fini_array>:
   83884:	b538      	push	{r3, r4, r5, lr}
   83886:	4b08      	ldr	r3, [pc, #32]	; (838a8 <__libc_fini_array+0x24>)
   83888:	4d08      	ldr	r5, [pc, #32]	; (838ac <__libc_fini_array+0x28>)
   8388a:	1aed      	subs	r5, r5, r3
   8388c:	10ac      	asrs	r4, r5, #2
   8388e:	bf18      	it	ne
   83890:	18ed      	addne	r5, r5, r3
   83892:	d005      	beq.n	838a0 <__libc_fini_array+0x1c>
   83894:	3c01      	subs	r4, #1
   83896:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8389a:	4798      	blx	r3
   8389c:	2c00      	cmp	r4, #0
   8389e:	d1f9      	bne.n	83894 <__libc_fini_array+0x10>
   838a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   838a4:	f001 bec0 	b.w	85628 <_fini>
   838a8:	00085634 	.word	0x00085634
   838ac:	00085638 	.word	0x00085638

000838b0 <__fputwc>:
   838b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   838b4:	b082      	sub	sp, #8
   838b6:	4607      	mov	r7, r0
   838b8:	460e      	mov	r6, r1
   838ba:	4614      	mov	r4, r2
   838bc:	f000 fb68 	bl	83f90 <__locale_mb_cur_max>
   838c0:	2801      	cmp	r0, #1
   838c2:	d040      	beq.n	83946 <__fputwc+0x96>
   838c4:	4638      	mov	r0, r7
   838c6:	a901      	add	r1, sp, #4
   838c8:	4632      	mov	r2, r6
   838ca:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   838ce:	f001 fa3f 	bl	84d50 <_wcrtomb_r>
   838d2:	f1b0 3fff 	cmp.w	r0, #4294967295
   838d6:	4680      	mov	r8, r0
   838d8:	d02e      	beq.n	83938 <__fputwc+0x88>
   838da:	2800      	cmp	r0, #0
   838dc:	d03b      	beq.n	83956 <__fputwc+0xa6>
   838de:	f89d 1004 	ldrb.w	r1, [sp, #4]
   838e2:	2500      	movs	r5, #0
   838e4:	e009      	b.n	838fa <__fputwc+0x4a>
   838e6:	6823      	ldr	r3, [r4, #0]
   838e8:	7019      	strb	r1, [r3, #0]
   838ea:	6823      	ldr	r3, [r4, #0]
   838ec:	3301      	adds	r3, #1
   838ee:	6023      	str	r3, [r4, #0]
   838f0:	3501      	adds	r5, #1
   838f2:	45a8      	cmp	r8, r5
   838f4:	d92f      	bls.n	83956 <__fputwc+0xa6>
   838f6:	ab01      	add	r3, sp, #4
   838f8:	5d59      	ldrb	r1, [r3, r5]
   838fa:	68a3      	ldr	r3, [r4, #8]
   838fc:	3b01      	subs	r3, #1
   838fe:	2b00      	cmp	r3, #0
   83900:	60a3      	str	r3, [r4, #8]
   83902:	daf0      	bge.n	838e6 <__fputwc+0x36>
   83904:	69a2      	ldr	r2, [r4, #24]
   83906:	4293      	cmp	r3, r2
   83908:	db06      	blt.n	83918 <__fputwc+0x68>
   8390a:	6823      	ldr	r3, [r4, #0]
   8390c:	7019      	strb	r1, [r3, #0]
   8390e:	6823      	ldr	r3, [r4, #0]
   83910:	7819      	ldrb	r1, [r3, #0]
   83912:	3301      	adds	r3, #1
   83914:	290a      	cmp	r1, #10
   83916:	d1ea      	bne.n	838ee <__fputwc+0x3e>
   83918:	4638      	mov	r0, r7
   8391a:	4622      	mov	r2, r4
   8391c:	f001 f9c4 	bl	84ca8 <__swbuf_r>
   83920:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   83924:	fab0 f080 	clz	r0, r0
   83928:	0940      	lsrs	r0, r0, #5
   8392a:	2800      	cmp	r0, #0
   8392c:	d0e0      	beq.n	838f0 <__fputwc+0x40>
   8392e:	f04f 30ff 	mov.w	r0, #4294967295
   83932:	b002      	add	sp, #8
   83934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83938:	89a3      	ldrh	r3, [r4, #12]
   8393a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8393e:	81a3      	strh	r3, [r4, #12]
   83940:	b002      	add	sp, #8
   83942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83946:	1e73      	subs	r3, r6, #1
   83948:	2bfe      	cmp	r3, #254	; 0xfe
   8394a:	d8bb      	bhi.n	838c4 <__fputwc+0x14>
   8394c:	b2f1      	uxtb	r1, r6
   8394e:	4680      	mov	r8, r0
   83950:	f88d 1004 	strb.w	r1, [sp, #4]
   83954:	e7c5      	b.n	838e2 <__fputwc+0x32>
   83956:	4630      	mov	r0, r6
   83958:	b002      	add	sp, #8
   8395a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8395e:	bf00      	nop

00083960 <_fputwc_r>:
   83960:	8993      	ldrh	r3, [r2, #12]
   83962:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   83966:	d10b      	bne.n	83980 <_fputwc_r+0x20>
   83968:	b410      	push	{r4}
   8396a:	6e54      	ldr	r4, [r2, #100]	; 0x64
   8396c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83970:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   83974:	6654      	str	r4, [r2, #100]	; 0x64
   83976:	8193      	strh	r3, [r2, #12]
   83978:	f85d 4b04 	ldr.w	r4, [sp], #4
   8397c:	f7ff bf98 	b.w	838b0 <__fputwc>
   83980:	f7ff bf96 	b.w	838b0 <__fputwc>

00083984 <_malloc_trim_r>:
   83984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83986:	460c      	mov	r4, r1
   83988:	4f22      	ldr	r7, [pc, #136]	; (83a14 <_malloc_trim_r+0x90>)
   8398a:	4606      	mov	r6, r0
   8398c:	f000 feb2 	bl	846f4 <__malloc_lock>
   83990:	68bb      	ldr	r3, [r7, #8]
   83992:	685d      	ldr	r5, [r3, #4]
   83994:	f025 0503 	bic.w	r5, r5, #3
   83998:	1b29      	subs	r1, r5, r4
   8399a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8399e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   839a2:	f021 010f 	bic.w	r1, r1, #15
   839a6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   839aa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   839ae:	db07      	blt.n	839c0 <_malloc_trim_r+0x3c>
   839b0:	4630      	mov	r0, r6
   839b2:	2100      	movs	r1, #0
   839b4:	f001 f924 	bl	84c00 <_sbrk_r>
   839b8:	68bb      	ldr	r3, [r7, #8]
   839ba:	442b      	add	r3, r5
   839bc:	4298      	cmp	r0, r3
   839be:	d004      	beq.n	839ca <_malloc_trim_r+0x46>
   839c0:	4630      	mov	r0, r6
   839c2:	f000 fe99 	bl	846f8 <__malloc_unlock>
   839c6:	2000      	movs	r0, #0
   839c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839ca:	4630      	mov	r0, r6
   839cc:	4261      	negs	r1, r4
   839ce:	f001 f917 	bl	84c00 <_sbrk_r>
   839d2:	3001      	adds	r0, #1
   839d4:	d00d      	beq.n	839f2 <_malloc_trim_r+0x6e>
   839d6:	4b10      	ldr	r3, [pc, #64]	; (83a18 <_malloc_trim_r+0x94>)
   839d8:	68ba      	ldr	r2, [r7, #8]
   839da:	6819      	ldr	r1, [r3, #0]
   839dc:	1b2d      	subs	r5, r5, r4
   839de:	f045 0501 	orr.w	r5, r5, #1
   839e2:	4630      	mov	r0, r6
   839e4:	1b09      	subs	r1, r1, r4
   839e6:	6055      	str	r5, [r2, #4]
   839e8:	6019      	str	r1, [r3, #0]
   839ea:	f000 fe85 	bl	846f8 <__malloc_unlock>
   839ee:	2001      	movs	r0, #1
   839f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839f2:	4630      	mov	r0, r6
   839f4:	2100      	movs	r1, #0
   839f6:	f001 f903 	bl	84c00 <_sbrk_r>
   839fa:	68ba      	ldr	r2, [r7, #8]
   839fc:	1a83      	subs	r3, r0, r2
   839fe:	2b0f      	cmp	r3, #15
   83a00:	ddde      	ble.n	839c0 <_malloc_trim_r+0x3c>
   83a02:	4c06      	ldr	r4, [pc, #24]	; (83a1c <_malloc_trim_r+0x98>)
   83a04:	4904      	ldr	r1, [pc, #16]	; (83a18 <_malloc_trim_r+0x94>)
   83a06:	6824      	ldr	r4, [r4, #0]
   83a08:	f043 0301 	orr.w	r3, r3, #1
   83a0c:	1b00      	subs	r0, r0, r4
   83a0e:	6053      	str	r3, [r2, #4]
   83a10:	6008      	str	r0, [r1, #0]
   83a12:	e7d5      	b.n	839c0 <_malloc_trim_r+0x3c>
   83a14:	20070598 	.word	0x20070598
   83a18:	2007ac34 	.word	0x2007ac34
   83a1c:	200709a4 	.word	0x200709a4

00083a20 <_free_r>:
   83a20:	2900      	cmp	r1, #0
   83a22:	d04e      	beq.n	83ac2 <_free_r+0xa2>
   83a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a28:	460c      	mov	r4, r1
   83a2a:	4680      	mov	r8, r0
   83a2c:	f000 fe62 	bl	846f4 <__malloc_lock>
   83a30:	f854 7c04 	ldr.w	r7, [r4, #-4]
   83a34:	4962      	ldr	r1, [pc, #392]	; (83bc0 <_free_r+0x1a0>)
   83a36:	f1a4 0508 	sub.w	r5, r4, #8
   83a3a:	f027 0201 	bic.w	r2, r7, #1
   83a3e:	18ab      	adds	r3, r5, r2
   83a40:	688e      	ldr	r6, [r1, #8]
   83a42:	6858      	ldr	r0, [r3, #4]
   83a44:	429e      	cmp	r6, r3
   83a46:	f020 0003 	bic.w	r0, r0, #3
   83a4a:	d05a      	beq.n	83b02 <_free_r+0xe2>
   83a4c:	07fe      	lsls	r6, r7, #31
   83a4e:	6058      	str	r0, [r3, #4]
   83a50:	d40b      	bmi.n	83a6a <_free_r+0x4a>
   83a52:	f854 7c08 	ldr.w	r7, [r4, #-8]
   83a56:	f101 0e08 	add.w	lr, r1, #8
   83a5a:	1bed      	subs	r5, r5, r7
   83a5c:	68ac      	ldr	r4, [r5, #8]
   83a5e:	443a      	add	r2, r7
   83a60:	4574      	cmp	r4, lr
   83a62:	d067      	beq.n	83b34 <_free_r+0x114>
   83a64:	68ef      	ldr	r7, [r5, #12]
   83a66:	60e7      	str	r7, [r4, #12]
   83a68:	60bc      	str	r4, [r7, #8]
   83a6a:	181c      	adds	r4, r3, r0
   83a6c:	6864      	ldr	r4, [r4, #4]
   83a6e:	07e4      	lsls	r4, r4, #31
   83a70:	d40c      	bmi.n	83a8c <_free_r+0x6c>
   83a72:	4f54      	ldr	r7, [pc, #336]	; (83bc4 <_free_r+0x1a4>)
   83a74:	689c      	ldr	r4, [r3, #8]
   83a76:	4402      	add	r2, r0
   83a78:	42bc      	cmp	r4, r7
   83a7a:	d07c      	beq.n	83b76 <_free_r+0x156>
   83a7c:	68d8      	ldr	r0, [r3, #12]
   83a7e:	f042 0301 	orr.w	r3, r2, #1
   83a82:	60e0      	str	r0, [r4, #12]
   83a84:	6084      	str	r4, [r0, #8]
   83a86:	606b      	str	r3, [r5, #4]
   83a88:	50aa      	str	r2, [r5, r2]
   83a8a:	e003      	b.n	83a94 <_free_r+0x74>
   83a8c:	f042 0301 	orr.w	r3, r2, #1
   83a90:	606b      	str	r3, [r5, #4]
   83a92:	50aa      	str	r2, [r5, r2]
   83a94:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83a98:	d214      	bcs.n	83ac4 <_free_r+0xa4>
   83a9a:	08d2      	lsrs	r2, r2, #3
   83a9c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   83aa0:	2401      	movs	r4, #1
   83aa2:	6848      	ldr	r0, [r1, #4]
   83aa4:	1092      	asrs	r2, r2, #2
   83aa6:	fa04 f202 	lsl.w	r2, r4, r2
   83aaa:	689c      	ldr	r4, [r3, #8]
   83aac:	4310      	orrs	r0, r2
   83aae:	60ac      	str	r4, [r5, #8]
   83ab0:	60eb      	str	r3, [r5, #12]
   83ab2:	6048      	str	r0, [r1, #4]
   83ab4:	609d      	str	r5, [r3, #8]
   83ab6:	60e5      	str	r5, [r4, #12]
   83ab8:	4640      	mov	r0, r8
   83aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83abe:	f000 be1b 	b.w	846f8 <__malloc_unlock>
   83ac2:	4770      	bx	lr
   83ac4:	0a53      	lsrs	r3, r2, #9
   83ac6:	2b04      	cmp	r3, #4
   83ac8:	d847      	bhi.n	83b5a <_free_r+0x13a>
   83aca:	0993      	lsrs	r3, r2, #6
   83acc:	f103 0438 	add.w	r4, r3, #56	; 0x38
   83ad0:	0060      	lsls	r0, r4, #1
   83ad2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   83ad6:	6883      	ldr	r3, [r0, #8]
   83ad8:	4939      	ldr	r1, [pc, #228]	; (83bc0 <_free_r+0x1a0>)
   83ada:	4283      	cmp	r3, r0
   83adc:	d043      	beq.n	83b66 <_free_r+0x146>
   83ade:	6859      	ldr	r1, [r3, #4]
   83ae0:	f021 0103 	bic.w	r1, r1, #3
   83ae4:	4291      	cmp	r1, r2
   83ae6:	d902      	bls.n	83aee <_free_r+0xce>
   83ae8:	689b      	ldr	r3, [r3, #8]
   83aea:	4298      	cmp	r0, r3
   83aec:	d1f7      	bne.n	83ade <_free_r+0xbe>
   83aee:	68da      	ldr	r2, [r3, #12]
   83af0:	60ea      	str	r2, [r5, #12]
   83af2:	60ab      	str	r3, [r5, #8]
   83af4:	4640      	mov	r0, r8
   83af6:	6095      	str	r5, [r2, #8]
   83af8:	60dd      	str	r5, [r3, #12]
   83afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83afe:	f000 bdfb 	b.w	846f8 <__malloc_unlock>
   83b02:	07ff      	lsls	r7, r7, #31
   83b04:	4402      	add	r2, r0
   83b06:	d407      	bmi.n	83b18 <_free_r+0xf8>
   83b08:	f854 4c08 	ldr.w	r4, [r4, #-8]
   83b0c:	1b2d      	subs	r5, r5, r4
   83b0e:	68eb      	ldr	r3, [r5, #12]
   83b10:	68a8      	ldr	r0, [r5, #8]
   83b12:	4422      	add	r2, r4
   83b14:	60c3      	str	r3, [r0, #12]
   83b16:	6098      	str	r0, [r3, #8]
   83b18:	4b2b      	ldr	r3, [pc, #172]	; (83bc8 <_free_r+0x1a8>)
   83b1a:	f042 0001 	orr.w	r0, r2, #1
   83b1e:	681b      	ldr	r3, [r3, #0]
   83b20:	6068      	str	r0, [r5, #4]
   83b22:	429a      	cmp	r2, r3
   83b24:	608d      	str	r5, [r1, #8]
   83b26:	d3c7      	bcc.n	83ab8 <_free_r+0x98>
   83b28:	4b28      	ldr	r3, [pc, #160]	; (83bcc <_free_r+0x1ac>)
   83b2a:	4640      	mov	r0, r8
   83b2c:	6819      	ldr	r1, [r3, #0]
   83b2e:	f7ff ff29 	bl	83984 <_malloc_trim_r>
   83b32:	e7c1      	b.n	83ab8 <_free_r+0x98>
   83b34:	1819      	adds	r1, r3, r0
   83b36:	6849      	ldr	r1, [r1, #4]
   83b38:	07c9      	lsls	r1, r1, #31
   83b3a:	d409      	bmi.n	83b50 <_free_r+0x130>
   83b3c:	68d9      	ldr	r1, [r3, #12]
   83b3e:	4402      	add	r2, r0
   83b40:	689b      	ldr	r3, [r3, #8]
   83b42:	f042 0001 	orr.w	r0, r2, #1
   83b46:	60d9      	str	r1, [r3, #12]
   83b48:	608b      	str	r3, [r1, #8]
   83b4a:	6068      	str	r0, [r5, #4]
   83b4c:	50aa      	str	r2, [r5, r2]
   83b4e:	e7b3      	b.n	83ab8 <_free_r+0x98>
   83b50:	f042 0301 	orr.w	r3, r2, #1
   83b54:	606b      	str	r3, [r5, #4]
   83b56:	50aa      	str	r2, [r5, r2]
   83b58:	e7ae      	b.n	83ab8 <_free_r+0x98>
   83b5a:	2b14      	cmp	r3, #20
   83b5c:	d814      	bhi.n	83b88 <_free_r+0x168>
   83b5e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   83b62:	0060      	lsls	r0, r4, #1
   83b64:	e7b5      	b.n	83ad2 <_free_r+0xb2>
   83b66:	684a      	ldr	r2, [r1, #4]
   83b68:	10a4      	asrs	r4, r4, #2
   83b6a:	2001      	movs	r0, #1
   83b6c:	40a0      	lsls	r0, r4
   83b6e:	4302      	orrs	r2, r0
   83b70:	604a      	str	r2, [r1, #4]
   83b72:	461a      	mov	r2, r3
   83b74:	e7bc      	b.n	83af0 <_free_r+0xd0>
   83b76:	f042 0301 	orr.w	r3, r2, #1
   83b7a:	614d      	str	r5, [r1, #20]
   83b7c:	610d      	str	r5, [r1, #16]
   83b7e:	60ec      	str	r4, [r5, #12]
   83b80:	60ac      	str	r4, [r5, #8]
   83b82:	606b      	str	r3, [r5, #4]
   83b84:	50aa      	str	r2, [r5, r2]
   83b86:	e797      	b.n	83ab8 <_free_r+0x98>
   83b88:	2b54      	cmp	r3, #84	; 0x54
   83b8a:	d804      	bhi.n	83b96 <_free_r+0x176>
   83b8c:	0b13      	lsrs	r3, r2, #12
   83b8e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   83b92:	0060      	lsls	r0, r4, #1
   83b94:	e79d      	b.n	83ad2 <_free_r+0xb2>
   83b96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83b9a:	d804      	bhi.n	83ba6 <_free_r+0x186>
   83b9c:	0bd3      	lsrs	r3, r2, #15
   83b9e:	f103 0477 	add.w	r4, r3, #119	; 0x77
   83ba2:	0060      	lsls	r0, r4, #1
   83ba4:	e795      	b.n	83ad2 <_free_r+0xb2>
   83ba6:	f240 5054 	movw	r0, #1364	; 0x554
   83baa:	4283      	cmp	r3, r0
   83bac:	d804      	bhi.n	83bb8 <_free_r+0x198>
   83bae:	0c93      	lsrs	r3, r2, #18
   83bb0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   83bb4:	0060      	lsls	r0, r4, #1
   83bb6:	e78c      	b.n	83ad2 <_free_r+0xb2>
   83bb8:	20fc      	movs	r0, #252	; 0xfc
   83bba:	247e      	movs	r4, #126	; 0x7e
   83bbc:	e789      	b.n	83ad2 <_free_r+0xb2>
   83bbe:	bf00      	nop
   83bc0:	20070598 	.word	0x20070598
   83bc4:	200705a0 	.word	0x200705a0
   83bc8:	200709a0 	.word	0x200709a0
   83bcc:	2007ac30 	.word	0x2007ac30

00083bd0 <__sfvwrite_r>:
   83bd0:	6893      	ldr	r3, [r2, #8]
   83bd2:	2b00      	cmp	r3, #0
   83bd4:	f000 80b1 	beq.w	83d3a <__sfvwrite_r+0x16a>
   83bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83bdc:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   83be0:	b083      	sub	sp, #12
   83be2:	f01e 0f08 	tst.w	lr, #8
   83be6:	460c      	mov	r4, r1
   83be8:	4681      	mov	r9, r0
   83bea:	4616      	mov	r6, r2
   83bec:	d028      	beq.n	83c40 <__sfvwrite_r+0x70>
   83bee:	690b      	ldr	r3, [r1, #16]
   83bf0:	b333      	cbz	r3, 83c40 <__sfvwrite_r+0x70>
   83bf2:	f00e 0802 	and.w	r8, lr, #2
   83bf6:	fa1f f088 	uxth.w	r0, r8
   83bfa:	6835      	ldr	r5, [r6, #0]
   83bfc:	b380      	cbz	r0, 83c60 <__sfvwrite_r+0x90>
   83bfe:	f04f 0b00 	mov.w	fp, #0
   83c02:	46d8      	mov	r8, fp
   83c04:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 83eec <__sfvwrite_r+0x31c>
   83c08:	f1b8 0f00 	cmp.w	r8, #0
   83c0c:	f000 808f 	beq.w	83d2e <__sfvwrite_r+0x15e>
   83c10:	45d0      	cmp	r8, sl
   83c12:	4643      	mov	r3, r8
   83c14:	4648      	mov	r0, r9
   83c16:	bf28      	it	cs
   83c18:	4653      	movcs	r3, sl
   83c1a:	69e1      	ldr	r1, [r4, #28]
   83c1c:	465a      	mov	r2, fp
   83c1e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83c20:	47b8      	blx	r7
   83c22:	2800      	cmp	r0, #0
   83c24:	f340 80a8 	ble.w	83d78 <__sfvwrite_r+0x1a8>
   83c28:	68b3      	ldr	r3, [r6, #8]
   83c2a:	4483      	add	fp, r0
   83c2c:	1a1b      	subs	r3, r3, r0
   83c2e:	ebc0 0808 	rsb	r8, r0, r8
   83c32:	60b3      	str	r3, [r6, #8]
   83c34:	2b00      	cmp	r3, #0
   83c36:	d1e7      	bne.n	83c08 <__sfvwrite_r+0x38>
   83c38:	2000      	movs	r0, #0
   83c3a:	b003      	add	sp, #12
   83c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c40:	4648      	mov	r0, r9
   83c42:	4621      	mov	r1, r4
   83c44:	f7ff fc58 	bl	834f8 <__swsetup_r>
   83c48:	2800      	cmp	r0, #0
   83c4a:	f040 8146 	bne.w	83eda <__sfvwrite_r+0x30a>
   83c4e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   83c52:	6835      	ldr	r5, [r6, #0]
   83c54:	f00e 0802 	and.w	r8, lr, #2
   83c58:	fa1f f088 	uxth.w	r0, r8
   83c5c:	2800      	cmp	r0, #0
   83c5e:	d1ce      	bne.n	83bfe <__sfvwrite_r+0x2e>
   83c60:	f01e 0b01 	ands.w	fp, lr, #1
   83c64:	f040 8091 	bne.w	83d8a <__sfvwrite_r+0x1ba>
   83c68:	46d8      	mov	r8, fp
   83c6a:	f1b8 0f00 	cmp.w	r8, #0
   83c6e:	d058      	beq.n	83d22 <__sfvwrite_r+0x152>
   83c70:	f41e 7f00 	tst.w	lr, #512	; 0x200
   83c74:	68a7      	ldr	r7, [r4, #8]
   83c76:	d062      	beq.n	83d3e <__sfvwrite_r+0x16e>
   83c78:	45b8      	cmp	r8, r7
   83c7a:	46ba      	mov	sl, r7
   83c7c:	f0c0 80c2 	bcc.w	83e04 <__sfvwrite_r+0x234>
   83c80:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   83c84:	f000 80c0 	beq.w	83e08 <__sfvwrite_r+0x238>
   83c88:	6967      	ldr	r7, [r4, #20]
   83c8a:	6921      	ldr	r1, [r4, #16]
   83c8c:	6823      	ldr	r3, [r4, #0]
   83c8e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83c92:	1a5b      	subs	r3, r3, r1
   83c94:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83c98:	1c58      	adds	r0, r3, #1
   83c9a:	107f      	asrs	r7, r7, #1
   83c9c:	4440      	add	r0, r8
   83c9e:	4287      	cmp	r7, r0
   83ca0:	463a      	mov	r2, r7
   83ca2:	bf3c      	itt	cc
   83ca4:	4607      	movcc	r7, r0
   83ca6:	463a      	movcc	r2, r7
   83ca8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   83cac:	9300      	str	r3, [sp, #0]
   83cae:	f000 80fb 	beq.w	83ea8 <__sfvwrite_r+0x2d8>
   83cb2:	4611      	mov	r1, r2
   83cb4:	4648      	mov	r0, r9
   83cb6:	f000 f9e9 	bl	8408c <_malloc_r>
   83cba:	9b00      	ldr	r3, [sp, #0]
   83cbc:	4682      	mov	sl, r0
   83cbe:	2800      	cmp	r0, #0
   83cc0:	f000 810e 	beq.w	83ee0 <__sfvwrite_r+0x310>
   83cc4:	461a      	mov	r2, r3
   83cc6:	6921      	ldr	r1, [r4, #16]
   83cc8:	9300      	str	r3, [sp, #0]
   83cca:	f7fe fb97 	bl	823fc <memcpy>
   83cce:	89a2      	ldrh	r2, [r4, #12]
   83cd0:	9b00      	ldr	r3, [sp, #0]
   83cd2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83cd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83cda:	81a2      	strh	r2, [r4, #12]
   83cdc:	eb0a 0003 	add.w	r0, sl, r3
   83ce0:	f8c4 a010 	str.w	sl, [r4, #16]
   83ce4:	1afb      	subs	r3, r7, r3
   83ce6:	6167      	str	r7, [r4, #20]
   83ce8:	46c2      	mov	sl, r8
   83cea:	4647      	mov	r7, r8
   83cec:	6020      	str	r0, [r4, #0]
   83cee:	60a3      	str	r3, [r4, #8]
   83cf0:	4652      	mov	r2, sl
   83cf2:	4659      	mov	r1, fp
   83cf4:	f000 fc9a 	bl	8462c <memmove>
   83cf8:	68a0      	ldr	r0, [r4, #8]
   83cfa:	6822      	ldr	r2, [r4, #0]
   83cfc:	1bc0      	subs	r0, r0, r7
   83cfe:	60a0      	str	r0, [r4, #8]
   83d00:	4640      	mov	r0, r8
   83d02:	eb02 030a 	add.w	r3, r2, sl
   83d06:	6023      	str	r3, [r4, #0]
   83d08:	68b3      	ldr	r3, [r6, #8]
   83d0a:	4483      	add	fp, r0
   83d0c:	1a1b      	subs	r3, r3, r0
   83d0e:	ebc0 0808 	rsb	r8, r0, r8
   83d12:	60b3      	str	r3, [r6, #8]
   83d14:	2b00      	cmp	r3, #0
   83d16:	d08f      	beq.n	83c38 <__sfvwrite_r+0x68>
   83d18:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   83d1c:	f1b8 0f00 	cmp.w	r8, #0
   83d20:	d1a6      	bne.n	83c70 <__sfvwrite_r+0xa0>
   83d22:	f8d5 b000 	ldr.w	fp, [r5]
   83d26:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83d2a:	3508      	adds	r5, #8
   83d2c:	e79d      	b.n	83c6a <__sfvwrite_r+0x9a>
   83d2e:	f8d5 b000 	ldr.w	fp, [r5]
   83d32:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83d36:	3508      	adds	r5, #8
   83d38:	e766      	b.n	83c08 <__sfvwrite_r+0x38>
   83d3a:	2000      	movs	r0, #0
   83d3c:	4770      	bx	lr
   83d3e:	6820      	ldr	r0, [r4, #0]
   83d40:	6923      	ldr	r3, [r4, #16]
   83d42:	4298      	cmp	r0, r3
   83d44:	d803      	bhi.n	83d4e <__sfvwrite_r+0x17e>
   83d46:	6962      	ldr	r2, [r4, #20]
   83d48:	4590      	cmp	r8, r2
   83d4a:	f080 8085 	bcs.w	83e58 <__sfvwrite_r+0x288>
   83d4e:	4547      	cmp	r7, r8
   83d50:	bf28      	it	cs
   83d52:	4647      	movcs	r7, r8
   83d54:	4659      	mov	r1, fp
   83d56:	463a      	mov	r2, r7
   83d58:	f000 fc68 	bl	8462c <memmove>
   83d5c:	68a3      	ldr	r3, [r4, #8]
   83d5e:	6822      	ldr	r2, [r4, #0]
   83d60:	1bdb      	subs	r3, r3, r7
   83d62:	443a      	add	r2, r7
   83d64:	60a3      	str	r3, [r4, #8]
   83d66:	6022      	str	r2, [r4, #0]
   83d68:	2b00      	cmp	r3, #0
   83d6a:	d149      	bne.n	83e00 <__sfvwrite_r+0x230>
   83d6c:	4648      	mov	r0, r9
   83d6e:	4621      	mov	r1, r4
   83d70:	f7ff fcd8 	bl	83724 <_fflush_r>
   83d74:	2800      	cmp	r0, #0
   83d76:	d043      	beq.n	83e00 <__sfvwrite_r+0x230>
   83d78:	89a3      	ldrh	r3, [r4, #12]
   83d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83d7e:	f04f 30ff 	mov.w	r0, #4294967295
   83d82:	81a3      	strh	r3, [r4, #12]
   83d84:	b003      	add	sp, #12
   83d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d8a:	4680      	mov	r8, r0
   83d8c:	4683      	mov	fp, r0
   83d8e:	4682      	mov	sl, r0
   83d90:	9000      	str	r0, [sp, #0]
   83d92:	f1ba 0f00 	cmp.w	sl, #0
   83d96:	d02b      	beq.n	83df0 <__sfvwrite_r+0x220>
   83d98:	9b00      	ldr	r3, [sp, #0]
   83d9a:	2b00      	cmp	r3, #0
   83d9c:	d04f      	beq.n	83e3e <__sfvwrite_r+0x26e>
   83d9e:	45d0      	cmp	r8, sl
   83da0:	4643      	mov	r3, r8
   83da2:	bf28      	it	cs
   83da4:	4653      	movcs	r3, sl
   83da6:	6820      	ldr	r0, [r4, #0]
   83da8:	6921      	ldr	r1, [r4, #16]
   83daa:	461f      	mov	r7, r3
   83dac:	4288      	cmp	r0, r1
   83dae:	f8d4 e008 	ldr.w	lr, [r4, #8]
   83db2:	6962      	ldr	r2, [r4, #20]
   83db4:	d903      	bls.n	83dbe <__sfvwrite_r+0x1ee>
   83db6:	eb0e 0c02 	add.w	ip, lr, r2
   83dba:	4563      	cmp	r3, ip
   83dbc:	dc5e      	bgt.n	83e7c <__sfvwrite_r+0x2ac>
   83dbe:	4293      	cmp	r3, r2
   83dc0:	db24      	blt.n	83e0c <__sfvwrite_r+0x23c>
   83dc2:	4613      	mov	r3, r2
   83dc4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83dc6:	4648      	mov	r0, r9
   83dc8:	69e1      	ldr	r1, [r4, #28]
   83dca:	465a      	mov	r2, fp
   83dcc:	47b8      	blx	r7
   83dce:	1e07      	subs	r7, r0, #0
   83dd0:	ddd2      	ble.n	83d78 <__sfvwrite_r+0x1a8>
   83dd2:	ebb8 0807 	subs.w	r8, r8, r7
   83dd6:	d029      	beq.n	83e2c <__sfvwrite_r+0x25c>
   83dd8:	68b3      	ldr	r3, [r6, #8]
   83dda:	44bb      	add	fp, r7
   83ddc:	1bdb      	subs	r3, r3, r7
   83dde:	ebc7 0a0a 	rsb	sl, r7, sl
   83de2:	60b3      	str	r3, [r6, #8]
   83de4:	2b00      	cmp	r3, #0
   83de6:	f43f af27 	beq.w	83c38 <__sfvwrite_r+0x68>
   83dea:	f1ba 0f00 	cmp.w	sl, #0
   83dee:	d1d3      	bne.n	83d98 <__sfvwrite_r+0x1c8>
   83df0:	2300      	movs	r3, #0
   83df2:	f8d5 b000 	ldr.w	fp, [r5]
   83df6:	f8d5 a004 	ldr.w	sl, [r5, #4]
   83dfa:	9300      	str	r3, [sp, #0]
   83dfc:	3508      	adds	r5, #8
   83dfe:	e7c8      	b.n	83d92 <__sfvwrite_r+0x1c2>
   83e00:	4638      	mov	r0, r7
   83e02:	e781      	b.n	83d08 <__sfvwrite_r+0x138>
   83e04:	4647      	mov	r7, r8
   83e06:	46c2      	mov	sl, r8
   83e08:	6820      	ldr	r0, [r4, #0]
   83e0a:	e771      	b.n	83cf0 <__sfvwrite_r+0x120>
   83e0c:	461a      	mov	r2, r3
   83e0e:	4659      	mov	r1, fp
   83e10:	9301      	str	r3, [sp, #4]
   83e12:	f000 fc0b 	bl	8462c <memmove>
   83e16:	68a2      	ldr	r2, [r4, #8]
   83e18:	6821      	ldr	r1, [r4, #0]
   83e1a:	9b01      	ldr	r3, [sp, #4]
   83e1c:	ebb8 0807 	subs.w	r8, r8, r7
   83e20:	eba2 0203 	sub.w	r2, r2, r3
   83e24:	440b      	add	r3, r1
   83e26:	60a2      	str	r2, [r4, #8]
   83e28:	6023      	str	r3, [r4, #0]
   83e2a:	d1d5      	bne.n	83dd8 <__sfvwrite_r+0x208>
   83e2c:	4648      	mov	r0, r9
   83e2e:	4621      	mov	r1, r4
   83e30:	f7ff fc78 	bl	83724 <_fflush_r>
   83e34:	2800      	cmp	r0, #0
   83e36:	d19f      	bne.n	83d78 <__sfvwrite_r+0x1a8>
   83e38:	f8cd 8000 	str.w	r8, [sp]
   83e3c:	e7cc      	b.n	83dd8 <__sfvwrite_r+0x208>
   83e3e:	4658      	mov	r0, fp
   83e40:	210a      	movs	r1, #10
   83e42:	4652      	mov	r2, sl
   83e44:	f000 fba8 	bl	84598 <memchr>
   83e48:	2800      	cmp	r0, #0
   83e4a:	d041      	beq.n	83ed0 <__sfvwrite_r+0x300>
   83e4c:	3001      	adds	r0, #1
   83e4e:	2301      	movs	r3, #1
   83e50:	ebcb 0800 	rsb	r8, fp, r0
   83e54:	9300      	str	r3, [sp, #0]
   83e56:	e7a2      	b.n	83d9e <__sfvwrite_r+0x1ce>
   83e58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   83e5c:	4543      	cmp	r3, r8
   83e5e:	bf28      	it	cs
   83e60:	4643      	movcs	r3, r8
   83e62:	fb93 f3f2 	sdiv	r3, r3, r2
   83e66:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83e68:	fb03 f302 	mul.w	r3, r3, r2
   83e6c:	4648      	mov	r0, r9
   83e6e:	69e1      	ldr	r1, [r4, #28]
   83e70:	465a      	mov	r2, fp
   83e72:	47b8      	blx	r7
   83e74:	2800      	cmp	r0, #0
   83e76:	f73f af47 	bgt.w	83d08 <__sfvwrite_r+0x138>
   83e7a:	e77d      	b.n	83d78 <__sfvwrite_r+0x1a8>
   83e7c:	4662      	mov	r2, ip
   83e7e:	4659      	mov	r1, fp
   83e80:	f8cd c004 	str.w	ip, [sp, #4]
   83e84:	f000 fbd2 	bl	8462c <memmove>
   83e88:	6823      	ldr	r3, [r4, #0]
   83e8a:	f8dd c004 	ldr.w	ip, [sp, #4]
   83e8e:	4648      	mov	r0, r9
   83e90:	4463      	add	r3, ip
   83e92:	6023      	str	r3, [r4, #0]
   83e94:	4621      	mov	r1, r4
   83e96:	f7ff fc45 	bl	83724 <_fflush_r>
   83e9a:	f8dd c004 	ldr.w	ip, [sp, #4]
   83e9e:	2800      	cmp	r0, #0
   83ea0:	f47f af6a 	bne.w	83d78 <__sfvwrite_r+0x1a8>
   83ea4:	4667      	mov	r7, ip
   83ea6:	e794      	b.n	83dd2 <__sfvwrite_r+0x202>
   83ea8:	4648      	mov	r0, r9
   83eaa:	f000 fc27 	bl	846fc <_realloc_r>
   83eae:	9b00      	ldr	r3, [sp, #0]
   83eb0:	4682      	mov	sl, r0
   83eb2:	2800      	cmp	r0, #0
   83eb4:	f47f af12 	bne.w	83cdc <__sfvwrite_r+0x10c>
   83eb8:	4648      	mov	r0, r9
   83eba:	6921      	ldr	r1, [r4, #16]
   83ebc:	f7ff fdb0 	bl	83a20 <_free_r>
   83ec0:	89a3      	ldrh	r3, [r4, #12]
   83ec2:	220c      	movs	r2, #12
   83ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83ec8:	b29b      	uxth	r3, r3
   83eca:	f8c9 2000 	str.w	r2, [r9]
   83ece:	e754      	b.n	83d7a <__sfvwrite_r+0x1aa>
   83ed0:	2301      	movs	r3, #1
   83ed2:	f10a 0801 	add.w	r8, sl, #1
   83ed6:	9300      	str	r3, [sp, #0]
   83ed8:	e761      	b.n	83d9e <__sfvwrite_r+0x1ce>
   83eda:	f04f 30ff 	mov.w	r0, #4294967295
   83ede:	e6ac      	b.n	83c3a <__sfvwrite_r+0x6a>
   83ee0:	230c      	movs	r3, #12
   83ee2:	f8c9 3000 	str.w	r3, [r9]
   83ee6:	89a3      	ldrh	r3, [r4, #12]
   83ee8:	e747      	b.n	83d7a <__sfvwrite_r+0x1aa>
   83eea:	bf00      	nop
   83eec:	7ffffc00 	.word	0x7ffffc00

00083ef0 <_fwalk>:
   83ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ef4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83ef8:	d01a      	beq.n	83f30 <_fwalk+0x40>
   83efa:	4688      	mov	r8, r1
   83efc:	2600      	movs	r6, #0
   83efe:	687d      	ldr	r5, [r7, #4]
   83f00:	68bc      	ldr	r4, [r7, #8]
   83f02:	3d01      	subs	r5, #1
   83f04:	d40e      	bmi.n	83f24 <_fwalk+0x34>
   83f06:	89a3      	ldrh	r3, [r4, #12]
   83f08:	3d01      	subs	r5, #1
   83f0a:	2b01      	cmp	r3, #1
   83f0c:	d906      	bls.n	83f1c <_fwalk+0x2c>
   83f0e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83f12:	3301      	adds	r3, #1
   83f14:	d002      	beq.n	83f1c <_fwalk+0x2c>
   83f16:	4620      	mov	r0, r4
   83f18:	47c0      	blx	r8
   83f1a:	4306      	orrs	r6, r0
   83f1c:	1c6b      	adds	r3, r5, #1
   83f1e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83f22:	d1f0      	bne.n	83f06 <_fwalk+0x16>
   83f24:	683f      	ldr	r7, [r7, #0]
   83f26:	2f00      	cmp	r7, #0
   83f28:	d1e9      	bne.n	83efe <_fwalk+0xe>
   83f2a:	4630      	mov	r0, r6
   83f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f30:	463e      	mov	r6, r7
   83f32:	4630      	mov	r0, r6
   83f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083f38 <_fwalk_reent>:
   83f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83f3c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83f40:	d01e      	beq.n	83f80 <_fwalk_reent+0x48>
   83f42:	4688      	mov	r8, r1
   83f44:	4607      	mov	r7, r0
   83f46:	f04f 0900 	mov.w	r9, #0
   83f4a:	6875      	ldr	r5, [r6, #4]
   83f4c:	68b4      	ldr	r4, [r6, #8]
   83f4e:	3d01      	subs	r5, #1
   83f50:	d410      	bmi.n	83f74 <_fwalk_reent+0x3c>
   83f52:	89a3      	ldrh	r3, [r4, #12]
   83f54:	3d01      	subs	r5, #1
   83f56:	2b01      	cmp	r3, #1
   83f58:	d908      	bls.n	83f6c <_fwalk_reent+0x34>
   83f5a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83f5e:	3301      	adds	r3, #1
   83f60:	d004      	beq.n	83f6c <_fwalk_reent+0x34>
   83f62:	4638      	mov	r0, r7
   83f64:	4621      	mov	r1, r4
   83f66:	47c0      	blx	r8
   83f68:	ea49 0900 	orr.w	r9, r9, r0
   83f6c:	1c6b      	adds	r3, r5, #1
   83f6e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83f72:	d1ee      	bne.n	83f52 <_fwalk_reent+0x1a>
   83f74:	6836      	ldr	r6, [r6, #0]
   83f76:	2e00      	cmp	r6, #0
   83f78:	d1e7      	bne.n	83f4a <_fwalk_reent+0x12>
   83f7a:	4648      	mov	r0, r9
   83f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83f80:	46b1      	mov	r9, r6
   83f82:	4648      	mov	r0, r9
   83f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083f88 <__locale_charset>:
   83f88:	4800      	ldr	r0, [pc, #0]	; (83f8c <__locale_charset+0x4>)
   83f8a:	4770      	bx	lr
   83f8c:	20070574 	.word	0x20070574

00083f90 <__locale_mb_cur_max>:
   83f90:	4b01      	ldr	r3, [pc, #4]	; (83f98 <__locale_mb_cur_max+0x8>)
   83f92:	6818      	ldr	r0, [r3, #0]
   83f94:	4770      	bx	lr
   83f96:	bf00      	nop
   83f98:	20070594 	.word	0x20070594

00083f9c <__smakebuf_r>:
   83f9c:	898b      	ldrh	r3, [r1, #12]
   83f9e:	b29a      	uxth	r2, r3
   83fa0:	f012 0f02 	tst.w	r2, #2
   83fa4:	d13c      	bne.n	84020 <__smakebuf_r+0x84>
   83fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
   83fa8:	460c      	mov	r4, r1
   83faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83fae:	b091      	sub	sp, #68	; 0x44
   83fb0:	2900      	cmp	r1, #0
   83fb2:	4605      	mov	r5, r0
   83fb4:	db19      	blt.n	83fea <__smakebuf_r+0x4e>
   83fb6:	aa01      	add	r2, sp, #4
   83fb8:	f000 ffbc 	bl	84f34 <_fstat_r>
   83fbc:	2800      	cmp	r0, #0
   83fbe:	db12      	blt.n	83fe6 <__smakebuf_r+0x4a>
   83fc0:	9b02      	ldr	r3, [sp, #8]
   83fc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83fc6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   83fca:	fab7 f787 	clz	r7, r7
   83fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83fd2:	ea4f 1757 	mov.w	r7, r7, lsr #5
   83fd6:	d02a      	beq.n	8402e <__smakebuf_r+0x92>
   83fd8:	89a3      	ldrh	r3, [r4, #12]
   83fda:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83fe2:	81a3      	strh	r3, [r4, #12]
   83fe4:	e00b      	b.n	83ffe <__smakebuf_r+0x62>
   83fe6:	89a3      	ldrh	r3, [r4, #12]
   83fe8:	b29a      	uxth	r2, r3
   83fea:	f012 0f80 	tst.w	r2, #128	; 0x80
   83fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83ff2:	81a3      	strh	r3, [r4, #12]
   83ff4:	bf0c      	ite	eq
   83ff6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83ffa:	2640      	movne	r6, #64	; 0x40
   83ffc:	2700      	movs	r7, #0
   83ffe:	4628      	mov	r0, r5
   84000:	4631      	mov	r1, r6
   84002:	f000 f843 	bl	8408c <_malloc_r>
   84006:	89a3      	ldrh	r3, [r4, #12]
   84008:	b340      	cbz	r0, 8405c <__smakebuf_r+0xc0>
   8400a:	4a1a      	ldr	r2, [pc, #104]	; (84074 <__smakebuf_r+0xd8>)
   8400c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84010:	63ea      	str	r2, [r5, #60]	; 0x3c
   84012:	81a3      	strh	r3, [r4, #12]
   84014:	6020      	str	r0, [r4, #0]
   84016:	6120      	str	r0, [r4, #16]
   84018:	6166      	str	r6, [r4, #20]
   8401a:	b99f      	cbnz	r7, 84044 <__smakebuf_r+0xa8>
   8401c:	b011      	add	sp, #68	; 0x44
   8401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84020:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84024:	2201      	movs	r2, #1
   84026:	600b      	str	r3, [r1, #0]
   84028:	610b      	str	r3, [r1, #16]
   8402a:	614a      	str	r2, [r1, #20]
   8402c:	4770      	bx	lr
   8402e:	4b12      	ldr	r3, [pc, #72]	; (84078 <__smakebuf_r+0xdc>)
   84030:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   84032:	429a      	cmp	r2, r3
   84034:	d1d0      	bne.n	83fd8 <__smakebuf_r+0x3c>
   84036:	89a3      	ldrh	r3, [r4, #12]
   84038:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8403c:	4333      	orrs	r3, r6
   8403e:	81a3      	strh	r3, [r4, #12]
   84040:	64e6      	str	r6, [r4, #76]	; 0x4c
   84042:	e7dc      	b.n	83ffe <__smakebuf_r+0x62>
   84044:	4628      	mov	r0, r5
   84046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8404a:	f000 ff87 	bl	84f5c <_isatty_r>
   8404e:	2800      	cmp	r0, #0
   84050:	d0e4      	beq.n	8401c <__smakebuf_r+0x80>
   84052:	89a3      	ldrh	r3, [r4, #12]
   84054:	f043 0301 	orr.w	r3, r3, #1
   84058:	81a3      	strh	r3, [r4, #12]
   8405a:	e7df      	b.n	8401c <__smakebuf_r+0x80>
   8405c:	059a      	lsls	r2, r3, #22
   8405e:	d4dd      	bmi.n	8401c <__smakebuf_r+0x80>
   84060:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84064:	f043 0302 	orr.w	r3, r3, #2
   84068:	2101      	movs	r1, #1
   8406a:	81a3      	strh	r3, [r4, #12]
   8406c:	6022      	str	r2, [r4, #0]
   8406e:	6122      	str	r2, [r4, #16]
   84070:	6161      	str	r1, [r4, #20]
   84072:	e7d3      	b.n	8401c <__smakebuf_r+0x80>
   84074:	00083775 	.word	0x00083775
   84078:	00084c81 	.word	0x00084c81

0008407c <malloc>:
   8407c:	4b02      	ldr	r3, [pc, #8]	; (84088 <malloc+0xc>)
   8407e:	4601      	mov	r1, r0
   84080:	6818      	ldr	r0, [r3, #0]
   84082:	f000 b803 	b.w	8408c <_malloc_r>
   84086:	bf00      	nop
   84088:	20070570 	.word	0x20070570

0008408c <_malloc_r>:
   8408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84090:	f101 050b 	add.w	r5, r1, #11
   84094:	2d16      	cmp	r5, #22
   84096:	b083      	sub	sp, #12
   84098:	4606      	mov	r6, r0
   8409a:	d927      	bls.n	840ec <_malloc_r+0x60>
   8409c:	f035 0507 	bics.w	r5, r5, #7
   840a0:	f100 80b6 	bmi.w	84210 <_malloc_r+0x184>
   840a4:	42a9      	cmp	r1, r5
   840a6:	f200 80b3 	bhi.w	84210 <_malloc_r+0x184>
   840aa:	f000 fb23 	bl	846f4 <__malloc_lock>
   840ae:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   840b2:	d222      	bcs.n	840fa <_malloc_r+0x6e>
   840b4:	4fbc      	ldr	r7, [pc, #752]	; (843a8 <_malloc_r+0x31c>)
   840b6:	08e8      	lsrs	r0, r5, #3
   840b8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   840bc:	68dc      	ldr	r4, [r3, #12]
   840be:	429c      	cmp	r4, r3
   840c0:	f000 81bc 	beq.w	8443c <_malloc_r+0x3b0>
   840c4:	6863      	ldr	r3, [r4, #4]
   840c6:	68e1      	ldr	r1, [r4, #12]
   840c8:	f023 0303 	bic.w	r3, r3, #3
   840cc:	4423      	add	r3, r4
   840ce:	685a      	ldr	r2, [r3, #4]
   840d0:	68a5      	ldr	r5, [r4, #8]
   840d2:	f042 0201 	orr.w	r2, r2, #1
   840d6:	60e9      	str	r1, [r5, #12]
   840d8:	4630      	mov	r0, r6
   840da:	608d      	str	r5, [r1, #8]
   840dc:	605a      	str	r2, [r3, #4]
   840de:	f000 fb0b 	bl	846f8 <__malloc_unlock>
   840e2:	3408      	adds	r4, #8
   840e4:	4620      	mov	r0, r4
   840e6:	b003      	add	sp, #12
   840e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840ec:	2910      	cmp	r1, #16
   840ee:	f200 808f 	bhi.w	84210 <_malloc_r+0x184>
   840f2:	f000 faff 	bl	846f4 <__malloc_lock>
   840f6:	2510      	movs	r5, #16
   840f8:	e7dc      	b.n	840b4 <_malloc_r+0x28>
   840fa:	0a68      	lsrs	r0, r5, #9
   840fc:	f000 808f 	beq.w	8421e <_malloc_r+0x192>
   84100:	2804      	cmp	r0, #4
   84102:	f200 8147 	bhi.w	84394 <_malloc_r+0x308>
   84106:	09a8      	lsrs	r0, r5, #6
   84108:	3038      	adds	r0, #56	; 0x38
   8410a:	0041      	lsls	r1, r0, #1
   8410c:	4fa6      	ldr	r7, [pc, #664]	; (843a8 <_malloc_r+0x31c>)
   8410e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84112:	68cc      	ldr	r4, [r1, #12]
   84114:	42a1      	cmp	r1, r4
   84116:	d106      	bne.n	84126 <_malloc_r+0x9a>
   84118:	e00c      	b.n	84134 <_malloc_r+0xa8>
   8411a:	2a00      	cmp	r2, #0
   8411c:	f280 8082 	bge.w	84224 <_malloc_r+0x198>
   84120:	68e4      	ldr	r4, [r4, #12]
   84122:	42a1      	cmp	r1, r4
   84124:	d006      	beq.n	84134 <_malloc_r+0xa8>
   84126:	6863      	ldr	r3, [r4, #4]
   84128:	f023 0303 	bic.w	r3, r3, #3
   8412c:	1b5a      	subs	r2, r3, r5
   8412e:	2a0f      	cmp	r2, #15
   84130:	ddf3      	ble.n	8411a <_malloc_r+0x8e>
   84132:	3801      	subs	r0, #1
   84134:	3001      	adds	r0, #1
   84136:	499c      	ldr	r1, [pc, #624]	; (843a8 <_malloc_r+0x31c>)
   84138:	693c      	ldr	r4, [r7, #16]
   8413a:	f101 0e08 	add.w	lr, r1, #8
   8413e:	4574      	cmp	r4, lr
   84140:	f000 8171 	beq.w	84426 <_malloc_r+0x39a>
   84144:	6863      	ldr	r3, [r4, #4]
   84146:	f023 0303 	bic.w	r3, r3, #3
   8414a:	1b5a      	subs	r2, r3, r5
   8414c:	2a0f      	cmp	r2, #15
   8414e:	f300 8157 	bgt.w	84400 <_malloc_r+0x374>
   84152:	2a00      	cmp	r2, #0
   84154:	f8c1 e014 	str.w	lr, [r1, #20]
   84158:	f8c1 e010 	str.w	lr, [r1, #16]
   8415c:	da66      	bge.n	8422c <_malloc_r+0x1a0>
   8415e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84162:	f080 812d 	bcs.w	843c0 <_malloc_r+0x334>
   84166:	08db      	lsrs	r3, r3, #3
   84168:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   8416c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   84170:	684a      	ldr	r2, [r1, #4]
   84172:	2301      	movs	r3, #1
   84174:	fa03 f30c 	lsl.w	r3, r3, ip
   84178:	f8d8 c008 	ldr.w	ip, [r8, #8]
   8417c:	4313      	orrs	r3, r2
   8417e:	f8c4 c008 	str.w	ip, [r4, #8]
   84182:	f8c4 800c 	str.w	r8, [r4, #12]
   84186:	604b      	str	r3, [r1, #4]
   84188:	f8c8 4008 	str.w	r4, [r8, #8]
   8418c:	f8cc 400c 	str.w	r4, [ip, #12]
   84190:	1082      	asrs	r2, r0, #2
   84192:	2401      	movs	r4, #1
   84194:	4094      	lsls	r4, r2
   84196:	429c      	cmp	r4, r3
   84198:	d855      	bhi.n	84246 <_malloc_r+0x1ba>
   8419a:	4223      	tst	r3, r4
   8419c:	d106      	bne.n	841ac <_malloc_r+0x120>
   8419e:	f020 0003 	bic.w	r0, r0, #3
   841a2:	0064      	lsls	r4, r4, #1
   841a4:	4223      	tst	r3, r4
   841a6:	f100 0004 	add.w	r0, r0, #4
   841aa:	d0fa      	beq.n	841a2 <_malloc_r+0x116>
   841ac:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   841b0:	46c4      	mov	ip, r8
   841b2:	4681      	mov	r9, r0
   841b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   841b8:	459c      	cmp	ip, r3
   841ba:	d107      	bne.n	841cc <_malloc_r+0x140>
   841bc:	e135      	b.n	8442a <_malloc_r+0x39e>
   841be:	2900      	cmp	r1, #0
   841c0:	f280 8145 	bge.w	8444e <_malloc_r+0x3c2>
   841c4:	68db      	ldr	r3, [r3, #12]
   841c6:	459c      	cmp	ip, r3
   841c8:	f000 812f 	beq.w	8442a <_malloc_r+0x39e>
   841cc:	685a      	ldr	r2, [r3, #4]
   841ce:	f022 0203 	bic.w	r2, r2, #3
   841d2:	1b51      	subs	r1, r2, r5
   841d4:	290f      	cmp	r1, #15
   841d6:	ddf2      	ble.n	841be <_malloc_r+0x132>
   841d8:	461c      	mov	r4, r3
   841da:	68da      	ldr	r2, [r3, #12]
   841dc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   841e0:	f045 0901 	orr.w	r9, r5, #1
   841e4:	f041 0801 	orr.w	r8, r1, #1
   841e8:	441d      	add	r5, r3
   841ea:	f8c3 9004 	str.w	r9, [r3, #4]
   841ee:	4630      	mov	r0, r6
   841f0:	f8cc 200c 	str.w	r2, [ip, #12]
   841f4:	f8c2 c008 	str.w	ip, [r2, #8]
   841f8:	617d      	str	r5, [r7, #20]
   841fa:	613d      	str	r5, [r7, #16]
   841fc:	f8c5 e00c 	str.w	lr, [r5, #12]
   84200:	f8c5 e008 	str.w	lr, [r5, #8]
   84204:	f8c5 8004 	str.w	r8, [r5, #4]
   84208:	5069      	str	r1, [r5, r1]
   8420a:	f000 fa75 	bl	846f8 <__malloc_unlock>
   8420e:	e769      	b.n	840e4 <_malloc_r+0x58>
   84210:	2400      	movs	r4, #0
   84212:	4620      	mov	r0, r4
   84214:	230c      	movs	r3, #12
   84216:	6033      	str	r3, [r6, #0]
   84218:	b003      	add	sp, #12
   8421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8421e:	217e      	movs	r1, #126	; 0x7e
   84220:	203f      	movs	r0, #63	; 0x3f
   84222:	e773      	b.n	8410c <_malloc_r+0x80>
   84224:	4423      	add	r3, r4
   84226:	685a      	ldr	r2, [r3, #4]
   84228:	68e1      	ldr	r1, [r4, #12]
   8422a:	e751      	b.n	840d0 <_malloc_r+0x44>
   8422c:	4423      	add	r3, r4
   8422e:	685a      	ldr	r2, [r3, #4]
   84230:	4630      	mov	r0, r6
   84232:	f042 0201 	orr.w	r2, r2, #1
   84236:	605a      	str	r2, [r3, #4]
   84238:	3408      	adds	r4, #8
   8423a:	f000 fa5d 	bl	846f8 <__malloc_unlock>
   8423e:	4620      	mov	r0, r4
   84240:	b003      	add	sp, #12
   84242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84246:	68bc      	ldr	r4, [r7, #8]
   84248:	6863      	ldr	r3, [r4, #4]
   8424a:	f023 0803 	bic.w	r8, r3, #3
   8424e:	4545      	cmp	r5, r8
   84250:	d804      	bhi.n	8425c <_malloc_r+0x1d0>
   84252:	ebc5 0308 	rsb	r3, r5, r8
   84256:	2b0f      	cmp	r3, #15
   84258:	f300 808c 	bgt.w	84374 <_malloc_r+0x2e8>
   8425c:	4b53      	ldr	r3, [pc, #332]	; (843ac <_malloc_r+0x320>)
   8425e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 843bc <_malloc_r+0x330>
   84262:	681a      	ldr	r2, [r3, #0]
   84264:	f8da 3000 	ldr.w	r3, [sl]
   84268:	442a      	add	r2, r5
   8426a:	3301      	adds	r3, #1
   8426c:	eb04 0b08 	add.w	fp, r4, r8
   84270:	f000 8151 	beq.w	84516 <_malloc_r+0x48a>
   84274:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   84278:	320f      	adds	r2, #15
   8427a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8427e:	f022 020f 	bic.w	r2, r2, #15
   84282:	4611      	mov	r1, r2
   84284:	4630      	mov	r0, r6
   84286:	9201      	str	r2, [sp, #4]
   84288:	f000 fcba 	bl	84c00 <_sbrk_r>
   8428c:	f1b0 3fff 	cmp.w	r0, #4294967295
   84290:	4681      	mov	r9, r0
   84292:	9a01      	ldr	r2, [sp, #4]
   84294:	f000 8148 	beq.w	84528 <_malloc_r+0x49c>
   84298:	4583      	cmp	fp, r0
   8429a:	f200 80ef 	bhi.w	8447c <_malloc_r+0x3f0>
   8429e:	4b44      	ldr	r3, [pc, #272]	; (843b0 <_malloc_r+0x324>)
   842a0:	45cb      	cmp	fp, r9
   842a2:	6819      	ldr	r1, [r3, #0]
   842a4:	4411      	add	r1, r2
   842a6:	6019      	str	r1, [r3, #0]
   842a8:	f000 8143 	beq.w	84532 <_malloc_r+0x4a6>
   842ac:	f8da 0000 	ldr.w	r0, [sl]
   842b0:	f8df e108 	ldr.w	lr, [pc, #264]	; 843bc <_malloc_r+0x330>
   842b4:	3001      	adds	r0, #1
   842b6:	bf1b      	ittet	ne
   842b8:	ebcb 0b09 	rsbne	fp, fp, r9
   842bc:	4459      	addne	r1, fp
   842be:	f8ce 9000 	streq.w	r9, [lr]
   842c2:	6019      	strne	r1, [r3, #0]
   842c4:	f019 0107 	ands.w	r1, r9, #7
   842c8:	f000 8108 	beq.w	844dc <_malloc_r+0x450>
   842cc:	f1c1 0008 	rsb	r0, r1, #8
   842d0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   842d4:	4481      	add	r9, r0
   842d6:	3108      	adds	r1, #8
   842d8:	444a      	add	r2, r9
   842da:	f3c2 020b 	ubfx	r2, r2, #0, #12
   842de:	ebc2 0a01 	rsb	sl, r2, r1
   842e2:	4651      	mov	r1, sl
   842e4:	4630      	mov	r0, r6
   842e6:	9301      	str	r3, [sp, #4]
   842e8:	f000 fc8a 	bl	84c00 <_sbrk_r>
   842ec:	1c43      	adds	r3, r0, #1
   842ee:	9b01      	ldr	r3, [sp, #4]
   842f0:	f000 812d 	beq.w	8454e <_malloc_r+0x4c2>
   842f4:	ebc9 0200 	rsb	r2, r9, r0
   842f8:	4452      	add	r2, sl
   842fa:	f042 0201 	orr.w	r2, r2, #1
   842fe:	6819      	ldr	r1, [r3, #0]
   84300:	42bc      	cmp	r4, r7
   84302:	4451      	add	r1, sl
   84304:	f8c7 9008 	str.w	r9, [r7, #8]
   84308:	6019      	str	r1, [r3, #0]
   8430a:	f8c9 2004 	str.w	r2, [r9, #4]
   8430e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 843b0 <_malloc_r+0x324>
   84312:	d016      	beq.n	84342 <_malloc_r+0x2b6>
   84314:	f1b8 0f0f 	cmp.w	r8, #15
   84318:	f240 80ef 	bls.w	844fa <_malloc_r+0x46e>
   8431c:	6862      	ldr	r2, [r4, #4]
   8431e:	f1a8 030c 	sub.w	r3, r8, #12
   84322:	f023 0307 	bic.w	r3, r3, #7
   84326:	f002 0201 	and.w	r2, r2, #1
   8432a:	18e0      	adds	r0, r4, r3
   8432c:	f04f 0e05 	mov.w	lr, #5
   84330:	431a      	orrs	r2, r3
   84332:	2b0f      	cmp	r3, #15
   84334:	6062      	str	r2, [r4, #4]
   84336:	f8c0 e004 	str.w	lr, [r0, #4]
   8433a:	f8c0 e008 	str.w	lr, [r0, #8]
   8433e:	f200 810a 	bhi.w	84556 <_malloc_r+0x4ca>
   84342:	4b1c      	ldr	r3, [pc, #112]	; (843b4 <_malloc_r+0x328>)
   84344:	68bc      	ldr	r4, [r7, #8]
   84346:	681a      	ldr	r2, [r3, #0]
   84348:	4291      	cmp	r1, r2
   8434a:	bf88      	it	hi
   8434c:	6019      	strhi	r1, [r3, #0]
   8434e:	4b1a      	ldr	r3, [pc, #104]	; (843b8 <_malloc_r+0x32c>)
   84350:	681a      	ldr	r2, [r3, #0]
   84352:	4291      	cmp	r1, r2
   84354:	6862      	ldr	r2, [r4, #4]
   84356:	bf88      	it	hi
   84358:	6019      	strhi	r1, [r3, #0]
   8435a:	f022 0203 	bic.w	r2, r2, #3
   8435e:	4295      	cmp	r5, r2
   84360:	eba2 0305 	sub.w	r3, r2, r5
   84364:	d801      	bhi.n	8436a <_malloc_r+0x2de>
   84366:	2b0f      	cmp	r3, #15
   84368:	dc04      	bgt.n	84374 <_malloc_r+0x2e8>
   8436a:	4630      	mov	r0, r6
   8436c:	f000 f9c4 	bl	846f8 <__malloc_unlock>
   84370:	2400      	movs	r4, #0
   84372:	e6b7      	b.n	840e4 <_malloc_r+0x58>
   84374:	f045 0201 	orr.w	r2, r5, #1
   84378:	f043 0301 	orr.w	r3, r3, #1
   8437c:	4425      	add	r5, r4
   8437e:	6062      	str	r2, [r4, #4]
   84380:	4630      	mov	r0, r6
   84382:	60bd      	str	r5, [r7, #8]
   84384:	3408      	adds	r4, #8
   84386:	606b      	str	r3, [r5, #4]
   84388:	f000 f9b6 	bl	846f8 <__malloc_unlock>
   8438c:	4620      	mov	r0, r4
   8438e:	b003      	add	sp, #12
   84390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84394:	2814      	cmp	r0, #20
   84396:	d969      	bls.n	8446c <_malloc_r+0x3e0>
   84398:	2854      	cmp	r0, #84	; 0x54
   8439a:	f200 8098 	bhi.w	844ce <_malloc_r+0x442>
   8439e:	0b28      	lsrs	r0, r5, #12
   843a0:	306e      	adds	r0, #110	; 0x6e
   843a2:	0041      	lsls	r1, r0, #1
   843a4:	e6b2      	b.n	8410c <_malloc_r+0x80>
   843a6:	bf00      	nop
   843a8:	20070598 	.word	0x20070598
   843ac:	2007ac30 	.word	0x2007ac30
   843b0:	2007ac34 	.word	0x2007ac34
   843b4:	2007ac2c 	.word	0x2007ac2c
   843b8:	2007ac28 	.word	0x2007ac28
   843bc:	200709a4 	.word	0x200709a4
   843c0:	0a5a      	lsrs	r2, r3, #9
   843c2:	2a04      	cmp	r2, #4
   843c4:	d955      	bls.n	84472 <_malloc_r+0x3e6>
   843c6:	2a14      	cmp	r2, #20
   843c8:	f200 80a7 	bhi.w	8451a <_malloc_r+0x48e>
   843cc:	325b      	adds	r2, #91	; 0x5b
   843ce:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   843d2:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   843d6:	f8dc 1008 	ldr.w	r1, [ip, #8]
   843da:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84594 <_malloc_r+0x508>
   843de:	4561      	cmp	r1, ip
   843e0:	d07f      	beq.n	844e2 <_malloc_r+0x456>
   843e2:	684a      	ldr	r2, [r1, #4]
   843e4:	f022 0203 	bic.w	r2, r2, #3
   843e8:	4293      	cmp	r3, r2
   843ea:	d202      	bcs.n	843f2 <_malloc_r+0x366>
   843ec:	6889      	ldr	r1, [r1, #8]
   843ee:	458c      	cmp	ip, r1
   843f0:	d1f7      	bne.n	843e2 <_malloc_r+0x356>
   843f2:	68ca      	ldr	r2, [r1, #12]
   843f4:	687b      	ldr	r3, [r7, #4]
   843f6:	60e2      	str	r2, [r4, #12]
   843f8:	60a1      	str	r1, [r4, #8]
   843fa:	6094      	str	r4, [r2, #8]
   843fc:	60cc      	str	r4, [r1, #12]
   843fe:	e6c7      	b.n	84190 <_malloc_r+0x104>
   84400:	f045 0701 	orr.w	r7, r5, #1
   84404:	f042 0301 	orr.w	r3, r2, #1
   84408:	4425      	add	r5, r4
   8440a:	6067      	str	r7, [r4, #4]
   8440c:	4630      	mov	r0, r6
   8440e:	614d      	str	r5, [r1, #20]
   84410:	610d      	str	r5, [r1, #16]
   84412:	f8c5 e00c 	str.w	lr, [r5, #12]
   84416:	f8c5 e008 	str.w	lr, [r5, #8]
   8441a:	606b      	str	r3, [r5, #4]
   8441c:	50aa      	str	r2, [r5, r2]
   8441e:	3408      	adds	r4, #8
   84420:	f000 f96a 	bl	846f8 <__malloc_unlock>
   84424:	e65e      	b.n	840e4 <_malloc_r+0x58>
   84426:	684b      	ldr	r3, [r1, #4]
   84428:	e6b2      	b.n	84190 <_malloc_r+0x104>
   8442a:	f109 0901 	add.w	r9, r9, #1
   8442e:	f019 0f03 	tst.w	r9, #3
   84432:	f10c 0c08 	add.w	ip, ip, #8
   84436:	f47f aebd 	bne.w	841b4 <_malloc_r+0x128>
   8443a:	e02c      	b.n	84496 <_malloc_r+0x40a>
   8443c:	f104 0308 	add.w	r3, r4, #8
   84440:	6964      	ldr	r4, [r4, #20]
   84442:	42a3      	cmp	r3, r4
   84444:	bf08      	it	eq
   84446:	3002      	addeq	r0, #2
   84448:	f43f ae75 	beq.w	84136 <_malloc_r+0xaa>
   8444c:	e63a      	b.n	840c4 <_malloc_r+0x38>
   8444e:	461c      	mov	r4, r3
   84450:	441a      	add	r2, r3
   84452:	6851      	ldr	r1, [r2, #4]
   84454:	68db      	ldr	r3, [r3, #12]
   84456:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8445a:	f041 0101 	orr.w	r1, r1, #1
   8445e:	6051      	str	r1, [r2, #4]
   84460:	4630      	mov	r0, r6
   84462:	60eb      	str	r3, [r5, #12]
   84464:	609d      	str	r5, [r3, #8]
   84466:	f000 f947 	bl	846f8 <__malloc_unlock>
   8446a:	e63b      	b.n	840e4 <_malloc_r+0x58>
   8446c:	305b      	adds	r0, #91	; 0x5b
   8446e:	0041      	lsls	r1, r0, #1
   84470:	e64c      	b.n	8410c <_malloc_r+0x80>
   84472:	099a      	lsrs	r2, r3, #6
   84474:	3238      	adds	r2, #56	; 0x38
   84476:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8447a:	e7aa      	b.n	843d2 <_malloc_r+0x346>
   8447c:	42bc      	cmp	r4, r7
   8447e:	4b45      	ldr	r3, [pc, #276]	; (84594 <_malloc_r+0x508>)
   84480:	f43f af0d 	beq.w	8429e <_malloc_r+0x212>
   84484:	689c      	ldr	r4, [r3, #8]
   84486:	6862      	ldr	r2, [r4, #4]
   84488:	f022 0203 	bic.w	r2, r2, #3
   8448c:	e767      	b.n	8435e <_malloc_r+0x2d2>
   8448e:	f8d8 8000 	ldr.w	r8, [r8]
   84492:	4598      	cmp	r8, r3
   84494:	d17c      	bne.n	84590 <_malloc_r+0x504>
   84496:	f010 0f03 	tst.w	r0, #3
   8449a:	f1a8 0308 	sub.w	r3, r8, #8
   8449e:	f100 30ff 	add.w	r0, r0, #4294967295
   844a2:	d1f4      	bne.n	8448e <_malloc_r+0x402>
   844a4:	687b      	ldr	r3, [r7, #4]
   844a6:	ea23 0304 	bic.w	r3, r3, r4
   844aa:	607b      	str	r3, [r7, #4]
   844ac:	0064      	lsls	r4, r4, #1
   844ae:	429c      	cmp	r4, r3
   844b0:	f63f aec9 	bhi.w	84246 <_malloc_r+0x1ba>
   844b4:	2c00      	cmp	r4, #0
   844b6:	f43f aec6 	beq.w	84246 <_malloc_r+0x1ba>
   844ba:	4223      	tst	r3, r4
   844bc:	4648      	mov	r0, r9
   844be:	f47f ae75 	bne.w	841ac <_malloc_r+0x120>
   844c2:	0064      	lsls	r4, r4, #1
   844c4:	4223      	tst	r3, r4
   844c6:	f100 0004 	add.w	r0, r0, #4
   844ca:	d0fa      	beq.n	844c2 <_malloc_r+0x436>
   844cc:	e66e      	b.n	841ac <_malloc_r+0x120>
   844ce:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   844d2:	d818      	bhi.n	84506 <_malloc_r+0x47a>
   844d4:	0be8      	lsrs	r0, r5, #15
   844d6:	3077      	adds	r0, #119	; 0x77
   844d8:	0041      	lsls	r1, r0, #1
   844da:	e617      	b.n	8410c <_malloc_r+0x80>
   844dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   844e0:	e6fa      	b.n	842d8 <_malloc_r+0x24c>
   844e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   844e6:	1092      	asrs	r2, r2, #2
   844e8:	f04f 0c01 	mov.w	ip, #1
   844ec:	fa0c f202 	lsl.w	r2, ip, r2
   844f0:	4313      	orrs	r3, r2
   844f2:	f8c8 3004 	str.w	r3, [r8, #4]
   844f6:	460a      	mov	r2, r1
   844f8:	e77d      	b.n	843f6 <_malloc_r+0x36a>
   844fa:	2301      	movs	r3, #1
   844fc:	f8c9 3004 	str.w	r3, [r9, #4]
   84500:	464c      	mov	r4, r9
   84502:	2200      	movs	r2, #0
   84504:	e72b      	b.n	8435e <_malloc_r+0x2d2>
   84506:	f240 5354 	movw	r3, #1364	; 0x554
   8450a:	4298      	cmp	r0, r3
   8450c:	d81c      	bhi.n	84548 <_malloc_r+0x4bc>
   8450e:	0ca8      	lsrs	r0, r5, #18
   84510:	307c      	adds	r0, #124	; 0x7c
   84512:	0041      	lsls	r1, r0, #1
   84514:	e5fa      	b.n	8410c <_malloc_r+0x80>
   84516:	3210      	adds	r2, #16
   84518:	e6b3      	b.n	84282 <_malloc_r+0x1f6>
   8451a:	2a54      	cmp	r2, #84	; 0x54
   8451c:	d823      	bhi.n	84566 <_malloc_r+0x4da>
   8451e:	0b1a      	lsrs	r2, r3, #12
   84520:	326e      	adds	r2, #110	; 0x6e
   84522:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   84526:	e754      	b.n	843d2 <_malloc_r+0x346>
   84528:	68bc      	ldr	r4, [r7, #8]
   8452a:	6862      	ldr	r2, [r4, #4]
   8452c:	f022 0203 	bic.w	r2, r2, #3
   84530:	e715      	b.n	8435e <_malloc_r+0x2d2>
   84532:	f3cb 000b 	ubfx	r0, fp, #0, #12
   84536:	2800      	cmp	r0, #0
   84538:	f47f aeb8 	bne.w	842ac <_malloc_r+0x220>
   8453c:	4442      	add	r2, r8
   8453e:	68bb      	ldr	r3, [r7, #8]
   84540:	f042 0201 	orr.w	r2, r2, #1
   84544:	605a      	str	r2, [r3, #4]
   84546:	e6fc      	b.n	84342 <_malloc_r+0x2b6>
   84548:	21fc      	movs	r1, #252	; 0xfc
   8454a:	207e      	movs	r0, #126	; 0x7e
   8454c:	e5de      	b.n	8410c <_malloc_r+0x80>
   8454e:	2201      	movs	r2, #1
   84550:	f04f 0a00 	mov.w	sl, #0
   84554:	e6d3      	b.n	842fe <_malloc_r+0x272>
   84556:	f104 0108 	add.w	r1, r4, #8
   8455a:	4630      	mov	r0, r6
   8455c:	f7ff fa60 	bl	83a20 <_free_r>
   84560:	f8da 1000 	ldr.w	r1, [sl]
   84564:	e6ed      	b.n	84342 <_malloc_r+0x2b6>
   84566:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8456a:	d804      	bhi.n	84576 <_malloc_r+0x4ea>
   8456c:	0bda      	lsrs	r2, r3, #15
   8456e:	3277      	adds	r2, #119	; 0x77
   84570:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   84574:	e72d      	b.n	843d2 <_malloc_r+0x346>
   84576:	f240 5154 	movw	r1, #1364	; 0x554
   8457a:	428a      	cmp	r2, r1
   8457c:	d804      	bhi.n	84588 <_malloc_r+0x4fc>
   8457e:	0c9a      	lsrs	r2, r3, #18
   84580:	327c      	adds	r2, #124	; 0x7c
   84582:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   84586:	e724      	b.n	843d2 <_malloc_r+0x346>
   84588:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   8458c:	227e      	movs	r2, #126	; 0x7e
   8458e:	e720      	b.n	843d2 <_malloc_r+0x346>
   84590:	687b      	ldr	r3, [r7, #4]
   84592:	e78b      	b.n	844ac <_malloc_r+0x420>
   84594:	20070598 	.word	0x20070598

00084598 <memchr>:
   84598:	0783      	lsls	r3, r0, #30
   8459a:	b470      	push	{r4, r5, r6}
   8459c:	b2c9      	uxtb	r1, r1
   8459e:	d040      	beq.n	84622 <memchr+0x8a>
   845a0:	1e54      	subs	r4, r2, #1
   845a2:	2a00      	cmp	r2, #0
   845a4:	d03f      	beq.n	84626 <memchr+0x8e>
   845a6:	7803      	ldrb	r3, [r0, #0]
   845a8:	428b      	cmp	r3, r1
   845aa:	bf18      	it	ne
   845ac:	1c43      	addne	r3, r0, #1
   845ae:	d105      	bne.n	845bc <memchr+0x24>
   845b0:	e01c      	b.n	845ec <memchr+0x54>
   845b2:	b1ec      	cbz	r4, 845f0 <memchr+0x58>
   845b4:	7802      	ldrb	r2, [r0, #0]
   845b6:	3c01      	subs	r4, #1
   845b8:	428a      	cmp	r2, r1
   845ba:	d017      	beq.n	845ec <memchr+0x54>
   845bc:	f013 0f03 	tst.w	r3, #3
   845c0:	4618      	mov	r0, r3
   845c2:	f103 0301 	add.w	r3, r3, #1
   845c6:	d1f4      	bne.n	845b2 <memchr+0x1a>
   845c8:	2c03      	cmp	r4, #3
   845ca:	d814      	bhi.n	845f6 <memchr+0x5e>
   845cc:	b184      	cbz	r4, 845f0 <memchr+0x58>
   845ce:	7803      	ldrb	r3, [r0, #0]
   845d0:	428b      	cmp	r3, r1
   845d2:	d00b      	beq.n	845ec <memchr+0x54>
   845d4:	1905      	adds	r5, r0, r4
   845d6:	1c43      	adds	r3, r0, #1
   845d8:	e002      	b.n	845e0 <memchr+0x48>
   845da:	7802      	ldrb	r2, [r0, #0]
   845dc:	428a      	cmp	r2, r1
   845de:	d005      	beq.n	845ec <memchr+0x54>
   845e0:	42ab      	cmp	r3, r5
   845e2:	4618      	mov	r0, r3
   845e4:	f103 0301 	add.w	r3, r3, #1
   845e8:	d1f7      	bne.n	845da <memchr+0x42>
   845ea:	2000      	movs	r0, #0
   845ec:	bc70      	pop	{r4, r5, r6}
   845ee:	4770      	bx	lr
   845f0:	4620      	mov	r0, r4
   845f2:	bc70      	pop	{r4, r5, r6}
   845f4:	4770      	bx	lr
   845f6:	4602      	mov	r2, r0
   845f8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   845fc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   84600:	6813      	ldr	r3, [r2, #0]
   84602:	4610      	mov	r0, r2
   84604:	4073      	eors	r3, r6
   84606:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   8460a:	ea25 0303 	bic.w	r3, r5, r3
   8460e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84612:	f102 0204 	add.w	r2, r2, #4
   84616:	d1d9      	bne.n	845cc <memchr+0x34>
   84618:	3c04      	subs	r4, #4
   8461a:	2c03      	cmp	r4, #3
   8461c:	4610      	mov	r0, r2
   8461e:	d8ef      	bhi.n	84600 <memchr+0x68>
   84620:	e7d4      	b.n	845cc <memchr+0x34>
   84622:	4614      	mov	r4, r2
   84624:	e7d0      	b.n	845c8 <memchr+0x30>
   84626:	4610      	mov	r0, r2
   84628:	e7e0      	b.n	845ec <memchr+0x54>
   8462a:	bf00      	nop

0008462c <memmove>:
   8462c:	4288      	cmp	r0, r1
   8462e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84630:	d90d      	bls.n	8464e <memmove+0x22>
   84632:	188b      	adds	r3, r1, r2
   84634:	4298      	cmp	r0, r3
   84636:	d20a      	bcs.n	8464e <memmove+0x22>
   84638:	1881      	adds	r1, r0, r2
   8463a:	2a00      	cmp	r2, #0
   8463c:	d054      	beq.n	846e8 <memmove+0xbc>
   8463e:	1a9a      	subs	r2, r3, r2
   84640:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84644:	4293      	cmp	r3, r2
   84646:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8464a:	d1f9      	bne.n	84640 <memmove+0x14>
   8464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8464e:	2a0f      	cmp	r2, #15
   84650:	d948      	bls.n	846e4 <memmove+0xb8>
   84652:	ea40 0301 	orr.w	r3, r0, r1
   84656:	079b      	lsls	r3, r3, #30
   84658:	d147      	bne.n	846ea <memmove+0xbe>
   8465a:	4615      	mov	r5, r2
   8465c:	f100 0410 	add.w	r4, r0, #16
   84660:	f101 0310 	add.w	r3, r1, #16
   84664:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84668:	3d10      	subs	r5, #16
   8466a:	f844 6c10 	str.w	r6, [r4, #-16]
   8466e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84672:	2d0f      	cmp	r5, #15
   84674:	f844 6c0c 	str.w	r6, [r4, #-12]
   84678:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8467c:	f104 0410 	add.w	r4, r4, #16
   84680:	f844 6c18 	str.w	r6, [r4, #-24]
   84684:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84688:	f103 0310 	add.w	r3, r3, #16
   8468c:	f844 6c14 	str.w	r6, [r4, #-20]
   84690:	d8e8      	bhi.n	84664 <memmove+0x38>
   84692:	f1a2 0310 	sub.w	r3, r2, #16
   84696:	f023 030f 	bic.w	r3, r3, #15
   8469a:	f002 0e0f 	and.w	lr, r2, #15
   8469e:	3310      	adds	r3, #16
   846a0:	f1be 0f03 	cmp.w	lr, #3
   846a4:	4419      	add	r1, r3
   846a6:	4403      	add	r3, r0
   846a8:	d921      	bls.n	846ee <memmove+0xc2>
   846aa:	460e      	mov	r6, r1
   846ac:	4674      	mov	r4, lr
   846ae:	1f1d      	subs	r5, r3, #4
   846b0:	f856 7b04 	ldr.w	r7, [r6], #4
   846b4:	3c04      	subs	r4, #4
   846b6:	2c03      	cmp	r4, #3
   846b8:	f845 7f04 	str.w	r7, [r5, #4]!
   846bc:	d8f8      	bhi.n	846b0 <memmove+0x84>
   846be:	f1ae 0404 	sub.w	r4, lr, #4
   846c2:	f024 0403 	bic.w	r4, r4, #3
   846c6:	3404      	adds	r4, #4
   846c8:	4423      	add	r3, r4
   846ca:	4421      	add	r1, r4
   846cc:	f002 0203 	and.w	r2, r2, #3
   846d0:	b152      	cbz	r2, 846e8 <memmove+0xbc>
   846d2:	3b01      	subs	r3, #1
   846d4:	440a      	add	r2, r1
   846d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   846da:	4291      	cmp	r1, r2
   846dc:	f803 4f01 	strb.w	r4, [r3, #1]!
   846e0:	d1f9      	bne.n	846d6 <memmove+0xaa>
   846e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   846e4:	4603      	mov	r3, r0
   846e6:	e7f3      	b.n	846d0 <memmove+0xa4>
   846e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   846ea:	4603      	mov	r3, r0
   846ec:	e7f1      	b.n	846d2 <memmove+0xa6>
   846ee:	4672      	mov	r2, lr
   846f0:	e7ee      	b.n	846d0 <memmove+0xa4>
   846f2:	bf00      	nop

000846f4 <__malloc_lock>:
   846f4:	4770      	bx	lr
   846f6:	bf00      	nop

000846f8 <__malloc_unlock>:
   846f8:	4770      	bx	lr
   846fa:	bf00      	nop

000846fc <_realloc_r>:
   846fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84700:	4617      	mov	r7, r2
   84702:	b083      	sub	sp, #12
   84704:	460d      	mov	r5, r1
   84706:	2900      	cmp	r1, #0
   84708:	f000 80e2 	beq.w	848d0 <_realloc_r+0x1d4>
   8470c:	4681      	mov	r9, r0
   8470e:	f107 040b 	add.w	r4, r7, #11
   84712:	f7ff ffef 	bl	846f4 <__malloc_lock>
   84716:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8471a:	2c16      	cmp	r4, #22
   8471c:	f023 0603 	bic.w	r6, r3, #3
   84720:	f1a5 0808 	sub.w	r8, r5, #8
   84724:	d84b      	bhi.n	847be <_realloc_r+0xc2>
   84726:	2210      	movs	r2, #16
   84728:	4614      	mov	r4, r2
   8472a:	42a7      	cmp	r7, r4
   8472c:	d84c      	bhi.n	847c8 <_realloc_r+0xcc>
   8472e:	4296      	cmp	r6, r2
   84730:	da51      	bge.n	847d6 <_realloc_r+0xda>
   84732:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 84ad8 <_realloc_r+0x3dc>
   84736:	eb08 0106 	add.w	r1, r8, r6
   8473a:	f8db 0008 	ldr.w	r0, [fp, #8]
   8473e:	4288      	cmp	r0, r1
   84740:	f000 80d3 	beq.w	848ea <_realloc_r+0x1ee>
   84744:	6848      	ldr	r0, [r1, #4]
   84746:	f020 0e01 	bic.w	lr, r0, #1
   8474a:	448e      	add	lr, r1
   8474c:	f8de e004 	ldr.w	lr, [lr, #4]
   84750:	f01e 0f01 	tst.w	lr, #1
   84754:	d154      	bne.n	84800 <_realloc_r+0x104>
   84756:	f020 0003 	bic.w	r0, r0, #3
   8475a:	4430      	add	r0, r6
   8475c:	4290      	cmp	r0, r2
   8475e:	f280 80bd 	bge.w	848dc <_realloc_r+0x1e0>
   84762:	07db      	lsls	r3, r3, #31
   84764:	f100 8090 	bmi.w	84888 <_realloc_r+0x18c>
   84768:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8476c:	ebc3 0a08 	rsb	sl, r3, r8
   84770:	f8da 3004 	ldr.w	r3, [sl, #4]
   84774:	f023 0303 	bic.w	r3, r3, #3
   84778:	eb00 0e03 	add.w	lr, r0, r3
   8477c:	4596      	cmp	lr, r2
   8477e:	db49      	blt.n	84814 <_realloc_r+0x118>
   84780:	4657      	mov	r7, sl
   84782:	68cb      	ldr	r3, [r1, #12]
   84784:	6889      	ldr	r1, [r1, #8]
   84786:	1f32      	subs	r2, r6, #4
   84788:	60cb      	str	r3, [r1, #12]
   8478a:	6099      	str	r1, [r3, #8]
   8478c:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84790:	f8da 300c 	ldr.w	r3, [sl, #12]
   84794:	2a24      	cmp	r2, #36	; 0x24
   84796:	60cb      	str	r3, [r1, #12]
   84798:	6099      	str	r1, [r3, #8]
   8479a:	f200 8133 	bhi.w	84a04 <_realloc_r+0x308>
   8479e:	2a13      	cmp	r2, #19
   847a0:	f240 80fa 	bls.w	84998 <_realloc_r+0x29c>
   847a4:	682b      	ldr	r3, [r5, #0]
   847a6:	2a1b      	cmp	r2, #27
   847a8:	f8ca 3008 	str.w	r3, [sl, #8]
   847ac:	686b      	ldr	r3, [r5, #4]
   847ae:	f8ca 300c 	str.w	r3, [sl, #12]
   847b2:	f200 813b 	bhi.w	84a2c <_realloc_r+0x330>
   847b6:	3508      	adds	r5, #8
   847b8:	f10a 0310 	add.w	r3, sl, #16
   847bc:	e0ed      	b.n	8499a <_realloc_r+0x29e>
   847be:	f024 0407 	bic.w	r4, r4, #7
   847c2:	2c00      	cmp	r4, #0
   847c4:	4622      	mov	r2, r4
   847c6:	dab0      	bge.n	8472a <_realloc_r+0x2e>
   847c8:	230c      	movs	r3, #12
   847ca:	2000      	movs	r0, #0
   847cc:	f8c9 3000 	str.w	r3, [r9]
   847d0:	b003      	add	sp, #12
   847d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847d6:	462f      	mov	r7, r5
   847d8:	1b32      	subs	r2, r6, r4
   847da:	2a0f      	cmp	r2, #15
   847dc:	f003 0301 	and.w	r3, r3, #1
   847e0:	d840      	bhi.n	84864 <_realloc_r+0x168>
   847e2:	4333      	orrs	r3, r6
   847e4:	f8c8 3004 	str.w	r3, [r8, #4]
   847e8:	4446      	add	r6, r8
   847ea:	6873      	ldr	r3, [r6, #4]
   847ec:	f043 0301 	orr.w	r3, r3, #1
   847f0:	6073      	str	r3, [r6, #4]
   847f2:	4648      	mov	r0, r9
   847f4:	f7ff ff80 	bl	846f8 <__malloc_unlock>
   847f8:	4638      	mov	r0, r7
   847fa:	b003      	add	sp, #12
   847fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84800:	07d9      	lsls	r1, r3, #31
   84802:	d441      	bmi.n	84888 <_realloc_r+0x18c>
   84804:	f855 3c08 	ldr.w	r3, [r5, #-8]
   84808:	ebc3 0a08 	rsb	sl, r3, r8
   8480c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84810:	f023 0303 	bic.w	r3, r3, #3
   84814:	4433      	add	r3, r6
   84816:	4293      	cmp	r3, r2
   84818:	db36      	blt.n	84888 <_realloc_r+0x18c>
   8481a:	4657      	mov	r7, sl
   8481c:	f8da 100c 	ldr.w	r1, [sl, #12]
   84820:	f857 0f08 	ldr.w	r0, [r7, #8]!
   84824:	1f32      	subs	r2, r6, #4
   84826:	2a24      	cmp	r2, #36	; 0x24
   84828:	60c1      	str	r1, [r0, #12]
   8482a:	6088      	str	r0, [r1, #8]
   8482c:	f200 80f5 	bhi.w	84a1a <_realloc_r+0x31e>
   84830:	2a13      	cmp	r2, #19
   84832:	f240 80f0 	bls.w	84a16 <_realloc_r+0x31a>
   84836:	6829      	ldr	r1, [r5, #0]
   84838:	2a1b      	cmp	r2, #27
   8483a:	f8ca 1008 	str.w	r1, [sl, #8]
   8483e:	6869      	ldr	r1, [r5, #4]
   84840:	f8ca 100c 	str.w	r1, [sl, #12]
   84844:	f200 8107 	bhi.w	84a56 <_realloc_r+0x35a>
   84848:	3508      	adds	r5, #8
   8484a:	f10a 0210 	add.w	r2, sl, #16
   8484e:	6829      	ldr	r1, [r5, #0]
   84850:	461e      	mov	r6, r3
   84852:	6011      	str	r1, [r2, #0]
   84854:	6869      	ldr	r1, [r5, #4]
   84856:	46d0      	mov	r8, sl
   84858:	6051      	str	r1, [r2, #4]
   8485a:	68ab      	ldr	r3, [r5, #8]
   8485c:	6093      	str	r3, [r2, #8]
   8485e:	f8da 3004 	ldr.w	r3, [sl, #4]
   84862:	e7b9      	b.n	847d8 <_realloc_r+0xdc>
   84864:	eb08 0104 	add.w	r1, r8, r4
   84868:	4323      	orrs	r3, r4
   8486a:	f042 0001 	orr.w	r0, r2, #1
   8486e:	f8c8 3004 	str.w	r3, [r8, #4]
   84872:	440a      	add	r2, r1
   84874:	6048      	str	r0, [r1, #4]
   84876:	6853      	ldr	r3, [r2, #4]
   84878:	3108      	adds	r1, #8
   8487a:	f043 0301 	orr.w	r3, r3, #1
   8487e:	6053      	str	r3, [r2, #4]
   84880:	4648      	mov	r0, r9
   84882:	f7ff f8cd 	bl	83a20 <_free_r>
   84886:	e7b4      	b.n	847f2 <_realloc_r+0xf6>
   84888:	4639      	mov	r1, r7
   8488a:	4648      	mov	r0, r9
   8488c:	f7ff fbfe 	bl	8408c <_malloc_r>
   84890:	4607      	mov	r7, r0
   84892:	2800      	cmp	r0, #0
   84894:	d0ad      	beq.n	847f2 <_realloc_r+0xf6>
   84896:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8489a:	f1a0 0108 	sub.w	r1, r0, #8
   8489e:	f023 0201 	bic.w	r2, r3, #1
   848a2:	4442      	add	r2, r8
   848a4:	4291      	cmp	r1, r2
   848a6:	f000 80a6 	beq.w	849f6 <_realloc_r+0x2fa>
   848aa:	1f32      	subs	r2, r6, #4
   848ac:	2a24      	cmp	r2, #36	; 0x24
   848ae:	f200 8093 	bhi.w	849d8 <_realloc_r+0x2dc>
   848b2:	2a13      	cmp	r2, #19
   848b4:	d865      	bhi.n	84982 <_realloc_r+0x286>
   848b6:	4603      	mov	r3, r0
   848b8:	462a      	mov	r2, r5
   848ba:	6811      	ldr	r1, [r2, #0]
   848bc:	6019      	str	r1, [r3, #0]
   848be:	6851      	ldr	r1, [r2, #4]
   848c0:	6059      	str	r1, [r3, #4]
   848c2:	6892      	ldr	r2, [r2, #8]
   848c4:	609a      	str	r2, [r3, #8]
   848c6:	4629      	mov	r1, r5
   848c8:	4648      	mov	r0, r9
   848ca:	f7ff f8a9 	bl	83a20 <_free_r>
   848ce:	e790      	b.n	847f2 <_realloc_r+0xf6>
   848d0:	4611      	mov	r1, r2
   848d2:	b003      	add	sp, #12
   848d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   848d8:	f7ff bbd8 	b.w	8408c <_malloc_r>
   848dc:	68ca      	ldr	r2, [r1, #12]
   848de:	6889      	ldr	r1, [r1, #8]
   848e0:	462f      	mov	r7, r5
   848e2:	60ca      	str	r2, [r1, #12]
   848e4:	4606      	mov	r6, r0
   848e6:	6091      	str	r1, [r2, #8]
   848e8:	e776      	b.n	847d8 <_realloc_r+0xdc>
   848ea:	6841      	ldr	r1, [r0, #4]
   848ec:	f104 0010 	add.w	r0, r4, #16
   848f0:	f021 0103 	bic.w	r1, r1, #3
   848f4:	4431      	add	r1, r6
   848f6:	4281      	cmp	r1, r0
   848f8:	da5a      	bge.n	849b0 <_realloc_r+0x2b4>
   848fa:	07db      	lsls	r3, r3, #31
   848fc:	d4c4      	bmi.n	84888 <_realloc_r+0x18c>
   848fe:	f855 3c08 	ldr.w	r3, [r5, #-8]
   84902:	ebc3 0a08 	rsb	sl, r3, r8
   84906:	f8da 3004 	ldr.w	r3, [sl, #4]
   8490a:	f023 0303 	bic.w	r3, r3, #3
   8490e:	eb01 0c03 	add.w	ip, r1, r3
   84912:	4560      	cmp	r0, ip
   84914:	f73f af7e 	bgt.w	84814 <_realloc_r+0x118>
   84918:	4657      	mov	r7, sl
   8491a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8491e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84922:	1f32      	subs	r2, r6, #4
   84924:	2a24      	cmp	r2, #36	; 0x24
   84926:	60cb      	str	r3, [r1, #12]
   84928:	6099      	str	r1, [r3, #8]
   8492a:	f200 80b6 	bhi.w	84a9a <_realloc_r+0x39e>
   8492e:	2a13      	cmp	r2, #19
   84930:	f240 80a7 	bls.w	84a82 <_realloc_r+0x386>
   84934:	682b      	ldr	r3, [r5, #0]
   84936:	2a1b      	cmp	r2, #27
   84938:	f8ca 3008 	str.w	r3, [sl, #8]
   8493c:	686b      	ldr	r3, [r5, #4]
   8493e:	f8ca 300c 	str.w	r3, [sl, #12]
   84942:	f200 80b3 	bhi.w	84aac <_realloc_r+0x3b0>
   84946:	3508      	adds	r5, #8
   84948:	f10a 0310 	add.w	r3, sl, #16
   8494c:	682a      	ldr	r2, [r5, #0]
   8494e:	601a      	str	r2, [r3, #0]
   84950:	686a      	ldr	r2, [r5, #4]
   84952:	605a      	str	r2, [r3, #4]
   84954:	68aa      	ldr	r2, [r5, #8]
   84956:	609a      	str	r2, [r3, #8]
   84958:	ebc4 030c 	rsb	r3, r4, ip
   8495c:	eb0a 0204 	add.w	r2, sl, r4
   84960:	f043 0301 	orr.w	r3, r3, #1
   84964:	f8cb 2008 	str.w	r2, [fp, #8]
   84968:	6053      	str	r3, [r2, #4]
   8496a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8496e:	4648      	mov	r0, r9
   84970:	f003 0301 	and.w	r3, r3, #1
   84974:	431c      	orrs	r4, r3
   84976:	f8ca 4004 	str.w	r4, [sl, #4]
   8497a:	f7ff febd 	bl	846f8 <__malloc_unlock>
   8497e:	4638      	mov	r0, r7
   84980:	e73b      	b.n	847fa <_realloc_r+0xfe>
   84982:	682b      	ldr	r3, [r5, #0]
   84984:	2a1b      	cmp	r2, #27
   84986:	6003      	str	r3, [r0, #0]
   84988:	686b      	ldr	r3, [r5, #4]
   8498a:	6043      	str	r3, [r0, #4]
   8498c:	d828      	bhi.n	849e0 <_realloc_r+0x2e4>
   8498e:	f100 0308 	add.w	r3, r0, #8
   84992:	f105 0208 	add.w	r2, r5, #8
   84996:	e790      	b.n	848ba <_realloc_r+0x1be>
   84998:	463b      	mov	r3, r7
   8499a:	682a      	ldr	r2, [r5, #0]
   8499c:	4676      	mov	r6, lr
   8499e:	601a      	str	r2, [r3, #0]
   849a0:	686a      	ldr	r2, [r5, #4]
   849a2:	46d0      	mov	r8, sl
   849a4:	605a      	str	r2, [r3, #4]
   849a6:	68aa      	ldr	r2, [r5, #8]
   849a8:	609a      	str	r2, [r3, #8]
   849aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   849ae:	e713      	b.n	847d8 <_realloc_r+0xdc>
   849b0:	1b0b      	subs	r3, r1, r4
   849b2:	eb08 0204 	add.w	r2, r8, r4
   849b6:	f043 0301 	orr.w	r3, r3, #1
   849ba:	f8cb 2008 	str.w	r2, [fp, #8]
   849be:	6053      	str	r3, [r2, #4]
   849c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   849c4:	4648      	mov	r0, r9
   849c6:	f003 0301 	and.w	r3, r3, #1
   849ca:	431c      	orrs	r4, r3
   849cc:	f845 4c04 	str.w	r4, [r5, #-4]
   849d0:	f7ff fe92 	bl	846f8 <__malloc_unlock>
   849d4:	4628      	mov	r0, r5
   849d6:	e710      	b.n	847fa <_realloc_r+0xfe>
   849d8:	4629      	mov	r1, r5
   849da:	f7ff fe27 	bl	8462c <memmove>
   849de:	e772      	b.n	848c6 <_realloc_r+0x1ca>
   849e0:	68ab      	ldr	r3, [r5, #8]
   849e2:	2a24      	cmp	r2, #36	; 0x24
   849e4:	6083      	str	r3, [r0, #8]
   849e6:	68eb      	ldr	r3, [r5, #12]
   849e8:	60c3      	str	r3, [r0, #12]
   849ea:	d02b      	beq.n	84a44 <_realloc_r+0x348>
   849ec:	f100 0310 	add.w	r3, r0, #16
   849f0:	f105 0210 	add.w	r2, r5, #16
   849f4:	e761      	b.n	848ba <_realloc_r+0x1be>
   849f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   849fa:	462f      	mov	r7, r5
   849fc:	f022 0203 	bic.w	r2, r2, #3
   84a00:	4416      	add	r6, r2
   84a02:	e6e9      	b.n	847d8 <_realloc_r+0xdc>
   84a04:	4629      	mov	r1, r5
   84a06:	4638      	mov	r0, r7
   84a08:	4676      	mov	r6, lr
   84a0a:	46d0      	mov	r8, sl
   84a0c:	f7ff fe0e 	bl	8462c <memmove>
   84a10:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a14:	e6e0      	b.n	847d8 <_realloc_r+0xdc>
   84a16:	463a      	mov	r2, r7
   84a18:	e719      	b.n	8484e <_realloc_r+0x152>
   84a1a:	4629      	mov	r1, r5
   84a1c:	4638      	mov	r0, r7
   84a1e:	461e      	mov	r6, r3
   84a20:	46d0      	mov	r8, sl
   84a22:	f7ff fe03 	bl	8462c <memmove>
   84a26:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a2a:	e6d5      	b.n	847d8 <_realloc_r+0xdc>
   84a2c:	68ab      	ldr	r3, [r5, #8]
   84a2e:	2a24      	cmp	r2, #36	; 0x24
   84a30:	f8ca 3010 	str.w	r3, [sl, #16]
   84a34:	68eb      	ldr	r3, [r5, #12]
   84a36:	f8ca 3014 	str.w	r3, [sl, #20]
   84a3a:	d018      	beq.n	84a6e <_realloc_r+0x372>
   84a3c:	3510      	adds	r5, #16
   84a3e:	f10a 0318 	add.w	r3, sl, #24
   84a42:	e7aa      	b.n	8499a <_realloc_r+0x29e>
   84a44:	692a      	ldr	r2, [r5, #16]
   84a46:	f100 0318 	add.w	r3, r0, #24
   84a4a:	6102      	str	r2, [r0, #16]
   84a4c:	6969      	ldr	r1, [r5, #20]
   84a4e:	f105 0218 	add.w	r2, r5, #24
   84a52:	6141      	str	r1, [r0, #20]
   84a54:	e731      	b.n	848ba <_realloc_r+0x1be>
   84a56:	68a9      	ldr	r1, [r5, #8]
   84a58:	2a24      	cmp	r2, #36	; 0x24
   84a5a:	f8ca 1010 	str.w	r1, [sl, #16]
   84a5e:	68e9      	ldr	r1, [r5, #12]
   84a60:	f8ca 1014 	str.w	r1, [sl, #20]
   84a64:	d00f      	beq.n	84a86 <_realloc_r+0x38a>
   84a66:	3510      	adds	r5, #16
   84a68:	f10a 0218 	add.w	r2, sl, #24
   84a6c:	e6ef      	b.n	8484e <_realloc_r+0x152>
   84a6e:	692a      	ldr	r2, [r5, #16]
   84a70:	f10a 0320 	add.w	r3, sl, #32
   84a74:	f8ca 2018 	str.w	r2, [sl, #24]
   84a78:	696a      	ldr	r2, [r5, #20]
   84a7a:	3518      	adds	r5, #24
   84a7c:	f8ca 201c 	str.w	r2, [sl, #28]
   84a80:	e78b      	b.n	8499a <_realloc_r+0x29e>
   84a82:	463b      	mov	r3, r7
   84a84:	e762      	b.n	8494c <_realloc_r+0x250>
   84a86:	6929      	ldr	r1, [r5, #16]
   84a88:	f10a 0220 	add.w	r2, sl, #32
   84a8c:	f8ca 1018 	str.w	r1, [sl, #24]
   84a90:	6969      	ldr	r1, [r5, #20]
   84a92:	3518      	adds	r5, #24
   84a94:	f8ca 101c 	str.w	r1, [sl, #28]
   84a98:	e6d9      	b.n	8484e <_realloc_r+0x152>
   84a9a:	4629      	mov	r1, r5
   84a9c:	4638      	mov	r0, r7
   84a9e:	f8cd c004 	str.w	ip, [sp, #4]
   84aa2:	f7ff fdc3 	bl	8462c <memmove>
   84aa6:	f8dd c004 	ldr.w	ip, [sp, #4]
   84aaa:	e755      	b.n	84958 <_realloc_r+0x25c>
   84aac:	68ab      	ldr	r3, [r5, #8]
   84aae:	2a24      	cmp	r2, #36	; 0x24
   84ab0:	f8ca 3010 	str.w	r3, [sl, #16]
   84ab4:	68eb      	ldr	r3, [r5, #12]
   84ab6:	f8ca 3014 	str.w	r3, [sl, #20]
   84aba:	d003      	beq.n	84ac4 <_realloc_r+0x3c8>
   84abc:	3510      	adds	r5, #16
   84abe:	f10a 0318 	add.w	r3, sl, #24
   84ac2:	e743      	b.n	8494c <_realloc_r+0x250>
   84ac4:	692a      	ldr	r2, [r5, #16]
   84ac6:	f10a 0320 	add.w	r3, sl, #32
   84aca:	f8ca 2018 	str.w	r2, [sl, #24]
   84ace:	696a      	ldr	r2, [r5, #20]
   84ad0:	3518      	adds	r5, #24
   84ad2:	f8ca 201c 	str.w	r2, [sl, #28]
   84ad6:	e739      	b.n	8494c <_realloc_r+0x250>
   84ad8:	20070598 	.word	0x20070598

00084adc <lflush>:
   84adc:	8983      	ldrh	r3, [r0, #12]
   84ade:	f003 0309 	and.w	r3, r3, #9
   84ae2:	2b09      	cmp	r3, #9
   84ae4:	d001      	beq.n	84aea <lflush+0xe>
   84ae6:	2000      	movs	r0, #0
   84ae8:	4770      	bx	lr
   84aea:	f7fe be31 	b.w	83750 <fflush>
   84aee:	bf00      	nop

00084af0 <__srefill_r>:
   84af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84af2:	460c      	mov	r4, r1
   84af4:	4605      	mov	r5, r0
   84af6:	b110      	cbz	r0, 84afe <__srefill_r+0xe>
   84af8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84afa:	2b00      	cmp	r3, #0
   84afc:	d045      	beq.n	84b8a <__srefill_r+0x9a>
   84afe:	89a3      	ldrh	r3, [r4, #12]
   84b00:	b29a      	uxth	r2, r3
   84b02:	0497      	lsls	r7, r2, #18
   84b04:	d407      	bmi.n	84b16 <__srefill_r+0x26>
   84b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
   84b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   84b10:	6662      	str	r2, [r4, #100]	; 0x64
   84b12:	81a3      	strh	r3, [r4, #12]
   84b14:	b29a      	uxth	r2, r3
   84b16:	2100      	movs	r1, #0
   84b18:	0696      	lsls	r6, r2, #26
   84b1a:	6061      	str	r1, [r4, #4]
   84b1c:	d432      	bmi.n	84b84 <__srefill_r+0x94>
   84b1e:	0750      	lsls	r0, r2, #29
   84b20:	d521      	bpl.n	84b66 <__srefill_r+0x76>
   84b22:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84b24:	b161      	cbz	r1, 84b40 <__srefill_r+0x50>
   84b26:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84b2a:	4299      	cmp	r1, r3
   84b2c:	d002      	beq.n	84b34 <__srefill_r+0x44>
   84b2e:	4628      	mov	r0, r5
   84b30:	f7fe ff76 	bl	83a20 <_free_r>
   84b34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   84b36:	2000      	movs	r0, #0
   84b38:	6063      	str	r3, [r4, #4]
   84b3a:	6320      	str	r0, [r4, #48]	; 0x30
   84b3c:	2b00      	cmp	r3, #0
   84b3e:	d13e      	bne.n	84bbe <__srefill_r+0xce>
   84b40:	6923      	ldr	r3, [r4, #16]
   84b42:	2b00      	cmp	r3, #0
   84b44:	d04b      	beq.n	84bde <__srefill_r+0xee>
   84b46:	89a7      	ldrh	r7, [r4, #12]
   84b48:	b2be      	uxth	r6, r7
   84b4a:	07b3      	lsls	r3, r6, #30
   84b4c:	d120      	bne.n	84b90 <__srefill_r+0xa0>
   84b4e:	6922      	ldr	r2, [r4, #16]
   84b50:	4628      	mov	r0, r5
   84b52:	6022      	str	r2, [r4, #0]
   84b54:	6a25      	ldr	r5, [r4, #32]
   84b56:	69e1      	ldr	r1, [r4, #28]
   84b58:	6963      	ldr	r3, [r4, #20]
   84b5a:	47a8      	blx	r5
   84b5c:	2800      	cmp	r0, #0
   84b5e:	6060      	str	r0, [r4, #4]
   84b60:	dd09      	ble.n	84b76 <__srefill_r+0x86>
   84b62:	2000      	movs	r0, #0
   84b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84b66:	06d1      	lsls	r1, r2, #27
   84b68:	d53e      	bpl.n	84be8 <__srefill_r+0xf8>
   84b6a:	0712      	lsls	r2, r2, #28
   84b6c:	d42a      	bmi.n	84bc4 <__srefill_r+0xd4>
   84b6e:	f043 0304 	orr.w	r3, r3, #4
   84b72:	81a3      	strh	r3, [r4, #12]
   84b74:	e7e4      	b.n	84b40 <__srefill_r+0x50>
   84b76:	89a3      	ldrh	r3, [r4, #12]
   84b78:	d01b      	beq.n	84bb2 <__srefill_r+0xc2>
   84b7a:	2200      	movs	r2, #0
   84b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b80:	81a3      	strh	r3, [r4, #12]
   84b82:	6062      	str	r2, [r4, #4]
   84b84:	f04f 30ff 	mov.w	r0, #4294967295
   84b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84b8a:	f7fe fe71 	bl	83870 <__sinit>
   84b8e:	e7b6      	b.n	84afe <__srefill_r+0xe>
   84b90:	4a19      	ldr	r2, [pc, #100]	; (84bf8 <__srefill_r+0x108>)
   84b92:	2301      	movs	r3, #1
   84b94:	6810      	ldr	r0, [r2, #0]
   84b96:	81a3      	strh	r3, [r4, #12]
   84b98:	4918      	ldr	r1, [pc, #96]	; (84bfc <__srefill_r+0x10c>)
   84b9a:	f006 0609 	and.w	r6, r6, #9
   84b9e:	f7ff f9a7 	bl	83ef0 <_fwalk>
   84ba2:	2e09      	cmp	r6, #9
   84ba4:	81a7      	strh	r7, [r4, #12]
   84ba6:	d1d2      	bne.n	84b4e <__srefill_r+0x5e>
   84ba8:	4628      	mov	r0, r5
   84baa:	4621      	mov	r1, r4
   84bac:	f7fe fd16 	bl	835dc <__sflush_r>
   84bb0:	e7cd      	b.n	84b4e <__srefill_r+0x5e>
   84bb2:	f043 0320 	orr.w	r3, r3, #32
   84bb6:	f04f 30ff 	mov.w	r0, #4294967295
   84bba:	81a3      	strh	r3, [r4, #12]
   84bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   84bc0:	6023      	str	r3, [r4, #0]
   84bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bc4:	4628      	mov	r0, r5
   84bc6:	4621      	mov	r1, r4
   84bc8:	f7fe fdac 	bl	83724 <_fflush_r>
   84bcc:	2800      	cmp	r0, #0
   84bce:	d1d9      	bne.n	84b84 <__srefill_r+0x94>
   84bd0:	89a3      	ldrh	r3, [r4, #12]
   84bd2:	60a0      	str	r0, [r4, #8]
   84bd4:	f023 0308 	bic.w	r3, r3, #8
   84bd8:	61a0      	str	r0, [r4, #24]
   84bda:	b29b      	uxth	r3, r3
   84bdc:	e7c7      	b.n	84b6e <__srefill_r+0x7e>
   84bde:	4628      	mov	r0, r5
   84be0:	4621      	mov	r1, r4
   84be2:	f7ff f9db 	bl	83f9c <__smakebuf_r>
   84be6:	e7ae      	b.n	84b46 <__srefill_r+0x56>
   84be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84bec:	2209      	movs	r2, #9
   84bee:	602a      	str	r2, [r5, #0]
   84bf0:	f04f 30ff 	mov.w	r0, #4294967295
   84bf4:	81a3      	strh	r3, [r4, #12]
   84bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bf8:	000855c0 	.word	0x000855c0
   84bfc:	00084add 	.word	0x00084add

00084c00 <_sbrk_r>:
   84c00:	b538      	push	{r3, r4, r5, lr}
   84c02:	4c07      	ldr	r4, [pc, #28]	; (84c20 <_sbrk_r+0x20>)
   84c04:	2300      	movs	r3, #0
   84c06:	4605      	mov	r5, r0
   84c08:	4608      	mov	r0, r1
   84c0a:	6023      	str	r3, [r4, #0]
   84c0c:	f7fd fb64 	bl	822d8 <_sbrk>
   84c10:	1c43      	adds	r3, r0, #1
   84c12:	d000      	beq.n	84c16 <_sbrk_r+0x16>
   84c14:	bd38      	pop	{r3, r4, r5, pc}
   84c16:	6823      	ldr	r3, [r4, #0]
   84c18:	2b00      	cmp	r3, #0
   84c1a:	d0fb      	beq.n	84c14 <_sbrk_r+0x14>
   84c1c:	602b      	str	r3, [r5, #0]
   84c1e:	bd38      	pop	{r3, r4, r5, pc}
   84c20:	2007ac68 	.word	0x2007ac68

00084c24 <__sread>:
   84c24:	b510      	push	{r4, lr}
   84c26:	460c      	mov	r4, r1
   84c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c2c:	f000 f9bc 	bl	84fa8 <_read_r>
   84c30:	2800      	cmp	r0, #0
   84c32:	db03      	blt.n	84c3c <__sread+0x18>
   84c34:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84c36:	4403      	add	r3, r0
   84c38:	6523      	str	r3, [r4, #80]	; 0x50
   84c3a:	bd10      	pop	{r4, pc}
   84c3c:	89a3      	ldrh	r3, [r4, #12]
   84c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84c42:	81a3      	strh	r3, [r4, #12]
   84c44:	bd10      	pop	{r4, pc}
   84c46:	bf00      	nop

00084c48 <__swrite>:
   84c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c4c:	460c      	mov	r4, r1
   84c4e:	8989      	ldrh	r1, [r1, #12]
   84c50:	461d      	mov	r5, r3
   84c52:	05cb      	lsls	r3, r1, #23
   84c54:	4616      	mov	r6, r2
   84c56:	4607      	mov	r7, r0
   84c58:	d506      	bpl.n	84c68 <__swrite+0x20>
   84c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c5e:	2200      	movs	r2, #0
   84c60:	2302      	movs	r3, #2
   84c62:	f000 f98d 	bl	84f80 <_lseek_r>
   84c66:	89a1      	ldrh	r1, [r4, #12]
   84c68:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84c6c:	81a1      	strh	r1, [r4, #12]
   84c6e:	4638      	mov	r0, r7
   84c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c74:	4632      	mov	r2, r6
   84c76:	462b      	mov	r3, r5
   84c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84c7c:	f000 b8a0 	b.w	84dc0 <_write_r>

00084c80 <__sseek>:
   84c80:	b510      	push	{r4, lr}
   84c82:	460c      	mov	r4, r1
   84c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c88:	f000 f97a 	bl	84f80 <_lseek_r>
   84c8c:	89a3      	ldrh	r3, [r4, #12]
   84c8e:	1c42      	adds	r2, r0, #1
   84c90:	bf0e      	itee	eq
   84c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84c9a:	6520      	strne	r0, [r4, #80]	; 0x50
   84c9c:	81a3      	strh	r3, [r4, #12]
   84c9e:	bd10      	pop	{r4, pc}

00084ca0 <__sclose>:
   84ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ca4:	f000 b8f2 	b.w	84e8c <_close_r>

00084ca8 <__swbuf_r>:
   84ca8:	b570      	push	{r4, r5, r6, lr}
   84caa:	460d      	mov	r5, r1
   84cac:	4614      	mov	r4, r2
   84cae:	4606      	mov	r6, r0
   84cb0:	b110      	cbz	r0, 84cb8 <__swbuf_r+0x10>
   84cb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84cb4:	2b00      	cmp	r3, #0
   84cb6:	d048      	beq.n	84d4a <__swbuf_r+0xa2>
   84cb8:	89a2      	ldrh	r2, [r4, #12]
   84cba:	69a3      	ldr	r3, [r4, #24]
   84cbc:	b291      	uxth	r1, r2
   84cbe:	0708      	lsls	r0, r1, #28
   84cc0:	60a3      	str	r3, [r4, #8]
   84cc2:	d538      	bpl.n	84d36 <__swbuf_r+0x8e>
   84cc4:	6923      	ldr	r3, [r4, #16]
   84cc6:	2b00      	cmp	r3, #0
   84cc8:	d035      	beq.n	84d36 <__swbuf_r+0x8e>
   84cca:	0489      	lsls	r1, r1, #18
   84ccc:	b2ed      	uxtb	r5, r5
   84cce:	d515      	bpl.n	84cfc <__swbuf_r+0x54>
   84cd0:	6822      	ldr	r2, [r4, #0]
   84cd2:	6961      	ldr	r1, [r4, #20]
   84cd4:	1ad3      	subs	r3, r2, r3
   84cd6:	428b      	cmp	r3, r1
   84cd8:	da1c      	bge.n	84d14 <__swbuf_r+0x6c>
   84cda:	3301      	adds	r3, #1
   84cdc:	68a1      	ldr	r1, [r4, #8]
   84cde:	1c50      	adds	r0, r2, #1
   84ce0:	3901      	subs	r1, #1
   84ce2:	60a1      	str	r1, [r4, #8]
   84ce4:	6020      	str	r0, [r4, #0]
   84ce6:	7015      	strb	r5, [r2, #0]
   84ce8:	6962      	ldr	r2, [r4, #20]
   84cea:	429a      	cmp	r2, r3
   84cec:	d01a      	beq.n	84d24 <__swbuf_r+0x7c>
   84cee:	89a3      	ldrh	r3, [r4, #12]
   84cf0:	07db      	lsls	r3, r3, #31
   84cf2:	d501      	bpl.n	84cf8 <__swbuf_r+0x50>
   84cf4:	2d0a      	cmp	r5, #10
   84cf6:	d015      	beq.n	84d24 <__swbuf_r+0x7c>
   84cf8:	4628      	mov	r0, r5
   84cfa:	bd70      	pop	{r4, r5, r6, pc}
   84cfc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84cfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84d02:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84d06:	81a2      	strh	r2, [r4, #12]
   84d08:	6822      	ldr	r2, [r4, #0]
   84d0a:	6661      	str	r1, [r4, #100]	; 0x64
   84d0c:	6961      	ldr	r1, [r4, #20]
   84d0e:	1ad3      	subs	r3, r2, r3
   84d10:	428b      	cmp	r3, r1
   84d12:	dbe2      	blt.n	84cda <__swbuf_r+0x32>
   84d14:	4630      	mov	r0, r6
   84d16:	4621      	mov	r1, r4
   84d18:	f7fe fd04 	bl	83724 <_fflush_r>
   84d1c:	b940      	cbnz	r0, 84d30 <__swbuf_r+0x88>
   84d1e:	6822      	ldr	r2, [r4, #0]
   84d20:	2301      	movs	r3, #1
   84d22:	e7db      	b.n	84cdc <__swbuf_r+0x34>
   84d24:	4630      	mov	r0, r6
   84d26:	4621      	mov	r1, r4
   84d28:	f7fe fcfc 	bl	83724 <_fflush_r>
   84d2c:	2800      	cmp	r0, #0
   84d2e:	d0e3      	beq.n	84cf8 <__swbuf_r+0x50>
   84d30:	f04f 30ff 	mov.w	r0, #4294967295
   84d34:	bd70      	pop	{r4, r5, r6, pc}
   84d36:	4630      	mov	r0, r6
   84d38:	4621      	mov	r1, r4
   84d3a:	f7fe fbdd 	bl	834f8 <__swsetup_r>
   84d3e:	2800      	cmp	r0, #0
   84d40:	d1f6      	bne.n	84d30 <__swbuf_r+0x88>
   84d42:	89a2      	ldrh	r2, [r4, #12]
   84d44:	6923      	ldr	r3, [r4, #16]
   84d46:	b291      	uxth	r1, r2
   84d48:	e7bf      	b.n	84cca <__swbuf_r+0x22>
   84d4a:	f7fe fd91 	bl	83870 <__sinit>
   84d4e:	e7b3      	b.n	84cb8 <__swbuf_r+0x10>

00084d50 <_wcrtomb_r>:
   84d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d54:	4605      	mov	r5, r0
   84d56:	b086      	sub	sp, #24
   84d58:	461e      	mov	r6, r3
   84d5a:	460c      	mov	r4, r1
   84d5c:	b1a1      	cbz	r1, 84d88 <_wcrtomb_r+0x38>
   84d5e:	4b10      	ldr	r3, [pc, #64]	; (84da0 <_wcrtomb_r+0x50>)
   84d60:	4617      	mov	r7, r2
   84d62:	f8d3 8000 	ldr.w	r8, [r3]
   84d66:	f7ff f90f 	bl	83f88 <__locale_charset>
   84d6a:	9600      	str	r6, [sp, #0]
   84d6c:	4603      	mov	r3, r0
   84d6e:	4621      	mov	r1, r4
   84d70:	463a      	mov	r2, r7
   84d72:	4628      	mov	r0, r5
   84d74:	47c0      	blx	r8
   84d76:	1c43      	adds	r3, r0, #1
   84d78:	d103      	bne.n	84d82 <_wcrtomb_r+0x32>
   84d7a:	2200      	movs	r2, #0
   84d7c:	238a      	movs	r3, #138	; 0x8a
   84d7e:	6032      	str	r2, [r6, #0]
   84d80:	602b      	str	r3, [r5, #0]
   84d82:	b006      	add	sp, #24
   84d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d88:	4b05      	ldr	r3, [pc, #20]	; (84da0 <_wcrtomb_r+0x50>)
   84d8a:	681f      	ldr	r7, [r3, #0]
   84d8c:	f7ff f8fc 	bl	83f88 <__locale_charset>
   84d90:	9600      	str	r6, [sp, #0]
   84d92:	4603      	mov	r3, r0
   84d94:	4622      	mov	r2, r4
   84d96:	4628      	mov	r0, r5
   84d98:	a903      	add	r1, sp, #12
   84d9a:	47b8      	blx	r7
   84d9c:	e7eb      	b.n	84d76 <_wcrtomb_r+0x26>
   84d9e:	bf00      	nop
   84da0:	200709a8 	.word	0x200709a8

00084da4 <__ascii_wctomb>:
   84da4:	b121      	cbz	r1, 84db0 <__ascii_wctomb+0xc>
   84da6:	2aff      	cmp	r2, #255	; 0xff
   84da8:	d804      	bhi.n	84db4 <__ascii_wctomb+0x10>
   84daa:	700a      	strb	r2, [r1, #0]
   84dac:	2001      	movs	r0, #1
   84dae:	4770      	bx	lr
   84db0:	4608      	mov	r0, r1
   84db2:	4770      	bx	lr
   84db4:	238a      	movs	r3, #138	; 0x8a
   84db6:	6003      	str	r3, [r0, #0]
   84db8:	f04f 30ff 	mov.w	r0, #4294967295
   84dbc:	4770      	bx	lr
   84dbe:	bf00      	nop

00084dc0 <_write_r>:
   84dc0:	b570      	push	{r4, r5, r6, lr}
   84dc2:	4c08      	ldr	r4, [pc, #32]	; (84de4 <_write_r+0x24>)
   84dc4:	4606      	mov	r6, r0
   84dc6:	2500      	movs	r5, #0
   84dc8:	4608      	mov	r0, r1
   84dca:	4611      	mov	r1, r2
   84dcc:	461a      	mov	r2, r3
   84dce:	6025      	str	r5, [r4, #0]
   84dd0:	f7fc fe26 	bl	81a20 <_write>
   84dd4:	1c43      	adds	r3, r0, #1
   84dd6:	d000      	beq.n	84dda <_write_r+0x1a>
   84dd8:	bd70      	pop	{r4, r5, r6, pc}
   84dda:	6823      	ldr	r3, [r4, #0]
   84ddc:	2b00      	cmp	r3, #0
   84dde:	d0fb      	beq.n	84dd8 <_write_r+0x18>
   84de0:	6033      	str	r3, [r6, #0]
   84de2:	bd70      	pop	{r4, r5, r6, pc}
   84de4:	2007ac68 	.word	0x2007ac68

00084de8 <__register_exitproc>:
   84de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84dec:	4c25      	ldr	r4, [pc, #148]	; (84e84 <__register_exitproc+0x9c>)
   84dee:	4606      	mov	r6, r0
   84df0:	6825      	ldr	r5, [r4, #0]
   84df2:	4688      	mov	r8, r1
   84df4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   84df8:	4692      	mov	sl, r2
   84dfa:	4699      	mov	r9, r3
   84dfc:	b3c4      	cbz	r4, 84e70 <__register_exitproc+0x88>
   84dfe:	6860      	ldr	r0, [r4, #4]
   84e00:	281f      	cmp	r0, #31
   84e02:	dc17      	bgt.n	84e34 <__register_exitproc+0x4c>
   84e04:	1c41      	adds	r1, r0, #1
   84e06:	b176      	cbz	r6, 84e26 <__register_exitproc+0x3e>
   84e08:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   84e0c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   84e10:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   84e14:	2201      	movs	r2, #1
   84e16:	4082      	lsls	r2, r0
   84e18:	4315      	orrs	r5, r2
   84e1a:	2e02      	cmp	r6, #2
   84e1c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   84e20:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   84e24:	d01e      	beq.n	84e64 <__register_exitproc+0x7c>
   84e26:	1c83      	adds	r3, r0, #2
   84e28:	6061      	str	r1, [r4, #4]
   84e2a:	2000      	movs	r0, #0
   84e2c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   84e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84e34:	4b14      	ldr	r3, [pc, #80]	; (84e88 <__register_exitproc+0xa0>)
   84e36:	b303      	cbz	r3, 84e7a <__register_exitproc+0x92>
   84e38:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84e3c:	f7ff f91e 	bl	8407c <malloc>
   84e40:	4604      	mov	r4, r0
   84e42:	b1d0      	cbz	r0, 84e7a <__register_exitproc+0x92>
   84e44:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   84e48:	2700      	movs	r7, #0
   84e4a:	e884 0088 	stmia.w	r4, {r3, r7}
   84e4e:	4638      	mov	r0, r7
   84e50:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84e54:	2101      	movs	r1, #1
   84e56:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   84e5a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   84e5e:	2e00      	cmp	r6, #0
   84e60:	d0e1      	beq.n	84e26 <__register_exitproc+0x3e>
   84e62:	e7d1      	b.n	84e08 <__register_exitproc+0x20>
   84e64:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84e68:	431a      	orrs	r2, r3
   84e6a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   84e6e:	e7da      	b.n	84e26 <__register_exitproc+0x3e>
   84e70:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   84e74:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84e78:	e7c1      	b.n	84dfe <__register_exitproc+0x16>
   84e7a:	f04f 30ff 	mov.w	r0, #4294967295
   84e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84e82:	bf00      	nop
   84e84:	000855c0 	.word	0x000855c0
   84e88:	0008407d 	.word	0x0008407d

00084e8c <_close_r>:
   84e8c:	b538      	push	{r3, r4, r5, lr}
   84e8e:	4c07      	ldr	r4, [pc, #28]	; (84eac <_close_r+0x20>)
   84e90:	2300      	movs	r3, #0
   84e92:	4605      	mov	r5, r0
   84e94:	4608      	mov	r0, r1
   84e96:	6023      	str	r3, [r4, #0]
   84e98:	f7fd fa38 	bl	8230c <_close>
   84e9c:	1c43      	adds	r3, r0, #1
   84e9e:	d000      	beq.n	84ea2 <_close_r+0x16>
   84ea0:	bd38      	pop	{r3, r4, r5, pc}
   84ea2:	6823      	ldr	r3, [r4, #0]
   84ea4:	2b00      	cmp	r3, #0
   84ea6:	d0fb      	beq.n	84ea0 <_close_r+0x14>
   84ea8:	602b      	str	r3, [r5, #0]
   84eaa:	bd38      	pop	{r3, r4, r5, pc}
   84eac:	2007ac68 	.word	0x2007ac68

00084eb0 <_fclose_r>:
   84eb0:	2900      	cmp	r1, #0
   84eb2:	d03d      	beq.n	84f30 <_fclose_r+0x80>
   84eb4:	b570      	push	{r4, r5, r6, lr}
   84eb6:	4605      	mov	r5, r0
   84eb8:	460c      	mov	r4, r1
   84eba:	b108      	cbz	r0, 84ec0 <_fclose_r+0x10>
   84ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ebe:	b37b      	cbz	r3, 84f20 <_fclose_r+0x70>
   84ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84ec4:	b90b      	cbnz	r3, 84eca <_fclose_r+0x1a>
   84ec6:	2000      	movs	r0, #0
   84ec8:	bd70      	pop	{r4, r5, r6, pc}
   84eca:	4628      	mov	r0, r5
   84ecc:	4621      	mov	r1, r4
   84ece:	f7fe fb85 	bl	835dc <__sflush_r>
   84ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84ed4:	4606      	mov	r6, r0
   84ed6:	b133      	cbz	r3, 84ee6 <_fclose_r+0x36>
   84ed8:	4628      	mov	r0, r5
   84eda:	69e1      	ldr	r1, [r4, #28]
   84edc:	4798      	blx	r3
   84ede:	2800      	cmp	r0, #0
   84ee0:	bfb8      	it	lt
   84ee2:	f04f 36ff 	movlt.w	r6, #4294967295
   84ee6:	89a3      	ldrh	r3, [r4, #12]
   84ee8:	061b      	lsls	r3, r3, #24
   84eea:	d41c      	bmi.n	84f26 <_fclose_r+0x76>
   84eec:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84eee:	b141      	cbz	r1, 84f02 <_fclose_r+0x52>
   84ef0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84ef4:	4299      	cmp	r1, r3
   84ef6:	d002      	beq.n	84efe <_fclose_r+0x4e>
   84ef8:	4628      	mov	r0, r5
   84efa:	f7fe fd91 	bl	83a20 <_free_r>
   84efe:	2300      	movs	r3, #0
   84f00:	6323      	str	r3, [r4, #48]	; 0x30
   84f02:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84f04:	b121      	cbz	r1, 84f10 <_fclose_r+0x60>
   84f06:	4628      	mov	r0, r5
   84f08:	f7fe fd8a 	bl	83a20 <_free_r>
   84f0c:	2300      	movs	r3, #0
   84f0e:	6463      	str	r3, [r4, #68]	; 0x44
   84f10:	f7fe fcb4 	bl	8387c <__sfp_lock_acquire>
   84f14:	2300      	movs	r3, #0
   84f16:	81a3      	strh	r3, [r4, #12]
   84f18:	f7fe fcb2 	bl	83880 <__sfp_lock_release>
   84f1c:	4630      	mov	r0, r6
   84f1e:	bd70      	pop	{r4, r5, r6, pc}
   84f20:	f7fe fca6 	bl	83870 <__sinit>
   84f24:	e7cc      	b.n	84ec0 <_fclose_r+0x10>
   84f26:	4628      	mov	r0, r5
   84f28:	6921      	ldr	r1, [r4, #16]
   84f2a:	f7fe fd79 	bl	83a20 <_free_r>
   84f2e:	e7dd      	b.n	84eec <_fclose_r+0x3c>
   84f30:	2000      	movs	r0, #0
   84f32:	4770      	bx	lr

00084f34 <_fstat_r>:
   84f34:	b538      	push	{r3, r4, r5, lr}
   84f36:	4c08      	ldr	r4, [pc, #32]	; (84f58 <_fstat_r+0x24>)
   84f38:	2300      	movs	r3, #0
   84f3a:	4605      	mov	r5, r0
   84f3c:	4608      	mov	r0, r1
   84f3e:	4611      	mov	r1, r2
   84f40:	6023      	str	r3, [r4, #0]
   84f42:	f7fd f9e7 	bl	82314 <_fstat>
   84f46:	1c43      	adds	r3, r0, #1
   84f48:	d000      	beq.n	84f4c <_fstat_r+0x18>
   84f4a:	bd38      	pop	{r3, r4, r5, pc}
   84f4c:	6823      	ldr	r3, [r4, #0]
   84f4e:	2b00      	cmp	r3, #0
   84f50:	d0fb      	beq.n	84f4a <_fstat_r+0x16>
   84f52:	602b      	str	r3, [r5, #0]
   84f54:	bd38      	pop	{r3, r4, r5, pc}
   84f56:	bf00      	nop
   84f58:	2007ac68 	.word	0x2007ac68

00084f5c <_isatty_r>:
   84f5c:	b538      	push	{r3, r4, r5, lr}
   84f5e:	4c07      	ldr	r4, [pc, #28]	; (84f7c <_isatty_r+0x20>)
   84f60:	2300      	movs	r3, #0
   84f62:	4605      	mov	r5, r0
   84f64:	4608      	mov	r0, r1
   84f66:	6023      	str	r3, [r4, #0]
   84f68:	f7fd f9da 	bl	82320 <_isatty>
   84f6c:	1c43      	adds	r3, r0, #1
   84f6e:	d000      	beq.n	84f72 <_isatty_r+0x16>
   84f70:	bd38      	pop	{r3, r4, r5, pc}
   84f72:	6823      	ldr	r3, [r4, #0]
   84f74:	2b00      	cmp	r3, #0
   84f76:	d0fb      	beq.n	84f70 <_isatty_r+0x14>
   84f78:	602b      	str	r3, [r5, #0]
   84f7a:	bd38      	pop	{r3, r4, r5, pc}
   84f7c:	2007ac68 	.word	0x2007ac68

00084f80 <_lseek_r>:
   84f80:	b570      	push	{r4, r5, r6, lr}
   84f82:	4c08      	ldr	r4, [pc, #32]	; (84fa4 <_lseek_r+0x24>)
   84f84:	4606      	mov	r6, r0
   84f86:	2500      	movs	r5, #0
   84f88:	4608      	mov	r0, r1
   84f8a:	4611      	mov	r1, r2
   84f8c:	461a      	mov	r2, r3
   84f8e:	6025      	str	r5, [r4, #0]
   84f90:	f7fd f9c8 	bl	82324 <_lseek>
   84f94:	1c43      	adds	r3, r0, #1
   84f96:	d000      	beq.n	84f9a <_lseek_r+0x1a>
   84f98:	bd70      	pop	{r4, r5, r6, pc}
   84f9a:	6823      	ldr	r3, [r4, #0]
   84f9c:	2b00      	cmp	r3, #0
   84f9e:	d0fb      	beq.n	84f98 <_lseek_r+0x18>
   84fa0:	6033      	str	r3, [r6, #0]
   84fa2:	bd70      	pop	{r4, r5, r6, pc}
   84fa4:	2007ac68 	.word	0x2007ac68

00084fa8 <_read_r>:
   84fa8:	b570      	push	{r4, r5, r6, lr}
   84faa:	4c08      	ldr	r4, [pc, #32]	; (84fcc <_read_r+0x24>)
   84fac:	4606      	mov	r6, r0
   84fae:	2500      	movs	r5, #0
   84fb0:	4608      	mov	r0, r1
   84fb2:	4611      	mov	r1, r2
   84fb4:	461a      	mov	r2, r3
   84fb6:	6025      	str	r5, [r4, #0]
   84fb8:	f7fb f8ca 	bl	80150 <_read>
   84fbc:	1c43      	adds	r3, r0, #1
   84fbe:	d000      	beq.n	84fc2 <_read_r+0x1a>
   84fc0:	bd70      	pop	{r4, r5, r6, pc}
   84fc2:	6823      	ldr	r3, [r4, #0]
   84fc4:	2b00      	cmp	r3, #0
   84fc6:	d0fb      	beq.n	84fc0 <_read_r+0x18>
   84fc8:	6033      	str	r3, [r6, #0]
   84fca:	bd70      	pop	{r4, r5, r6, pc}
   84fcc:	2007ac68 	.word	0x2007ac68

00084fd0 <__aeabi_uldivmod>:
   84fd0:	b953      	cbnz	r3, 84fe8 <__aeabi_uldivmod+0x18>
   84fd2:	b94a      	cbnz	r2, 84fe8 <__aeabi_uldivmod+0x18>
   84fd4:	2900      	cmp	r1, #0
   84fd6:	bf08      	it	eq
   84fd8:	2800      	cmpeq	r0, #0
   84fda:	bf1c      	itt	ne
   84fdc:	f04f 31ff 	movne.w	r1, #4294967295
   84fe0:	f04f 30ff 	movne.w	r0, #4294967295
   84fe4:	f000 b83c 	b.w	85060 <__aeabi_idiv0>
   84fe8:	b082      	sub	sp, #8
   84fea:	46ec      	mov	ip, sp
   84fec:	e92d 5000 	stmdb	sp!, {ip, lr}
   84ff0:	f000 f81e 	bl	85030 <__gnu_uldivmod_helper>
   84ff4:	f8dd e004 	ldr.w	lr, [sp, #4]
   84ff8:	b002      	add	sp, #8
   84ffa:	bc0c      	pop	{r2, r3}
   84ffc:	4770      	bx	lr
   84ffe:	bf00      	nop

00085000 <__gnu_ldivmod_helper>:
   85000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85004:	9c06      	ldr	r4, [sp, #24]
   85006:	4690      	mov	r8, r2
   85008:	4606      	mov	r6, r0
   8500a:	460f      	mov	r7, r1
   8500c:	461d      	mov	r5, r3
   8500e:	f000 f829 	bl	85064 <__divdi3>
   85012:	fb08 fc01 	mul.w	ip, r8, r1
   85016:	fba8 2300 	umull	r2, r3, r8, r0
   8501a:	fb00 c505 	mla	r5, r0, r5, ip
   8501e:	1ab2      	subs	r2, r6, r2
   85020:	442b      	add	r3, r5
   85022:	eb67 0303 	sbc.w	r3, r7, r3
   85026:	4686      	mov	lr, r0
   85028:	e9c4 2300 	strd	r2, r3, [r4]
   8502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085030 <__gnu_uldivmod_helper>:
   85030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85034:	9e08      	ldr	r6, [sp, #32]
   85036:	4617      	mov	r7, r2
   85038:	4680      	mov	r8, r0
   8503a:	4689      	mov	r9, r1
   8503c:	461d      	mov	r5, r3
   8503e:	f000 f967 	bl	85310 <__udivdi3>
   85042:	fb00 f305 	mul.w	r3, r0, r5
   85046:	fba0 4507 	umull	r4, r5, r0, r7
   8504a:	fb07 3701 	mla	r7, r7, r1, r3
   8504e:	ebb8 0404 	subs.w	r4, r8, r4
   85052:	443d      	add	r5, r7
   85054:	eb69 0505 	sbc.w	r5, r9, r5
   85058:	e9c6 4500 	strd	r4, r5, [r6]
   8505c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085060 <__aeabi_idiv0>:
   85060:	4770      	bx	lr
   85062:	bf00      	nop

00085064 <__divdi3>:
   85064:	2900      	cmp	r1, #0
   85066:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8506a:	f2c0 80a8 	blt.w	851be <__divdi3+0x15a>
   8506e:	2600      	movs	r6, #0
   85070:	2b00      	cmp	r3, #0
   85072:	f2c0 809e 	blt.w	851b2 <__divdi3+0x14e>
   85076:	4681      	mov	r9, r0
   85078:	468e      	mov	lr, r1
   8507a:	4690      	mov	r8, r2
   8507c:	469c      	mov	ip, r3
   8507e:	4617      	mov	r7, r2
   85080:	4604      	mov	r4, r0
   85082:	460d      	mov	r5, r1
   85084:	2b00      	cmp	r3, #0
   85086:	d13d      	bne.n	85104 <__divdi3+0xa0>
   85088:	428a      	cmp	r2, r1
   8508a:	d959      	bls.n	85140 <__divdi3+0xdc>
   8508c:	fab2 f382 	clz	r3, r2
   85090:	b13b      	cbz	r3, 850a2 <__divdi3+0x3e>
   85092:	f1c3 0220 	rsb	r2, r3, #32
   85096:	409d      	lsls	r5, r3
   85098:	fa20 f202 	lsr.w	r2, r0, r2
   8509c:	409f      	lsls	r7, r3
   8509e:	4315      	orrs	r5, r2
   850a0:	409c      	lsls	r4, r3
   850a2:	0c39      	lsrs	r1, r7, #16
   850a4:	fbb5 f0f1 	udiv	r0, r5, r1
   850a8:	fa1f fe87 	uxth.w	lr, r7
   850ac:	fb01 5510 	mls	r5, r1, r0, r5
   850b0:	fb0e f300 	mul.w	r3, lr, r0
   850b4:	0c22      	lsrs	r2, r4, #16
   850b6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   850ba:	42ab      	cmp	r3, r5
   850bc:	d909      	bls.n	850d2 <__divdi3+0x6e>
   850be:	19ed      	adds	r5, r5, r7
   850c0:	f100 32ff 	add.w	r2, r0, #4294967295
   850c4:	f080 810b 	bcs.w	852de <__divdi3+0x27a>
   850c8:	42ab      	cmp	r3, r5
   850ca:	f240 8108 	bls.w	852de <__divdi3+0x27a>
   850ce:	3802      	subs	r0, #2
   850d0:	443d      	add	r5, r7
   850d2:	1aed      	subs	r5, r5, r3
   850d4:	fbb5 f3f1 	udiv	r3, r5, r1
   850d8:	fb01 5513 	mls	r5, r1, r3, r5
   850dc:	fb0e fe03 	mul.w	lr, lr, r3
   850e0:	b2a4      	uxth	r4, r4
   850e2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   850e6:	45ae      	cmp	lr, r5
   850e8:	d908      	bls.n	850fc <__divdi3+0x98>
   850ea:	19ed      	adds	r5, r5, r7
   850ec:	f103 32ff 	add.w	r2, r3, #4294967295
   850f0:	f080 80f7 	bcs.w	852e2 <__divdi3+0x27e>
   850f4:	45ae      	cmp	lr, r5
   850f6:	f240 80f4 	bls.w	852e2 <__divdi3+0x27e>
   850fa:	3b02      	subs	r3, #2
   850fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   85100:	2200      	movs	r2, #0
   85102:	e003      	b.n	8510c <__divdi3+0xa8>
   85104:	428b      	cmp	r3, r1
   85106:	d90f      	bls.n	85128 <__divdi3+0xc4>
   85108:	2200      	movs	r2, #0
   8510a:	4613      	mov	r3, r2
   8510c:	1c34      	adds	r4, r6, #0
   8510e:	bf18      	it	ne
   85110:	2401      	movne	r4, #1
   85112:	4260      	negs	r0, r4
   85114:	f04f 0500 	mov.w	r5, #0
   85118:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   8511c:	4058      	eors	r0, r3
   8511e:	4051      	eors	r1, r2
   85120:	1900      	adds	r0, r0, r4
   85122:	4169      	adcs	r1, r5
   85124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85128:	fab3 f283 	clz	r2, r3
   8512c:	2a00      	cmp	r2, #0
   8512e:	f040 8089 	bne.w	85244 <__divdi3+0x1e0>
   85132:	428b      	cmp	r3, r1
   85134:	d302      	bcc.n	8513c <__divdi3+0xd8>
   85136:	4580      	cmp	r8, r0
   85138:	f200 80e2 	bhi.w	85300 <__divdi3+0x29c>
   8513c:	2301      	movs	r3, #1
   8513e:	e7e5      	b.n	8510c <__divdi3+0xa8>
   85140:	b912      	cbnz	r2, 85148 <__divdi3+0xe4>
   85142:	2301      	movs	r3, #1
   85144:	fbb3 f7f2 	udiv	r7, r3, r2
   85148:	fab7 f887 	clz	r8, r7
   8514c:	f1b8 0f00 	cmp.w	r8, #0
   85150:	d13b      	bne.n	851ca <__divdi3+0x166>
   85152:	1bed      	subs	r5, r5, r7
   85154:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85158:	fa1f fe87 	uxth.w	lr, r7
   8515c:	2201      	movs	r2, #1
   8515e:	fbb5 f0fc 	udiv	r0, r5, ip
   85162:	fb0c 5510 	mls	r5, ip, r0, r5
   85166:	fb0e f300 	mul.w	r3, lr, r0
   8516a:	0c21      	lsrs	r1, r4, #16
   8516c:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   85170:	42ab      	cmp	r3, r5
   85172:	d907      	bls.n	85184 <__divdi3+0x120>
   85174:	19ed      	adds	r5, r5, r7
   85176:	f100 31ff 	add.w	r1, r0, #4294967295
   8517a:	d202      	bcs.n	85182 <__divdi3+0x11e>
   8517c:	42ab      	cmp	r3, r5
   8517e:	f200 80c3 	bhi.w	85308 <__divdi3+0x2a4>
   85182:	4608      	mov	r0, r1
   85184:	1aed      	subs	r5, r5, r3
   85186:	fbb5 f3fc 	udiv	r3, r5, ip
   8518a:	fb0c 5513 	mls	r5, ip, r3, r5
   8518e:	fb0e fe03 	mul.w	lr, lr, r3
   85192:	b2a4      	uxth	r4, r4
   85194:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   85198:	45ae      	cmp	lr, r5
   8519a:	d907      	bls.n	851ac <__divdi3+0x148>
   8519c:	19ed      	adds	r5, r5, r7
   8519e:	f103 31ff 	add.w	r1, r3, #4294967295
   851a2:	d202      	bcs.n	851aa <__divdi3+0x146>
   851a4:	45ae      	cmp	lr, r5
   851a6:	f200 80ad 	bhi.w	85304 <__divdi3+0x2a0>
   851aa:	460b      	mov	r3, r1
   851ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   851b0:	e7ac      	b.n	8510c <__divdi3+0xa8>
   851b2:	4252      	negs	r2, r2
   851b4:	ea6f 0606 	mvn.w	r6, r6
   851b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   851bc:	e75b      	b.n	85076 <__divdi3+0x12>
   851be:	4240      	negs	r0, r0
   851c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   851c4:	f04f 36ff 	mov.w	r6, #4294967295
   851c8:	e752      	b.n	85070 <__divdi3+0xc>
   851ca:	fa07 f708 	lsl.w	r7, r7, r8
   851ce:	f1c8 0220 	rsb	r2, r8, #32
   851d2:	fa25 f302 	lsr.w	r3, r5, r2
   851d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   851da:	fbb3 f1fc 	udiv	r1, r3, ip
   851de:	fa1f fe87 	uxth.w	lr, r7
   851e2:	fb0c 3311 	mls	r3, ip, r1, r3
   851e6:	fa24 f202 	lsr.w	r2, r4, r2
   851ea:	fa05 f508 	lsl.w	r5, r5, r8
   851ee:	fb0e f901 	mul.w	r9, lr, r1
   851f2:	432a      	orrs	r2, r5
   851f4:	0c10      	lsrs	r0, r2, #16
   851f6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   851fa:	4599      	cmp	r9, r3
   851fc:	fa04 f408 	lsl.w	r4, r4, r8
   85200:	d907      	bls.n	85212 <__divdi3+0x1ae>
   85202:	19db      	adds	r3, r3, r7
   85204:	f101 30ff 	add.w	r0, r1, #4294967295
   85208:	d278      	bcs.n	852fc <__divdi3+0x298>
   8520a:	4599      	cmp	r9, r3
   8520c:	d976      	bls.n	852fc <__divdi3+0x298>
   8520e:	3902      	subs	r1, #2
   85210:	443b      	add	r3, r7
   85212:	ebc9 0303 	rsb	r3, r9, r3
   85216:	fbb3 f0fc 	udiv	r0, r3, ip
   8521a:	fb0c 3310 	mls	r3, ip, r0, r3
   8521e:	fb0e f500 	mul.w	r5, lr, r0
   85222:	b292      	uxth	r2, r2
   85224:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85228:	429d      	cmp	r5, r3
   8522a:	d907      	bls.n	8523c <__divdi3+0x1d8>
   8522c:	19db      	adds	r3, r3, r7
   8522e:	f100 32ff 	add.w	r2, r0, #4294967295
   85232:	d25f      	bcs.n	852f4 <__divdi3+0x290>
   85234:	429d      	cmp	r5, r3
   85236:	d95d      	bls.n	852f4 <__divdi3+0x290>
   85238:	3802      	subs	r0, #2
   8523a:	443b      	add	r3, r7
   8523c:	1b5d      	subs	r5, r3, r5
   8523e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   85242:	e78c      	b.n	8515e <__divdi3+0xfa>
   85244:	f1c2 0320 	rsb	r3, r2, #32
   85248:	fa28 f103 	lsr.w	r1, r8, r3
   8524c:	fa0c fc02 	lsl.w	ip, ip, r2
   85250:	ea41 0c0c 	orr.w	ip, r1, ip
   85254:	ea4f 401c 	mov.w	r0, ip, lsr #16
   85258:	fa2e f103 	lsr.w	r1, lr, r3
   8525c:	fbb1 f5f0 	udiv	r5, r1, r0
   85260:	fa1f f78c 	uxth.w	r7, ip
   85264:	fb00 1115 	mls	r1, r0, r5, r1
   85268:	fa29 f303 	lsr.w	r3, r9, r3
   8526c:	fa0e fe02 	lsl.w	lr, lr, r2
   85270:	fb07 f905 	mul.w	r9, r7, r5
   85274:	ea43 0e0e 	orr.w	lr, r3, lr
   85278:	ea4f 431e 	mov.w	r3, lr, lsr #16
   8527c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   85280:	4589      	cmp	r9, r1
   85282:	fa08 f802 	lsl.w	r8, r8, r2
   85286:	d908      	bls.n	8529a <__divdi3+0x236>
   85288:	eb11 010c 	adds.w	r1, r1, ip
   8528c:	f105 33ff 	add.w	r3, r5, #4294967295
   85290:	d232      	bcs.n	852f8 <__divdi3+0x294>
   85292:	4589      	cmp	r9, r1
   85294:	d930      	bls.n	852f8 <__divdi3+0x294>
   85296:	3d02      	subs	r5, #2
   85298:	4461      	add	r1, ip
   8529a:	ebc9 0101 	rsb	r1, r9, r1
   8529e:	fbb1 f3f0 	udiv	r3, r1, r0
   852a2:	fb00 1113 	mls	r1, r0, r3, r1
   852a6:	fb07 f703 	mul.w	r7, r7, r3
   852aa:	fa1f fe8e 	uxth.w	lr, lr
   852ae:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   852b2:	4577      	cmp	r7, lr
   852b4:	d908      	bls.n	852c8 <__divdi3+0x264>
   852b6:	eb1e 0e0c 	adds.w	lr, lr, ip
   852ba:	f103 31ff 	add.w	r1, r3, #4294967295
   852be:	d217      	bcs.n	852f0 <__divdi3+0x28c>
   852c0:	4577      	cmp	r7, lr
   852c2:	d915      	bls.n	852f0 <__divdi3+0x28c>
   852c4:	3b02      	subs	r3, #2
   852c6:	44e6      	add	lr, ip
   852c8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   852cc:	fba3 8908 	umull	r8, r9, r3, r8
   852d0:	ebc7 0e0e 	rsb	lr, r7, lr
   852d4:	45ce      	cmp	lr, r9
   852d6:	d309      	bcc.n	852ec <__divdi3+0x288>
   852d8:	d005      	beq.n	852e6 <__divdi3+0x282>
   852da:	2200      	movs	r2, #0
   852dc:	e716      	b.n	8510c <__divdi3+0xa8>
   852de:	4610      	mov	r0, r2
   852e0:	e6f7      	b.n	850d2 <__divdi3+0x6e>
   852e2:	4613      	mov	r3, r2
   852e4:	e70a      	b.n	850fc <__divdi3+0x98>
   852e6:	4094      	lsls	r4, r2
   852e8:	4544      	cmp	r4, r8
   852ea:	d2f6      	bcs.n	852da <__divdi3+0x276>
   852ec:	3b01      	subs	r3, #1
   852ee:	e7f4      	b.n	852da <__divdi3+0x276>
   852f0:	460b      	mov	r3, r1
   852f2:	e7e9      	b.n	852c8 <__divdi3+0x264>
   852f4:	4610      	mov	r0, r2
   852f6:	e7a1      	b.n	8523c <__divdi3+0x1d8>
   852f8:	461d      	mov	r5, r3
   852fa:	e7ce      	b.n	8529a <__divdi3+0x236>
   852fc:	4601      	mov	r1, r0
   852fe:	e788      	b.n	85212 <__divdi3+0x1ae>
   85300:	4613      	mov	r3, r2
   85302:	e703      	b.n	8510c <__divdi3+0xa8>
   85304:	3b02      	subs	r3, #2
   85306:	e751      	b.n	851ac <__divdi3+0x148>
   85308:	3802      	subs	r0, #2
   8530a:	443d      	add	r5, r7
   8530c:	e73a      	b.n	85184 <__divdi3+0x120>
   8530e:	bf00      	nop

00085310 <__udivdi3>:
   85310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85314:	2b00      	cmp	r3, #0
   85316:	d144      	bne.n	853a2 <__udivdi3+0x92>
   85318:	428a      	cmp	r2, r1
   8531a:	4615      	mov	r5, r2
   8531c:	4604      	mov	r4, r0
   8531e:	d94f      	bls.n	853c0 <__udivdi3+0xb0>
   85320:	fab2 f782 	clz	r7, r2
   85324:	460e      	mov	r6, r1
   85326:	b14f      	cbz	r7, 8533c <__udivdi3+0x2c>
   85328:	f1c7 0320 	rsb	r3, r7, #32
   8532c:	40b9      	lsls	r1, r7
   8532e:	fa20 f603 	lsr.w	r6, r0, r3
   85332:	fa02 f507 	lsl.w	r5, r2, r7
   85336:	430e      	orrs	r6, r1
   85338:	fa00 f407 	lsl.w	r4, r0, r7
   8533c:	0c2f      	lsrs	r7, r5, #16
   8533e:	fbb6 f0f7 	udiv	r0, r6, r7
   85342:	fa1f fe85 	uxth.w	lr, r5
   85346:	fb07 6210 	mls	r2, r7, r0, r6
   8534a:	fb0e f100 	mul.w	r1, lr, r0
   8534e:	0c26      	lsrs	r6, r4, #16
   85350:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   85354:	4299      	cmp	r1, r3
   85356:	d909      	bls.n	8536c <__udivdi3+0x5c>
   85358:	195b      	adds	r3, r3, r5
   8535a:	f100 32ff 	add.w	r2, r0, #4294967295
   8535e:	f080 80ee 	bcs.w	8553e <__udivdi3+0x22e>
   85362:	4299      	cmp	r1, r3
   85364:	f240 80eb 	bls.w	8553e <__udivdi3+0x22e>
   85368:	3802      	subs	r0, #2
   8536a:	442b      	add	r3, r5
   8536c:	1a59      	subs	r1, r3, r1
   8536e:	fbb1 f3f7 	udiv	r3, r1, r7
   85372:	fb07 1113 	mls	r1, r7, r3, r1
   85376:	fb0e fe03 	mul.w	lr, lr, r3
   8537a:	b2a4      	uxth	r4, r4
   8537c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   85380:	458e      	cmp	lr, r1
   85382:	d908      	bls.n	85396 <__udivdi3+0x86>
   85384:	1949      	adds	r1, r1, r5
   85386:	f103 32ff 	add.w	r2, r3, #4294967295
   8538a:	f080 80da 	bcs.w	85542 <__udivdi3+0x232>
   8538e:	458e      	cmp	lr, r1
   85390:	f240 80d7 	bls.w	85542 <__udivdi3+0x232>
   85394:	3b02      	subs	r3, #2
   85396:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8539a:	2600      	movs	r6, #0
   8539c:	4631      	mov	r1, r6
   8539e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   853a2:	428b      	cmp	r3, r1
   853a4:	d847      	bhi.n	85436 <__udivdi3+0x126>
   853a6:	fab3 f683 	clz	r6, r3
   853aa:	2e00      	cmp	r6, #0
   853ac:	d148      	bne.n	85440 <__udivdi3+0x130>
   853ae:	428b      	cmp	r3, r1
   853b0:	d302      	bcc.n	853b8 <__udivdi3+0xa8>
   853b2:	4282      	cmp	r2, r0
   853b4:	f200 80cf 	bhi.w	85556 <__udivdi3+0x246>
   853b8:	2001      	movs	r0, #1
   853ba:	4631      	mov	r1, r6
   853bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   853c0:	b912      	cbnz	r2, 853c8 <__udivdi3+0xb8>
   853c2:	2501      	movs	r5, #1
   853c4:	fbb5 f5f2 	udiv	r5, r5, r2
   853c8:	fab5 fc85 	clz	ip, r5
   853cc:	f1bc 0f00 	cmp.w	ip, #0
   853d0:	d178      	bne.n	854c4 <__udivdi3+0x1b4>
   853d2:	1b49      	subs	r1, r1, r5
   853d4:	0c2f      	lsrs	r7, r5, #16
   853d6:	fa1f fe85 	uxth.w	lr, r5
   853da:	2601      	movs	r6, #1
   853dc:	fbb1 f0f7 	udiv	r0, r1, r7
   853e0:	fb07 1110 	mls	r1, r7, r0, r1
   853e4:	fb0e f200 	mul.w	r2, lr, r0
   853e8:	0c23      	lsrs	r3, r4, #16
   853ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   853ee:	428a      	cmp	r2, r1
   853f0:	d907      	bls.n	85402 <__udivdi3+0xf2>
   853f2:	1949      	adds	r1, r1, r5
   853f4:	f100 33ff 	add.w	r3, r0, #4294967295
   853f8:	d202      	bcs.n	85400 <__udivdi3+0xf0>
   853fa:	428a      	cmp	r2, r1
   853fc:	f200 80bc 	bhi.w	85578 <__udivdi3+0x268>
   85400:	4618      	mov	r0, r3
   85402:	1a89      	subs	r1, r1, r2
   85404:	fbb1 f3f7 	udiv	r3, r1, r7
   85408:	fb07 1113 	mls	r1, r7, r3, r1
   8540c:	fb0e fe03 	mul.w	lr, lr, r3
   85410:	b2a4      	uxth	r4, r4
   85412:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   85416:	4596      	cmp	lr, r2
   85418:	d908      	bls.n	8542c <__udivdi3+0x11c>
   8541a:	1952      	adds	r2, r2, r5
   8541c:	f103 31ff 	add.w	r1, r3, #4294967295
   85420:	f080 8091 	bcs.w	85546 <__udivdi3+0x236>
   85424:	4596      	cmp	lr, r2
   85426:	f240 808e 	bls.w	85546 <__udivdi3+0x236>
   8542a:	3b02      	subs	r3, #2
   8542c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   85430:	4631      	mov	r1, r6
   85432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85436:	2600      	movs	r6, #0
   85438:	4630      	mov	r0, r6
   8543a:	4631      	mov	r1, r6
   8543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85440:	f1c6 0420 	rsb	r4, r6, #32
   85444:	fa22 f504 	lsr.w	r5, r2, r4
   85448:	40b3      	lsls	r3, r6
   8544a:	432b      	orrs	r3, r5
   8544c:	fa21 f704 	lsr.w	r7, r1, r4
   85450:	ea4f 4813 	mov.w	r8, r3, lsr #16
   85454:	fbb7 fcf8 	udiv	ip, r7, r8
   85458:	fa1f f983 	uxth.w	r9, r3
   8545c:	fb08 771c 	mls	r7, r8, ip, r7
   85460:	fa20 fe04 	lsr.w	lr, r0, r4
   85464:	fa01 f506 	lsl.w	r5, r1, r6
   85468:	fb09 f40c 	mul.w	r4, r9, ip
   8546c:	ea4e 0505 	orr.w	r5, lr, r5
   85470:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   85474:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   85478:	42bc      	cmp	r4, r7
   8547a:	fa02 f206 	lsl.w	r2, r2, r6
   8547e:	d904      	bls.n	8548a <__udivdi3+0x17a>
   85480:	18ff      	adds	r7, r7, r3
   85482:	f10c 31ff 	add.w	r1, ip, #4294967295
   85486:	d368      	bcc.n	8555a <__udivdi3+0x24a>
   85488:	468c      	mov	ip, r1
   8548a:	1b3f      	subs	r7, r7, r4
   8548c:	fbb7 f4f8 	udiv	r4, r7, r8
   85490:	fb08 7714 	mls	r7, r8, r4, r7
   85494:	fb09 f904 	mul.w	r9, r9, r4
   85498:	b2ad      	uxth	r5, r5
   8549a:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   8549e:	4589      	cmp	r9, r1
   854a0:	d904      	bls.n	854ac <__udivdi3+0x19c>
   854a2:	18c9      	adds	r1, r1, r3
   854a4:	f104 35ff 	add.w	r5, r4, #4294967295
   854a8:	d35d      	bcc.n	85566 <__udivdi3+0x256>
   854aa:	462c      	mov	r4, r5
   854ac:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   854b0:	fba4 2302 	umull	r2, r3, r4, r2
   854b4:	ebc9 0101 	rsb	r1, r9, r1
   854b8:	4299      	cmp	r1, r3
   854ba:	d349      	bcc.n	85550 <__udivdi3+0x240>
   854bc:	d045      	beq.n	8554a <__udivdi3+0x23a>
   854be:	4620      	mov	r0, r4
   854c0:	2600      	movs	r6, #0
   854c2:	e76b      	b.n	8539c <__udivdi3+0x8c>
   854c4:	f1cc 0420 	rsb	r4, ip, #32
   854c8:	fa05 f50c 	lsl.w	r5, r5, ip
   854cc:	fa21 f304 	lsr.w	r3, r1, r4
   854d0:	0c2a      	lsrs	r2, r5, #16
   854d2:	fbb3 f6f2 	udiv	r6, r3, r2
   854d6:	fa1f fe85 	uxth.w	lr, r5
   854da:	fb02 3816 	mls	r8, r2, r6, r3
   854de:	fa20 f704 	lsr.w	r7, r0, r4
   854e2:	fa01 f10c 	lsl.w	r1, r1, ip
   854e6:	fb0e f906 	mul.w	r9, lr, r6
   854ea:	430f      	orrs	r7, r1
   854ec:	0c3c      	lsrs	r4, r7, #16
   854ee:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   854f2:	4599      	cmp	r9, r3
   854f4:	fa00 f40c 	lsl.w	r4, r0, ip
   854f8:	d907      	bls.n	8550a <__udivdi3+0x1fa>
   854fa:	195b      	adds	r3, r3, r5
   854fc:	f106 31ff 	add.w	r1, r6, #4294967295
   85500:	d238      	bcs.n	85574 <__udivdi3+0x264>
   85502:	4599      	cmp	r9, r3
   85504:	d936      	bls.n	85574 <__udivdi3+0x264>
   85506:	3e02      	subs	r6, #2
   85508:	442b      	add	r3, r5
   8550a:	ebc9 0303 	rsb	r3, r9, r3
   8550e:	fbb3 f0f2 	udiv	r0, r3, r2
   85512:	fb02 3310 	mls	r3, r2, r0, r3
   85516:	fb0e f100 	mul.w	r1, lr, r0
   8551a:	b2bf      	uxth	r7, r7
   8551c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   85520:	4299      	cmp	r1, r3
   85522:	d907      	bls.n	85534 <__udivdi3+0x224>
   85524:	195b      	adds	r3, r3, r5
   85526:	f100 37ff 	add.w	r7, r0, #4294967295
   8552a:	d221      	bcs.n	85570 <__udivdi3+0x260>
   8552c:	4299      	cmp	r1, r3
   8552e:	d91f      	bls.n	85570 <__udivdi3+0x260>
   85530:	3802      	subs	r0, #2
   85532:	442b      	add	r3, r5
   85534:	4617      	mov	r7, r2
   85536:	1a59      	subs	r1, r3, r1
   85538:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   8553c:	e74e      	b.n	853dc <__udivdi3+0xcc>
   8553e:	4610      	mov	r0, r2
   85540:	e714      	b.n	8536c <__udivdi3+0x5c>
   85542:	4613      	mov	r3, r2
   85544:	e727      	b.n	85396 <__udivdi3+0x86>
   85546:	460b      	mov	r3, r1
   85548:	e770      	b.n	8542c <__udivdi3+0x11c>
   8554a:	40b0      	lsls	r0, r6
   8554c:	4290      	cmp	r0, r2
   8554e:	d2b6      	bcs.n	854be <__udivdi3+0x1ae>
   85550:	1e60      	subs	r0, r4, #1
   85552:	2600      	movs	r6, #0
   85554:	e722      	b.n	8539c <__udivdi3+0x8c>
   85556:	4630      	mov	r0, r6
   85558:	e720      	b.n	8539c <__udivdi3+0x8c>
   8555a:	42bc      	cmp	r4, r7
   8555c:	d994      	bls.n	85488 <__udivdi3+0x178>
   8555e:	f1ac 0c02 	sub.w	ip, ip, #2
   85562:	441f      	add	r7, r3
   85564:	e791      	b.n	8548a <__udivdi3+0x17a>
   85566:	4589      	cmp	r9, r1
   85568:	d99f      	bls.n	854aa <__udivdi3+0x19a>
   8556a:	3c02      	subs	r4, #2
   8556c:	4419      	add	r1, r3
   8556e:	e79d      	b.n	854ac <__udivdi3+0x19c>
   85570:	4638      	mov	r0, r7
   85572:	e7df      	b.n	85534 <__udivdi3+0x224>
   85574:	460e      	mov	r6, r1
   85576:	e7c8      	b.n	8550a <__udivdi3+0x1fa>
   85578:	3802      	subs	r0, #2
   8557a:	4429      	add	r1, r5
   8557c:	e741      	b.n	85402 <__udivdi3+0xf2>
   8557e:	bf00      	nop
   85580:	09097325 	.word	0x09097325
   85584:	25096325 	.word	0x25096325
   85588:	75250975 	.word	0x75250975
   8558c:	0d752509 	.word	0x0d752509
   85590:	0000000a 	.word	0x0000000a
   85594:	454c4449 	.word	0x454c4449
   85598:	00000000 	.word	0x00000000
   8559c:	00000a0d 	.word	0x00000a0d
   855a0:	20726d54 	.word	0x20726d54
   855a4:	00637653 	.word	0x00637653
   855a8:	0000003a 	.word	0x0000003a
   855ac:	006d6f43 	.word	0x006d6f43
   855b0:	75676552 	.word	0x75676552
   855b4:	6574616c 	.word	0x6574616c
   855b8:	00000000 	.word	0x00000000
   855bc:	00000043 	.word	0x00000043

000855c0 <_global_impure_ptr>:
   855c0:	20070148                                H.. 

000855c4 <zeroes.6869>:
   855c4:	30303030 30303030 30303030 30303030     0000000000000000
   855d4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   855e4:	00000000 33323130 37363534 62613938     ....0123456789ab
   855f4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00085604 <blanks.6868>:
   85604:	20202020 20202020 20202020 20202020                     

00085614 <_init>:
   85614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85616:	bf00      	nop
   85618:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8561a:	bc08      	pop	{r3}
   8561c:	469e      	mov	lr, r3
   8561e:	4770      	bx	lr

00085620 <__init_array_start>:
   85620:	000835bd 	.word	0x000835bd

00085624 <__frame_dummy_init_array_entry>:
   85624:	00080119                                ....

00085628 <_fini>:
   85628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8562a:	bf00      	nop
   8562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8562e:	bc08      	pop	{r3}
   85630:	469e      	mov	lr, r3
   85632:	4770      	bx	lr

00085634 <__fini_array_start>:
   85634:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070140 	.word	0x20070140

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <sync>:
20070138:	00000001                                ....

2007013c <g_interrupt_enabled>:
2007013c:	00000001                                ....

20070140 <SystemCoreClock>:
20070140:	003d0900 00000000                       ..=.....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	000855bc 00000000 00000000 00000000     .U..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00084da5                                .M..
